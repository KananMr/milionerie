[
  {
    "question": "Which keyword is used to declare a variable in JavaScript that can be reassigned?",
    "options": ["const", "var", "let", "Both var and let"],
    "answer": 3,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "How do you write a single-line comment in JavaScript?",
    "options": ["# This is a comment", "/* This is a comment */", "// This is a comment", "<!-- This is a comment -->"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the result of `typeof 10` in JavaScript?",
    "options": ["'integer'", "'int'", "'number'", "'float'"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which operator is used for strict equality (checks both value and type) in JavaScript?",
    "options": ["==", "===", "=", "!="],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "How do you get the length of an array named `myArray`?",
    "options": ["myArray.size()", "len(myArray)", "myArray.length", "length(myArray)"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What keyword is used to create a loop that iterates over the properties of an object or elements of an array?",
    "options": ["loop", "while", "for", "iterate"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which of the following data types is primitive in JavaScript?",
    "options": ["Array", "Object", "String", "Function"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "How do you access the first element of an array `arr`?",
    "options": ["arr(0)", "arr.first", "arr[0]", "arr.get(0)"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What does the `alert()` function do in browser JavaScript?",
    "options": ["Prints data to the console", "Displays a modal dialog with a message and an OK button", "Reads input from the user", "Sends an alert to the server"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which of the following is a logical AND operator in JavaScript?",
    "options": ["and", "&", "&&", "AND"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the result of `10 / 3` in JavaScript?",
    "options": ["3", "3.333...", "1", "Error"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "How do you add an element `x` to the end of an array `myArray`?",
    "options": ["myArray.add(x)", "myArray.append(x)", "myArray.push(x)", "myArray.insertEnd(x)"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What keyword is used to define a function in JavaScript?",
    "options": ["def", "func", "function", "method"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which function converts a string to an integer in JavaScript?",
    "options": ["Integer.parse()", "toInt()", "parseInt()", "Number.fromString()"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the output of `console.log(\"Hello\" + \"World\")`?",
    "options": ["Hello World", "HelloWorld", "Hello + World", "undefined"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which statement is used to make decisions in JavaScript?",
    "options": ["decide", "switch", "if", "choose"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What value is returned by a function that doesn't explicitly use a `return` statement?",
    "options": ["null", "0", "false", "undefined"],
    "answer": 3,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "How do you start a multi-line comment in JavaScript?",
    "options": ["//", "/*", "<!--", "##"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which JavaScript data type is used to store a collection of key-value pairs?",
    "options": ["Array", "String", "Object", "Map (ES6+) / Object"],
    "answer": 3,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the output of `Boolean(0)` in JavaScript?",
    "options": ["true", "false", "null", "undefined"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "How do you create an empty array in JavaScript?",
    "options": ["new Array()", "[]", "array()", "Both A and B"],
    "answer": 3,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which keyword is used to declare a variable that cannot be reassigned (a constant)?",
    "options": ["let", "var", "static", "const"],
    "answer": 3,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the comparison operator for 'not equal to' (value only)?",
    "options": ["<>", "!==", "!= ", "=/="],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "If `arr = [10, 20, 30]`, what is `arr[1]`?",
    "options": ["10", "20", "30", "undefined"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which loop continues as long as its condition evaluates to true?",
    "options": ["for", "if", "do...while", "while"],
    "answer": 3,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "How do you create an object in JavaScript?",
    "options": ["new Object()", "{}", "object()", "Both A and B"],
    "answer": 3,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which method is used to remove the last element from an array and return it?",
    "options": ["removeLast()", "deleteLast()", "pop()", "shift()"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What does `Math.random()` return?",
    "options": ["A random integer", "A random floating-point number between 0 (inclusive) and 1 (exclusive)", "A random boolean", "A random number between 0 and 100"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "The `else if` statement is written as what in JavaScript?",
    "options": ["elseif", "else if", "elif", "else_if"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the result of `'JavaScript'.substring(0, 4)`?",
    "options": ["Java", "JavaS", "Jav", "Scri"],
    "answer": 0,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which of these is NOT a JavaScript keyword?",
    "options": ["function", "class", "integer", "return"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "How do you check the data type of a variable `x` in JavaScript?",
    "options": ["type(x)", "typeof x", "x.type", "datatype(x)"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What character is used to access properties of an object?",
    "options": ["->", "::", ".", "[] (for string properties or computed names) / . (for valid identifiers)"],
    "answer": 3,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which statement is used to stop the execution of a loop or switch statement prematurely?",
    "options": ["stop", "exit", "break", "halt"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "In JavaScript, variable names are case-sensitive.",
    "options": ["True", "False", "Sometimes", "Only for global variables"],
    "answer": 0,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the output of `5 % 2` in JavaScript?",
    "options": ["2.5", "2", "1", "0"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "The `null` keyword in JavaScript represents:",
    "options": ["An empty string", "The integer zero", "The intentional absence of any object value", "An uninitialized variable"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the result of `'js' + 5` if not explicitly converted?",
    "options": ["js5", "Error", "NaN", "js 5"],
    "answer": 0,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which function is used to print output to the browser console?",
    "options": ["document.write()", "window.alert()", "console.log()", "print()"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "How do you define a class in ES6 JavaScript?",
    "options": ["function MyClass() {}", "class MyClass {}", "MyClass = class {}", "Both B and C"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the typical file extension for a JavaScript source file?",
    "options": [".java", ".script", ".jvs", ".js"],
    "answer": 3,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the output of `Array.isArray([])`?",
    "options": ["true", "false", "undefined", "null"],
    "answer": 0,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which keyword is used to handle potential errors in a block of code?",
    "options": ["catch", "error", "try", "handle"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "If `str = \"hello\"`, what is `str.toUpperCase()`?",
    "options": ["hello", "HELLO", "Hello", "Error"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What does the `length` property return when applied to a string?",
    "options": ["The number of words", "The number of characters", "The memory size in bytes", "The number of lines"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which of the following is a mutable data type in JavaScript?",
    "options": ["String", "Number", "Boolean", "Object (including Array)"],
    "answer": 3,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "How to check if an object `obj` has a property `propName`?",
    "options": ["`propName in obj`", "`obj.hasOwnProperty(propName)`", "`obj.propName !== undefined`", "All of the above (with some caveats)"],
    "answer": 3,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the output of `true && false` in JavaScript?",
    "options": ["true", "false", "null", "undefined"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the output of `true || false` in JavaScript?",
    "options": ["true", "false", "null", "undefined"],
    "answer": 0,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "How do you get the last element from an array `myArray`?",
    "options": ["myArray.last", "myArray.getLast()", "myArray[myArray.length - 1]", "myArray.pop() (this removes it)"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "The `split('')` method on a string `str`, with an empty string as separator, does what?",
    "options": ["Splits the string by spaces", "Returns an array of individual characters from the string", "Returns the original string", "Raises an error"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is `Math.sqrt(16)` in JavaScript?",
    "options": ["4", "8", "Error", "undefined"],
    "answer": 0,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which data structure in ES6+ stores unique values of any type, whether primitive values or object references?",
    "options": ["Array", "Object", "WeakSet", "Set"],
    "answer": 3,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "How do you define an empty Set in ES6+ JavaScript?",
    "options": ["{}", "new Set()", "[]", "set()"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the purpose of the `constructor` method in a JavaScript ES6 class?",
    "options": ["To be called when the class is defined", "A special method for creating and initializing an object created with a class", "To destroy an object", "To return a string representation of the class"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What does the `continue` statement do in a loop?",
    "options": ["Exits the loop entirely", "Skips the rest of the code in the current iteration and continues to the next iteration", "Pauses the loop", "Restarts the loop from the beginning"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "If `x = 5;`, what is the value of `x += 2;`?",
    "options": ["5", "2", "7", "undefined"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the output of `!true` in JavaScript?",
    "options": ["true", "false", "null", "undefined"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "How do you convert a number `n` to a string in JavaScript?",
    "options": ["String(n)", "n.toString()", "'' + n", "All of the above"],
    "answer": 3,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the result of `'apple'.indexOf('p')`?",
    "options": ["0", "1", "2", "-1 (if not found)"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "A `for...in` loop iterates over:",
    "options": ["The elements of an array", "The enumerable string properties of an object", "The indices of an array", "A range of numbers"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "A `for...of` loop (ES6+) iterates over:",
    "options": ["The properties of an object", "The values of an iterable object (like Array, String, Map, Set)", "The indices of an array", "A numerical range by default"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which keyword is used to define a block that will always be executed after a `try` block, regardless of whether an exception occurred?",
    "options": ["ensure", "finally", "always", "after"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which of the following is a valid way to assign multiple values to multiple variables using destructuring (ES6+)?",
    "options": ["a = 1, b = 2", "[a, b] = [1, 2]", "let a, b gets 1, 2", "assign (a,b) to (1,2)"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What does a template literal (using backticks ``) allow in JavaScript (ES6+)?",
    "options": ["Only multi-line strings", "Embedded expressions (e.g., `${variable}`), and multi-line strings", "To define HTML templates", "To create temporary string variables"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the output of `Math.round(3.14159)`?",
    "options": ["3.14", "3.1", "3", "4"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "In JavaScript, semicolons at the end of statements are:",
    "options": ["Always mandatory", "Never allowed", "Optional in most cases due to Automatic Semicolon Insertion (ASI), but recommended for clarity", "Only for multi-line statements"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which method removes the first element from an array and returns it?",
    "options": ["removeFirst()", "deleteFirst()", "shift()", "unshift()"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "The expression `x == y` checks for:",
    "options": ["Assignment", "Abstract equality (value equality with type coercion)", "Strict equality (value and type)", "Identity"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the output of `'hello'.charAt(1)`?",
    "options": ["h", "e", "l", "Error"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which object in the browser environment represents the current HTML document?",
    "options": ["window", "console", "navigator", "document"],
    "answer": 3,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What does `undefined` typically signify in JavaScript?",
    "options": ["A variable has been declared but not yet assigned a value, or a function returns no explicit value", "An error occurred", "An empty string", "A value that is intentionally null"],
    "answer": 0,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which method adds one or more elements to the beginning of an array and returns the new length?",
    "options": ["prepend()", "insertFront()", "unshift()", "push()"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the output of `Boolean('')` (empty string)?",
    "options": ["true", "false", "null", "undefined"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the output of `Boolean('hello')`?",
    "options": ["true", "false", "null", "undefined"],
    "answer": 0,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is `NaN` in JavaScript?",
    "options": ["Not a Name", "Not a Number - a value representing an unrepresentable or undefined numerical result", "Null and Negative", "A type of error object"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which method can be used to join all elements of an array into a string, separated by a specified separator?",
    "options": ["concat()", "join()", "merge()", "toString() (default separator is comma)"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the value of `x` after: `let x = 10; x -= 3;`?",
    "options": ["10", "3", "7", "undefined"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "To check if a string `str` includes the substring `sub`, you can use (ES6+):",
    "options": ["str.has(sub)", "str.contains(sub)", "str.includes(sub)", "sub in str"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "JavaScript is a single-threaded language (in its typical browser/Node.js execution model).",
    "options": ["True (but uses event loop for concurrency)", "False, it's multi-threaded by default", "Only for server-side JavaScript", "Depends on the browser"],
    "answer": 0,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the output of `2**3` (ES7+ exponentiation operator)?",
    "options": ["6", "5", "8", "Error in older JS"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which method adds an element to a Set object (ES6+)?",
    "options": ["push()", "insert()", "add()", "put()"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "How do you get the number of key-value pairs in an object `obj` (without using `Object.keys().length`)?",
    "options": ["obj.count", "obj.size", "There's no direct property; one must iterate or use `Object.keys()` etc.", "length(obj)"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the output of `Number(\"42px\")`?",
    "options": ["42", "42.0", "NaN", "Error"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which of these is NOT a primitive data type in JavaScript?",
    "options": ["Symbol", "BigInt", "Array", "undefined"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is `npm` primarily used for in the JavaScript ecosystem?",
    "options": ["Network Performance Monitor", "Node Package Manager - for managing JavaScript libraries and dependencies", "New Project Maker", "Native Process Manager"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "In JavaScript, an `if` statement must always be followed by an `else` block.",
    "options": ["True", "False", "Only if there's also an `else if`", "Depends on the condition"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the `this` keyword's value primarily determined by in a regular function call?",
    "options": ["The function's lexical scope", "How the function is called (invocation context)", "It always refers to the global object", "It's always undefined"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which method returns a shallow copy of a portion of an array into a new array object?",
    "options": ["copy()", "slice()", "duplicate()", "subarray()"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the output of `[1, 2, 3].map(x => x * 2)`?",
    "options": ["[1, 2, 3, 1, 2, 3]", "[2, 4, 6]", "[1, 4, 9]", "Error"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "The `localStorage` object in browsers allows you to:",
    "options": ["Store data that persists only for the current session", "Store key-value pairs locally in the user's browser, persisting even after the browser is closed", "Access local files on the user's system", "Store large binary data efficiently"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What does `'hello'.includes('ell')` return (ES6+)?",
    "options": ["true", "false", "1", "undefined"],
    "answer": 0,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which statement is used to throw a custom error in JavaScript?",
    "options": ["error NewError('message')", "exception NewError('message')", "throw new Error('message')", "raise Error('message')"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the value of `Boolean(null)`?",
    "options": ["true", "false", "null", "undefined"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the value of `Boolean(undefined)`?",
    "options": ["true", "false", "null", "Error"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What does `JSON.stringify(obj)` do?",
    "options": ["Parses a JSON string into a JavaScript object", "Converts a JavaScript object or value to a JSON string", "Checks if an object is valid JSON", "Loads a JSON file"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What does `JSON.parse(jsonString)` do?",
    "options": ["Converts a JavaScript object to a JSON string", "Parses a JSON string, constructing the JavaScript value or object described by the string", "Validates a JSON string", "Stringifies a JSON object for parsing"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "Which of these methods can be used to iterate over an array and execute a callback function for each element?",
    "options": ["forEach()", "map()", "filter()", "All of the above (though map and filter also return new arrays)"],
    "answer": 3,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "The `else` block in a `try-catch` statement (if `finally` is also present) is executed if:",
    "options": ["An exception occurs in the `try` block", "No exception occurs in the `try` block (JavaScript does not have a direct `else` for `try-catch` like Python; `finally` executes regardless. The question might imply a conceptual `else` path after `try` if no `catch` is hit.)", "Always after the `try` block", "This structure is not standard; `finally` is used."],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 1
  },
  {
    "question": "What is the `this` keyword's value in an arrow function (ES6+)?",
    "options": ["It's determined by how the arrow function is called", "It's lexically bound (it captures the `this` value of the enclosing lexical scope)", "It always refers to the global object", "It's always `undefined`"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What is a Promise in JavaScript (ES6+)?",
    "options": ["A guarantee that a function will execute successfully", "An object representing the eventual completion (or failure) of an asynchronous operation, and its resulting value", "A placeholder for a variable that will be assigned later", "A special type of callback function"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "Which method is used to handle the successful resolution of a Promise?",
    "options": [".error()", ".catch()", ".then() (first argument)", ".finally()"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "Which method is used to handle the rejection (failure) of a Promise?",
    "options": [".success()", ".then() (first argument)", ".catch() (or second argument of .then())", ".done()"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What does the `async` keyword before a function declaration indicate (ES2017+)?",
    "options": ["The function will execute synchronously but very fast", "The function will always return a Promise, and allows the use of `await` inside it", "The function is part of an asynchronous module", "The function can only be called asynchronously"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What does the `await` keyword do inside an `async` function?",
    "options": ["It forces the async function to wait for a specific duration", "It pauses the execution of the `async` function until the Promise it's waiting for settles (resolves or rejects), and then resumes with the result", "It marks a Promise as awaitable", "It immediately returns the Promise object"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What is a closure in JavaScript?",
    "options": ["A way to close a web browser window", "A function that has access to variables from its outer (enclosing) scope, even after the outer function has finished executing", "A special syntax for closing blocks of code", "A security feature to close off parts of an application"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What is prototypal inheritance in JavaScript?",
    "options": ["A type of inheritance based on class definitions only", "A mechanism where objects can inherit properties and methods directly from other objects (their prototype)", "A way to create prototypes for UI elements", "A deprecated inheritance model"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What does the spread syntax (`...`) do when used with an array in a function call (e.g., `myFunction(...myArray)`)?",
    "options": ["It creates a new array with `...` as elements", "It expands the array into individual arguments for the function call", "It passes the array as a single argument named `...`", "It filters the array based on a spread condition"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What does the spread syntax (`...`) do when used to create a new array (e.g., `let newArray = [...oldArray, 4, 5]`)?",
    "options": ["It creates a multi-dimensional array", "It copies all elements from `oldArray` into `newArray`, followed by 4 and 5", "It references `oldArray` within `newArray`", "It converts `oldArray` into a string"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What is destructuring assignment in ES6 JavaScript (e.g., `let [a, b] = [1, 2];`)?",
    "options": ["A way to destroy objects to free memory", "A syntax that allows unpacking values from arrays, or properties from objects, into distinct variables", "A method for restructuring HTML documents", "A process of breaking down complex data into simpler forms for storage"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What is the difference between `var`, `let`, and `const` regarding scope?",
    "options": ["`var` is function-scoped or global; `let` and `const` are block-scoped", "`let` is function-scoped; `var` and `const` are block-scoped", "`const` is function-scoped; `var` and `let` are block-scoped", "All are block-scoped"],
    "answer": 0,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What is hoisting in JavaScript?",
    "options": ["A technique for lifting heavy UI elements", "JavaScript's default behavior of moving declarations (but not initializations for `let`/`const`) to the top of their containing scope (function or global) during compilation", "A way to elevate the priority of certain functions", "A method for quickly scrolling to the top of a webpage"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "Which array method creates a new array with all elements that pass the test implemented by the provided function?",
    "options": ["map()", "forEach()", "filter()", "reduce()"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "Which array method creates a new array populated with the results of calling a provided function on every element in the calling array?",
    "options": ["filter()", "map()", "forEach()", "some()"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "Which array method executes a reducer function on each element of the array, resulting in a single output value?",
    "options": ["transform()", "aggregate()", "reduce()", "compile()"],
    "answer": 2,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What is an IIFE (Immediately Invoked Function Expression) in JavaScript?",
    "options": ["A function that is defined and then called immediately, often used to create a local scope", "A function that invokes itself recursively indefinitely", "An interface for invoking functions externally", "A function that is executed if an error occurs"],
    "answer": 0,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What does `event.preventDefault()` do in browser event handling?",
    "options": ["Stops the event from propagating further up the DOM tree", "Prevents the browser's default action for that event (e.g., submitting a form, following a link)", "Delays the event handling", "Triggers the event again"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What does `event.stopPropagation()` do in browser event handling?",
    "options": ["Prevents the default browser action for the event", "Stops the event from bubbling up or capturing further in the DOM tree", "Pauses the event handling queue", "Cancels the event entirely"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What is AJAX (Asynchronous JavaScript and XML) primarily used for?",
    "options": ["To animate XML documents", "To make asynchronous HTTP requests from the browser to a server to send/retrieve data without reloading the entire page", "To parse XML data on the client-side synchronously", "A JavaScript library for XML manipulation"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What is the `Fetch API` (ES6+)?",
    "options": ["An API for fetching files from the local system", "A modern interface for making network requests (HTTP), similar to `XMLHttpRequest` but with a more powerful and flexible feature set, based on Promises", "An API for fetching user data from social media", "A way to fetch elements from the DOM quickly"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What is the Same-Origin Policy in web browsers?",
    "options": ["A policy that requires all web content to originate from the same server", "A security restriction that prevents scripts on one web page from accessing data or scripts on a page with a different origin (protocol, domain, port)", "A guideline for consistent coding style across different origins", "A policy ensuring all JavaScript files have the same origin attribute"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What is CORS (Cross-Origin Resource Sharing)?",
    "options": ["A way to share CSS styles across different origins", "A mechanism that uses additional HTTP headers to tell browsers to give a web application running at one origin, access to selected resources from a different origin", "A JavaScript library for sharing resources", "A protocol for secure cross-origin data transfer"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What is a Web Worker in browser JavaScript?",
    "options": ["A JavaScript program that works on web design", "A script that runs in the background, independently of other scripts, without affecting the performance of the web page, typically used for long-running or CPU-intensive tasks", "A tool for automating web worker tasks", "A type of browser extension for web development"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What is `JSONP` (JSON with Padding)?",
    "options": ["A way to add padding to JSON data for better formatting", "A technique to overcome the same-origin policy by requesting data from a server in a different domain, using a `<script>` tag and a callback function (less common now due to CORS)", "A JavaScript library for parsing padded JSON", "A compressed JSON format"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What is the purpose of `Object.freeze(obj)`?",
    "options": ["To make an object's properties immutable (cannot be added, deleted, or changed) and the object itself non-extensible", "To temporarily stop an object from being modified", "To create a read-only copy of an object", "To cool down an object in a game simulation"],
    "answer": 0,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What is a higher-order function in JavaScript?",
    "options": ["A function that is defined with uppercase letters", "A function that operates on other functions, either by taking them as arguments or by returning them", "A function with high performance characteristics", "A function that is part of the JavaScript engine's core"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What does the `bind()` method on a function do?",
    "options": ["It binds the function to a specific event", "It creates a new function that, when called, has its `this` keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called", "It links two functions together", "It compiles the function for better performance"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What is the difference between `null` and `undefined` in JavaScript?",
    "options": ["They are identical", "`null` is an assigned value representing no value or no object; `undefined` means a variable has been declared but not assigned a value, or a function returns no explicit value", "`undefined` is for objects, `null` is for primitives", "`null` means an error, `undefined` means not found"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What is the `Symbol` type (ES6+)?",
    "options": ["A data type for representing mathematical symbols", "A primitive data type whose instances are unique and immutable, often used as keys for object properties to avoid name clashes", "A way to create symbolic links in JavaScript", "A visual symbol used in UI development"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What is a JavaScript `Map` object (ES6+)?",
    "options": ["A data structure for geographical maps", "A collection of keyed data items, similar to an `Object`, but where keys can be of any type (not just strings/symbols) and order of elements is preserved", "A function that maps one array to another", "A visual map of the DOM tree"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What is a JavaScript `WeakMap` object (ES6+)?",
    "options": ["A map that is not strongly typed", "A collection of key/value pairs in which the keys are weakly referenced, meaning that if there are no other references to a key, it can be garbage collected (and its entry removed from the map)", "A map with limited capacity", "A map that only stores weak passwords"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 2
  },
  {
    "question": "What is 'event delegation' in JavaScript DOM manipulation?",
    "options": ["Assigning event handling tasks to different team members", "A technique where you attach a single event listener to a parent element instead of multiple listeners to child elements, and use event properties (like `event.target`) to determine which child triggered the event", "Delegating UI events to the operating system", "A way to create custom browser events"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is the 'event loop' in JavaScript's concurrency model?",
    "options": ["A loop that constantly searches for new JavaScript events", "A mechanism that allows JavaScript (which is single-threaded for execution) to handle asynchronous operations by processing a message queue (tasks, microtasks) and executing callbacks when operations complete or events occur, without blocking the main thread", "A loop used for iterating through all DOM events", "A visual representation of event flow in an application"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is the difference between the task queue (or macrotask queue) and the microtask queue in the event loop?",
    "options": ["Macrotasks have higher priority than microtasks", "Microtasks (e.g., Promise `then/catch/finally` callbacks, `queueMicrotask`) are processed after the current script/task finishes and before the browser renders or processes the next macrotask (e.g., `setTimeout` callbacks, I/O events)", "Microtasks are for small functions, macrotasks for large ones", "There is no difference, they are synonyms"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What are JavaScript Modules (ES6 Modules - `import`/`export`)?",
    "options": ["Small utility functions provided by JavaScript", "A way to organize code into reusable pieces by exporting entities (variables, functions, classes) from one file and importing them into others, with lexical scoping and typically loaded asynchronously or deferred", "Hardware modules for running JavaScript", "Pre-compiled JavaScript libraries"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is tree shaking in the context of JavaScript module bundlers (like Webpack, Rollup)?",
    "options": ["A debugging technique to shake out bugs from the code tree", "A dead code elimination process where unused exports from ES6 modules are removed from the final bundle, reducing its size", "A way to restructure the DOM tree for better performance", "A method for randomly selecting modules to include in a build"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is a Service Worker in Progressive Web Apps (PWAs)?",
    "options": ["A JavaScript file that manages server-side tasks for a PWA", "A script that runs in the background, separate from a web page, enabling features like offline caching, push notifications, and background sync, by acting as a network proxy", "A UI component for displaying service status", "A worker thread dedicated to customer service chat bots"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is memoization as a programming technique?",
    "options": ["Writing down notes about your code", "An optimization technique where the results of expensive function calls are cached and returned for the same inputs, avoiding re-computation", "A way to memorize JavaScript syntax", "A method for compressing function code"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is the `Proxy` object (ES6+) in JavaScript used for?",
    "options": ["To create network proxies for HTTP requests", "To create a wrapper around an object that allows you to intercept and customize fundamental operations (like property lookup, assignment, function invocation) on that object, using 'traps'", "A proxy for accessing restricted browser APIs", "A lightweight version of an object for faster access"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is the `Reflect` object (ES6+) in JavaScript used for?",
    "options": ["To reflect images or UI elements", "A built-in object that provides methods for interceptable JavaScript operations, often used in conjunction with Proxies. Its methods correspond to the traps available for Proxies.", "An API for runtime code reflection similar to C# or Java", "A tool for reflecting on JavaScript's performance characteristics"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is tail call optimization (TCO) and is it generally implemented in JavaScript engines?",
    "options": ["An optimization where a tail call (a function call as the very last action) can reuse the current stack frame, preventing stack overflow for deep recursion. It was specified in ES6 but has limited/inconsistent implementation across JavaScript engines.", "Optimizing the tail end of arrays", "A way to make function calls faster by optimizing their 'tail' parameters", "A guaranteed feature in all modern JavaScript engines"],
    "answer": 0,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is a generator function (using `function*` and `yield`) in JavaScript (ES6+)?",
    "options": ["A function that generates random data", "A special type of function that can pause its execution (using `yield`) and resume later, allowing it to produce a sequence of values over time (making it an iterator factory)", "A function that generates HTML code dynamically", "A higher-order function for creating other functions"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What does `Object.create(proto, [propertiesObject])` do?",
    "options": ["Creates a new object with the specified prototype object and optional properties", "Creates a copy of an existing object", "Initializes a class with a prototype", "Defines a new prototype for all objects"],
    "answer": 0,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is the difference between `Object.seal(obj)` and `Object.freeze(obj)`?",
    "options": ["`seal` makes properties non-configurable and non-writable; `freeze` does the same but also makes the object non-extensible.", "`seal` makes an object non-extensible and its existing properties non-configurable (cannot be deleted, type cannot be changed), but values of writable properties can still be changed. `freeze` does all that `seal` does, plus it makes data properties non-writable.", "`freeze` is for arrays, `seal` is for objects.", "They are aliases for the same functionality."],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is the `Intersection Observer API` in browser JavaScript used for?",
    "options": ["Observing intersections in mathematical sets", "Asynchronously observing changes in the intersection of a target element with an ancestor element or with a top-level document's viewport, useful for lazy-loading images, infinite scrolling, etc.", "Detecting collisions between UI elements", "Observing network traffic intersections"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is the `Mutation Observer API` in browser JavaScript used for?",
    "options": ["Observing genetic mutations in biological simulations", "Observing changes (mutations) to the DOM tree, such as additions/removals of nodes, attribute changes, or character data changes", "Detecting mutations in JavaScript objects", "A tool for version control of DOM states"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is a `SharedArrayBuffer` (and `Atomics` object) in JavaScript used for?",
    "options": ["A buffer for sharing arrays between different browser tabs", "To enable true shared memory concurrency between Web Workers (or the main thread and workers), allowing multiple threads to read and write to the same block of memory. `Atomics` provides atomic operations for synchronization.", "An array buffer that is shared across a network", "A read-only array buffer for secure sharing"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is WebAssembly (Wasm)?",
    "options": ["A new JavaScript framework for web assembly lines", "A binary instruction format for a stack-based virtual machine, designed as a portable compilation target for high-level languages like C/C++/Rust, enabling deployment on the web for client and server applications with near-native performance", "An assembly language specific to web browsers", "A tool for assembling JavaScript modules"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is the `Temporal` API (a Stage 3 TC39 proposal, potentially future ECMAScript feature)?",
    "options": ["An API for managing temporary files", "A modern, comprehensive API for dates and times in JavaScript, designed to replace the error-prone `Date` object with immutable objects, better time zone support, and clearer operations", "A way to create temporary variables with automatic cleanup", "An API for scheduling temporal events in games"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is 'currying' in functional programming?",
    "options": ["A technique for making functions spicy", "The process of transforming a function that takes multiple arguments into a sequence of functions, each taking a single argument", "A way to cache function results", "A method for combining multiple functions into one"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is a 'pure function'?",
    "options": ["A function written entirely in JavaScript without external libraries", "A function whose return value is solely determined by its input arguments, without any observable side effects (e.g., modifying external state, I/O operations)", "A function that has been formally verified for correctness", "A function that only works with pure numbers"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is the `BigInt` type (ES2020) in JavaScript used for?",
    "options": ["Storing very large strings", "Representing and manipulating integers larger than the maximum safe integer representable by the `Number` type (`Number.MAX_SAFE_INTEGER`)", "A type for fixed-point decimal arithmetic", "A special type for large binary files"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is Optional Chaining (`?.`) (ES2020)?",
    "options": ["A way to make function arguments optional", "A syntax for accessing properties of an object or calling methods where the object reference might be `null` or `undefined`. If the reference is nullish, the expression short-circuits and evaluates to `undefined` instead of throwing an error.", "A chain of `if-else` statements for optional paths", "A method for linking optional modules"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is the Nullish Coalescing Operator (`??`) (ES2020)?",
    "options": ["An operator to check if a value is strictly null", "A logical operator that returns its right-hand side operand when its left-hand side operand is `null` or `undefined`, and otherwise returns its left-hand side operand", "An operator for combining null values", "A way to coalesce multiple undefined variables into one"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is `Object.is(value1, value2)` used for?",
    "options": ["To check if `value1` is an instance of `value2`", "To determine if two values are the same value, similar to `===` but with special handling for `NaN` (treats `NaN` as equal to `NaN`) and `-0`/`+0` (treats them as distinct if checking specifically)", "To assign `value2` to `value1` if `value1` is nullish", "To check if two objects share the same prototype"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What are 'Tagged Template Literals' in JavaScript?",
    "options": ["Template literals with HTML tags automatically inserted", "A form of template literal where a function (the 'tag') is placed before the template. The tag function processes the template literal's string parts and interpolated expressions, allowing for custom string construction or other operations.", "Template literals that can only be used for tagging data", "A way to add metadata tags to strings"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is the 'Shadow DOM'?",
    "options": ["A hidden copy of the main DOM for backup", "A web platform feature that allows encapsulation of an element's DOM structure and CSS styling, keeping it separate from the main document's DOM, primarily used for creating reusable web components", "A DOM that is only visible in browser developer tools", "A darker theme for the DOM inspector"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What are 'Custom Elements' (part of Web Components)?",
    "options": ["HTML elements that are styled with custom CSS", "A web platform feature that allows developers to define their own HTML elements with custom tags, behavior (defined with JavaScript classes), and encapsulated DOM (often using Shadow DOM)", "Elements that can only be used in custom browsers", "Predefined HTML elements with custom attributes"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is 'Server-Sent Events' (SSE)?",
    "options": ["Events triggered by server hardware failures", "A web technology where a browser can receive automatic updates (event streams) from a server via an HTTP connection, without the browser explicitly requesting them after the initial connection. It's a one-way communication from server to client.", "A way for servers to send JavaScript code to be executed on the client", "Events that occur when a server is started or stopped"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 3
  },
  {
    "question": "What is the `debounce` technique in JavaScript event handling?",
    "options": ["A way to make events bounce off UI elements", "A practice of limiting the rate at which a function is called, ensuring that it only executes after a certain amount of time has passed without it being invoked again (e.g., for handling search input or window resize events)", "A method for removing duplicate event listeners", "A technique to add a 'bouncing' animation to events"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 4
  },
  {
    "question": "What is the `throttle` technique in JavaScript event handling?",
    "options": ["A way to slow down all JavaScript execution", "A practice of ensuring that a function is called at most once within a specified time interval, regardless of how many times the event triggers it (e.g., for handling scroll events)", "A method for reducing the CPU throttle caused by JavaScript", "A technique to prioritize certain events over others"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 4
  },
  {
    "question": "What is a 'monad' in the context of functional programming and JavaScript?",
    "options": ["A single-threaded JavaScript application", "A design pattern or abstract data type that allows structuring programs generically while automating boilerplate code needed by the program logic. In JavaScript, Promises and Optionals (Maybe) can be seen as monad-like structures that help manage asynchronous operations or optional values in a composable way.", "A specific type of JavaScript module", "A JavaScript library for managing monetary values"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 4
  },
  {
    "question": "What is the 'virtual DOM' concept used by libraries/frameworks like React and Vue?",
    "options": ["A DOM that exists only in virtual reality", "An in-memory representation of the actual browser DOM. Changes are first applied to this virtual DOM, then an efficient diffing algorithm determines the minimal changes needed, which are then batched and applied to the real DOM, improving performance.", "A DOM that is not visible to the user", "A simplified version of the DOM for mobile devices"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 4
  },
  {
    "question": "What is 'isomorphic JavaScript' (or 'universal JavaScript')?",
    "options": ["JavaScript code that has identical structure regardless of its function", "JavaScript code that can run both on the server-side (e.g., Node.js) and the client-side (browser), often allowing for server-side rendering (SSR) of single-page applications for better performance and SEO", "A version of JavaScript that is the same across all browsers", "JavaScript code that maintains its shape when transformed"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 4
  },
  {
    "question": "What is the purpose of `Object.getOwnPropertySymbols(obj)`?",
    "options": ["To get all properties of an object that are symbols", "To return an array of all symbol properties found directly upon a given object", "To convert property names to symbols", "To list symbols used in mathematical operations on the object"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 4
  },
  {
    "question": "How does garbage collection typically work in JavaScript engines like V8 (conceptually)?",
    "options": ["It requires manual calls to `delete` for all objects", "It primarily uses a generational mark-and-sweep (or mark-compact) algorithm. Objects are allocated in a 'young generation' and collected frequently. Objects that survive multiple collections are promoted to an 'old generation', which is collected less frequently but more thoroughly.", "It uses reference counting for all objects", "It only collects garbage when the browser tab is closed"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 4
  },
  {
    "question": "What is a 'TypedArray' in JavaScript (e.g., `Int32Array`, `Float64Array`)?",
    "options": ["An array that can only store string types", "An array-like view of an underlying binary data buffer (`ArrayBuffer`), allowing direct manipulation of raw binary data with specific element types (e.g., 32-bit integers, 64-bit floats)", "An array that enforces type checking at runtime for all its elements", "A JavaScript array that is typed using TypeScript syntax"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 4
  },
  {
    "question": "What is the `Atomics` object in JavaScript used for in conjunction with `SharedArrayBuffer`?",
    "options": ["To perform atomic physics simulations", "To provide methods for performing atomic operations (e.g., add, load, store, wait, notify) on `SharedArrayBuffer` locations, enabling safe concurrent access and synchronization primitives for multi-threaded JavaScript (e.g., with Web Workers)", "To make object operations atomic by default", "A library for creating atomic UI components"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 4
  },
  {
    "question": "What is the difference between `Function.prototype.call()`, `Function.prototype.apply()`, and `Function.prototype.bind()`?",
    "options": ["`call` and `apply` invoke the function immediately with a specified `this` context, `call` takes arguments individually, `apply` takes them as an array; `bind` creates a new function with a bound `this` and optionally pre-set arguments, but doesn't execute it immediately.", "`bind` invokes immediately, `call` and `apply` create new functions.", "`call` is for objects, `apply` for arrays, `bind` for primitives.", "They are all aliases for the same functionality but with different naming conventions."],
    "answer": 0,
    "category": "JavaScript",
    "difficulty": 4
  },
  {
    "question": "What is a 'WeakSet' in JavaScript (ES6+)?",
    "options": ["A set that is not strongly enforced", "A collection that lets you store weakly held objects. The objects in a `WeakSet` are held weakly, meaning if there are no other references to an object stored in the `WeakSet`, it can be garbage collected.", "A set with a limited number of items", "A set that only allows primitive data types"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 4
  },
  {
    "question": "What is the `FinalizationRegistry` API (ES2021)?",
    "options": ["A registry for finalizing financial transactions", "An API that lets you register callbacks to be invoked after a target object has been garbage collected, allowing for cleanup of resources associated with the object that are not directly managed by the GC (e.g., unmanaged memory)", "A tool for finalizing JavaScript module definitions", "A registry of final class methods that cannot be overridden"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 4
  },
  {
    "question": "What is the `eval()` function in JavaScript generally considered and why?",
    "options": ["A highly recommended function for dynamic code execution due to its flexibility", "Generally discouraged due to security risks (executing arbitrary strings as code can lead to injection vulnerabilities) and performance implications (harder for engines to optimize)", "A safe way to evaluate mathematical expressions only", "A function for evaluating the truthiness of expressions"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 4
  },
  {
    "question": "What are 'Realms' in the ECMAScript specification?",
    "options": ["Different fantasy worlds in JavaScript games", "A concept representing a distinct global environment, each with its own global object, intrinsic objects (like `Array`, `Object`), and execution context. For example, an `<iframe>` typically has its own realm.", "A way to partition JavaScript code into secure zones", "Different levels of JavaScript proficiency"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 4
  },
  {
    "question": "What is the `Proxy.revocable(target, handler)` static method used for?",
    "options": ["To create a proxy that can be revoked by the browser for security reasons", "To create a revocable Proxy object, which returns an object containing the proxy itself and a `revoke` function. Calling `revoke()` disables the proxy, and any further operations on it will throw a `TypeError`.", "To revoke access permissions for a proxy server", "To create a proxy that automatically revokes itself after a timeout"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 4
  },
  {
    "question": "What is the purpose of `Object.setPrototypeOf(obj, prototype)` and `Object.getPrototypeOf(obj)`?",
    "options": ["To set and get the prototype of a class, not an object instance", "`setPrototypeOf` sets the prototype (internal `[[Prototype]]` property) of a specified object to another object or null. `getPrototypeOf` returns the prototype of the specified object.", "To manage prototypes for primitive types", "These are deprecated methods for prototype manipulation"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 4
  },
  {
    "question": "What is 'intrinsic stringification' in JavaScript, e.g., when an object is concatenated with a string?",
    "options": ["A process where objects are converted to their binary string representation", "The process by which an object is converted to a primitive string value, typically by first trying its `toString()` method, and if that's not suitable or doesn't return a primitive, then its `valueOf()` method", "A security feature that prevents objects from being converted to strings", "A way to deeply stringify nested objects"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 4
  },
  {
    "question": "What is the `WritableStream` API (part of Streams API)?",
    "options": ["An API for writing to local files from the browser", "A standard interface for writing streaming data, providing a built-in way to handle backpressure and errors. It's the destination for data in a stream.", "A stream that can only be written to by the main thread", "A read-only stream that appears writable for compatibility"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 4
  },
  {
    "question": "What is the `ReadableStream` API (part of Streams API)?",
    "options": ["An API for reading user input from the console", "A standard interface for reading streaming data, providing a built-in way to handle backpressure and errors. It's the source of data in a stream.", "A stream that can only be read by the main thread", "A write-only stream that appears readable for compatibility"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 4
  },
  {
    "question": "What is the `TransformStream` API (part of Streams API)?",
    "options": ["An API for transforming CSS styles on the fly", "A duplex stream that acts as both a `ReadableStream` and a `WritableStream`, allowing data to be read, transformed, and then written out. It sits between a source and a sink.", "A stream for transforming image data", "A stream that converts data between different character encodings"],
    "answer": 1,
    "category": "JavaScript",
    "difficulty": 4
  }
]