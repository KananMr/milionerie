[
  {
    "question": "What keyword is used to define a class in C#?",
    "options": ["def", "Class", "class", "struct"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which symbol is used for single-line comments in C#?",
    "options": ["#", "/* */", "//", "<!-- -->"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is the entry point method for a C# console application?",
    "options": ["Start()", "Main()", "Run()", "Execute()"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which data type is used to store whole numbers in C#?",
    "options": ["float", "double", "int", "string"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "How do you print output to the console in C#?",
    "options": ["Console.PrintLine()", "System.Out.WriteLine()", "Console.WriteLine()", "print()"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which operator is used to assign a value to a variable in C#?",
    "options": ["==", ":=", "=", "=>"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What keyword is used to create an instance of a class (an object) in C#?",
    "options": ["create", "instance", "new", "object"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which of the following is a C# access modifier?",
    "options": ["static", "final", "public", "abstract"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is the file extension for a C# source file?",
    "options": [".csx", ".csharp", ".cpp", ".cs"],
    "answer": 3,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which loop is used to iterate over a collection (like an array or list) in C#?",
    "options": ["for", "while", "foreach", "All of the above"],
    "answer": 3,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is the C# equivalent of Python's `list` or Java's `ArrayList` for dynamic arrays?",
    "options": ["Array", "Collection", "List<T>", "DynamicArray"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which keyword is used to indicate that a method does not return a value?",
    "options": ["null", "void", "empty", "nothing"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "How do you declare an integer variable named `count` in C#?",
    "options": ["var count;", "int count;", "integer count;", "count int;"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which keyword is used to handle exceptions in C#?",
    "options": ["catch", "error", "try", "handle"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is the boolean type in C#?",
    "options": ["Boolean", "boolean", "bool", "flag"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which operator is used for logical AND in C#?",
    "options": ["and", "&", "AND", "&&"],
    "answer": 3,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which operator is used for logical OR in C#?",
    "options": ["or", "|", "OR", "||"],
    "answer": 3,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is the string concatenation operator in C#?",
    "options": ["&", ".", "+", "concat()"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which keyword is used to define a constant variable whose value cannot be changed?",
    "options": ["static", "readonly", "final", "const"],
    "answer": 3,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "How do you get the length of a string `s` in C#?",
    "options": ["s.length()", "s.Length", "len(s)", "s.Size"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is the base class for all types in .NET (and thus C#)?",
    "options": ["Object", "System.Type", "System.Object", "BaseType"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which keyword is used to inherit from a base class in C#?",
    "options": ["inherits", "extends", ": (colon)", "super"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is a `namespace` in C# used for?",
    "options": ["To define a region of memory", "To organize code and prevent naming conflicts", "To declare variables with global scope", "To specify the character encoding"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which of these is a value type in C#?",
    "options": ["string", "object", "int", "class"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which of these is a reference type in C#?",
    "options": ["struct", "enum", "string", "bool"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What does the `using` statement often do when used with disposable objects (like file streams)?",
    "options": ["Imports a namespace", "Declares a variable that cannot be reassigned", "Ensures the object's `Dispose()` method is called, even if exceptions occur", "Creates an alias for a type"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "How do you access the first element of an array `arr` in C#?",
    "options": ["arr(0)", "arr.first()", "arr[0]", "arr.get(0)"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What keyword is used to check if an object is of a certain type or can be cast to it?",
    "options": ["typeof", "instanceof", "is", "astype"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which statement is used for conditional execution of code blocks?",
    "options": ["switch", "for", "if", "select"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is the keyword used to make a method or property accessible only within its own class?",
    "options": ["internal", "protected", "private", "local"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is the equality comparison operator in C#?",
    "options": ["=", "===", "equals", "=="],
    "answer": 3,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "The `string` type in C# is immutable.",
    "options": ["True", "False", "Sometimes", "Only for literals"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "How do you declare a single-dimensional array of 5 integers in C#?",
    "options": ["int arr[5];", "int[] arr = new int(5);", "int[] arr = new int[5];", "Array<int> arr = new Array<int>(5);"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is the `null` keyword used for in C#?",
    "options": ["To represent the integer zero", "To represent an uninitialized boolean", "To represent a reference that does not point to any object", "To represent an empty string"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is the `StringBuilder` class often used for?",
    "options": ["Building user interfaces", "Efficiently creating and modifying strings, especially with multiple concatenations", "Constructing SQL queries", "Defining the structure of a class"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What does the `break` statement do in a loop or switch statement?",
    "options": ["Skips the current iteration", "Exits the loop or switch statement immediately", "Pauses execution", "Restarts the loop"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What does the `continue` statement do in a loop?",
    "options": ["Exits the loop immediately", "Skips the rest of the current iteration and proceeds to the next", "Restarts the entire loop", "Halts the program"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which C# keyword is used to define an interface?",
    "options": ["Interface", "protocol", "interface", "contract"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "A class can implement multiple interfaces in C#.",
    "options": ["True", "False", "Only if the interfaces are empty", "Only one active interface at a time"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "A class can inherit from multiple base classes (multiple inheritance of classes) in C#.",
    "options": ["True", "False", "Only if the base classes are abstract", "Using a special keyword"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is a constructor in C#?",
    "options": ["A method used to destroy objects", "A special method for creating and initializing an object of a class", "A method that constructs strings", "A static method for building classes"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "If a class does not explicitly define a constructor, C# provides a default one.",
    "options": ["True (a public parameterless constructor)", "False, it causes a compile error", "True, but it's private", "Only if the class is static"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which keyword is used to refer to the current instance of a class?",
    "options": ["self", "current", "this", "object"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is method overloading in C#?",
    "options": ["A subclass providing a specific implementation for a base class method", "Defining multiple methods in the same class with the same name but different parameter lists", "Making a method too complex", "Overriding the default behavior of an operator"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is method overriding in C#?",
    "options": ["A derived class providing a specific implementation for a virtual or abstract method defined in its base class", "Defining multiple methods with the same name and same parameters", "Calling a method from a base class", "Changing a method's return type in a derived class"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which keyword is used in a base class to allow a method to be overridden in a derived class?",
    "options": ["override", "abstract", "virtual", "overridable"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which keyword is used in a derived class to provide a new implementation for a virtual base class method?",
    "options": ["new", "virtual", "implements", "override"],
    "answer": 3,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is an `enum` in C#?",
    "options": ["A type of error message", "A special data type that consists of a set of named constants (enumerator list)", "An event numerator", "A dynamic list of numbers"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "How do you get the number of elements in a `List<int> numbers`?",
    "options": ["numbers.Length", "numbers.Size", "numbers.Count", "length(numbers)"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "The `static` keyword, when applied to a class member (field or method), means:",
    "options": ["The member's value cannot be changed", "The member belongs to the type itself, rather than to a specific instance of the type", "The member is automatically serialized", "The member is hidden from other classes"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which of the following converts a string `str` to an integer?",
    "options": ["(int)str", "str.ToInt()", "int.Parse(str)", "Convert.Integer(str)"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What does `TryParse` (e.g., `int.TryParse`) method typically return?",
    "options": ["The parsed value or null", "A boolean indicating if the parse was successful, and an out parameter for the parsed value", "The parsed value or throws an exception", "An error code"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is the purpose of the `readonly` keyword when applied to a field?",
    "options": ["The field can only be read from by methods", "The field can be assigned a value only in its declaration or in the constructor of the same class", "The field is constant and its value must be known at compile time", "The field cannot be accessed from outside the class"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "A `struct` in C# is a:",
    "options": ["Reference type", "Value type", "Interface type", "Static type"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which directive is used to include a namespace in your C# file?",
    "options": ["#include", "import", "package", "using"],
    "answer": 3,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "The `var` keyword in C# (when used for local variables) means:",
    "options": ["The variable can hold any type of data (dynamic typing)", "The compiler infers the type of the variable from the initialization expression", "The variable is a variant type", "The variable's type is not known until runtime"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is the result of `5 / 2` if both are integers in C#?",
    "options": ["2.5", "2.0", "2", "3"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is the result of `5.0 / 2` in C#?",
    "options": ["2.5", "2.0", "2", "Error"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which keyword is used to define a block of code that is guaranteed to execute after a `try` block, regardless of whether an exception was thrown?",
    "options": ["ensure", "always", "finally", "execute"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "C# supports operator overloading.",
    "options": ["True", "False", "Only for built-in types", "Only for arithmetic operators"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is the `=>` symbol often used for in C# (e.g., in lambda expressions or expression-bodied members)?",
    "options": ["Greater than or equal to", "Assignment", "Goes to / Separates parameters from the expression", "A type cast"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which collection class in C# is best suited for storing key-value pairs?",
    "options": ["List<T>", "Array", "Queue<T>", "Dictionary<TKey, TValue>"],
    "answer": 3,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "The `?.` operator (null-conditional operator) is used to:",
    "options": ["Force an operation even if the object is null", "Access members of an object only if the object is not null, otherwise returns null", "Check if an object is of a nullable type", "Assign a default value if null"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "The `??` operator (null-coalescing operator) is used to:",
    "options": ["Combine two nullable types", "Return the left-hand operand if it's not null; otherwise, it returns the right-hand operand", "Check if both operands are null", "Perform a bitwise OR operation on nullable types"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "How do you get the current date and time in C#?",
    "options": ["System.Date.Now", "DateTime.Current", "DateTime.Now", "Time.GetNow()"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is an `abstract` class in C#?",
    "options": ["A class that cannot have any methods", "A class that cannot be instantiated and may contain abstract (unimplemented) members", "A class that is hidden from other assemblies", "A class that is automatically static"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "An `abstract` method in C# must be implemented in a non-abstract derived class.",
    "options": ["True", "False", "Optional", "Only if it's public"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What does LINQ stand for?",
    "options": ["Language Integrated Queries", "List Inquiry", "Linked Information Queries", "Language Independent Numerics and Queries"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which LINQ keyword is used to filter a sequence based on a condition?",
    "options": ["select", "filter", "where", "from"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which LINQ keyword is used to project each element of a sequence into a new form?",
    "options": ["select", "project", "map", "transform"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is a property in C#?",
    "options": ["A public field", "A member that provides a flexible mechanism to read, write, or compute the value of a private field (using get/set accessors)", "A static configuration value", "A special type of method"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "An auto-implemented property in C# (e.g., `public int Age { get; set; }`) automatically creates a private backing field.",
    "options": ["True", "False", "Only if it's a value type", "Only in .NET Core"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is an `event` in C# primarily used for?",
    "options": ["Timing operations", "Enabling a class or object to provide notifications (publish events) that other classes can subscribe to (handle)", "Handling user interface events only", "Logging system events"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is a `delegate` in C#?",
    "options": ["A class that delegates tasks to other classes", "A type that represents references to methods with a particular parameter list and return type (similar to function pointers)", "A way to assign tasks to team members in project management", "A reserved keyword for future use"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Lambda expressions in C# provide a concise way to write:",
    "options": ["Multi-line comments", "Anonymous methods or implement delegates/expression trees", "XML documentation", "Switch statements"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is an extension method in C#?",
    "options": ["A method that extends the duration of an object's lifetime", "A static method that can be invoked as if it were an instance method of an existing type, without modifying the original type", "A method that is added to a class at runtime", "A method that is defined in a file extension"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is the `yield return` statement used for in C#?",
    "options": ["To return multiple values from a method at once", "To create an iterator block, allowing a method to return a sequence of values one at a time without building a full collection in memory", "To yield control to the operating system", "To return a value and then pause execution indefinitely"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Generics in C# (e.g., `List<T>`) allow you to:",
    "options": ["Generate code automatically", "Define type-safe data structures and methods without committing to a specific data type until declaration or instantiation", "Create generic user interfaces", "Work with generic algorithms only"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which C# keyword is used to prevent a class from being inherited?",
    "options": ["final", "static", "const", "sealed"],
    "answer": 3,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "The `out` keyword for a method parameter means:",
    "options": ["The parameter's value is passed out of the method but not in", "The parameter must be assigned a value inside the method before the method returns, and the caller sees this assigned value", "The parameter is optional", "The parameter is read-only within the method"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "The `ref` keyword for a method parameter means:",
    "options": ["The parameter is passed by reference; changes to the parameter in the method affect the original variable passed by the caller", "The parameter is a reference type", "The parameter refers to another variable", "The parameter is optional"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is Reflection in .NET/C#?",
    "options": ["A way to create mirror images of objects", "The ability of code to inspect and manipulate metadata (types, methods, properties, etc.) and code at runtime", "A graphical effect for UI elements", "A technique for self-healing code"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is an attribute in C# (e.g., `[Serializable]`)?",
    "options": ["A public field of a class", "A declarative tag that is used to convey information to runtime or tools about the behavior of program elements like types, methods, etc.", "A property with only a getter", "A special type of comment"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What does `async` and `await` keywords primarily facilitate in C#?",
    "options": ["Synchronous programming", "Asynchronous programming, making it easier to write non-blocking I/O-bound operations without complex callbacks or manual thread management", "Automatic synchronization of threads", "Accelerated method execution"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "A method marked with `async` must return:",
    "options": ["void, Task, or Task<T>", "Only void", "Only Task", "Any type"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is NuGet?",
    "options": ["A C# language feature", "The package manager for .NET, used to find, install, and manage libraries and tools", "A .NET runtime environment", "A code analysis tool"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is the `nameof()` operator used for?",
    "options": ["To get the string name of a variable, type, or member, useful for avoiding magic strings in error messages or property change notifications", "To name a new instance of an object", "To convert a name to an object", "To check if a name exists in the current scope"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "String interpolation in C# (e.g., `$\"My name is {name}\"`) provides a way to:",
    "options": ["Interpolate between two string values", "Embed expressions inside string literals for easier formatting", "Internationalize strings", "Create polynomial interpolations"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "The `is` operator checks type, while the `as` operator attempts a cast and returns `null` if it fails (for reference types).",
    "options": ["True", "False", "`as` throws an exception if it fails", "`is` also performs the cast"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is a `record` type in C# (introduced in C# 9)?",
    "options": ["A special type for database records", "A reference type (or value type with `record struct`) that provides synthesized methods for value-based equality, immutability (by default for positional records), and a concise declaration syntax", "A type that can only store strings", "A type for recording audio or video"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is the purpose of the `IDisposable` interface?",
    "options": ["To mark a class as disposable for UI elements", "To provide a mechanism for releasing unmanaged resources (e.g., file handles, network connections) via a `Dispose()` method", "To indicate an object can be discarded by the garbage collector immediately", "To disable an object temporarily"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "The Common Language Runtime (CLR) is the execution environment for .NET programs.",
    "options": ["True", "False", "CLR is only for C++ .NET", "CLR is the compiler"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is an assembly in .NET?",
    "options": ["A collection of source code files", "A compiled code library or executable program; the fundamental unit of deployment, versioning, security, and type identity in .NET", "A CPU assembly language program", "A set of CPU instructions"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What does `default(T)` return for a generic type `T`?",
    "options": ["Always null", "The default value for type `T` (e.g., 0 for numeric types, false for bool, null for reference types)", "An empty instance of `T`", "Throws an exception"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "A `partial` class or method in C# allows:",
    "options": ["A class or method to be only partially implemented", "The definition of a class, struct, interface, or method to be split into multiple source files", "A class to be partially loaded into memory", "A method that returns partial results"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is boxing in C#?",
    "options": ["Placing an object in a protective box", "The process of converting a value type instance to a corresponding reference type (object) instance", "A type of data encryption", "Creating a UI box element"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is unboxing in C#?",
    "options": ["Removing an object from a box", "The process of converting a reference type (object) instance (that was previously boxed) back to its original value type", "A type of data decryption", "Destroying a UI box element"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which keyword is used to explicitly call a base class constructor from a derived class constructor?",
    "options": ["super()", "this()", "base()", "parent()"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which of these is a valid way to initialize a `List<string>`?",
    "options": ["`List<string> names = {\"Alice\", \"Bob\"};`", "`List<string> names = new List<string> {\"Alice\", \"Bob\"};`", "`List<string> names = [\"Alice\", \"Bob\"];`", "Both A and B are similar to collection initializers"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is the `internal` access modifier used for?",
    "options": ["Members are accessible only within the same class", "Members are accessible only within the same assembly (project)", "Members are accessible only by derived classes", "Members are accessible from anywhere"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "The `protected internal` access modifier means a member is accessible:",
    "options": ["Only within the same assembly AND only by derived classes", "Within the same assembly OR by derived classes in other assemblies", "Only by derived classes within the same assembly", "This combination is not valid"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is the `Stack<T>` class in C# used for?",
    "options": ["A first-in, first-out (FIFO) collection", "A last-in, first-out (LIFO) collection", "A sorted collection", "A collection of key-value pairs"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is the `Queue<T>` class in C# used for?",
    "options": ["A last-in, first-out (LIFO) collection", "A first-in, first-out (FIFO) collection", "An unordered collection of unique items", "A collection that allows access by index"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "A `HashSet<T>` in C# is a collection that:",
    "options": ["Stores elements in sorted order", "Contains no duplicate elements and offers high-performance set operations", "Allows duplicate elements and maintains insertion order", "Stores elements as key-value pairs"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is the purpose of an indexer in a C# class (e.g., `public T this[int index]`)?",
    "options": ["To define the starting index for arrays within the class", "To allow instances of the class to be accessed using array-like syntax (e.g., `myObject[i]`)", "To index the class in a search engine", "To create an internal index for fast lookups"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which statement correctly throws a new `ArgumentNullException`?",
    "options": ["`throw ArgumentNullException(\"paramName\");`", "`new throw ArgumentNullException(\"paramName\");`", "`throw new ArgumentNullException(\"paramName\");`", "`exception new ArgumentNullException(\"paramName\");`"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What does `string.IsNullOrEmpty(myString)` check?",
    "options": ["If `myString` is null", "If `myString` is an empty string (`\"\"`)", "If `myString` is null or an empty string", "If `myString` contains only whitespace"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What does `string.IsNullOrWhiteSpace(myString)` check?",
    "options": ["If `myString` is null", "If `myString` is an empty string", "If `myString` is null, empty, or consists only of white-space characters", "If `myString` contains any whitespace"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "In C#, `int?` (or `Nullable<int>`) represents:",
    "options": ["An integer that must be positive", "A nullable integer type that can hold an integer value or `null`", "A pointer to an integer", "An integer that is optional in a method signature"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "Which class is commonly used for generating random numbers in C#?",
    "options": ["Math.Random", "System.Randomizer", "Random", "NumberGenerator"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "The `params` keyword in a method signature allows a method to accept:",
    "options": ["A variable number of arguments of a specified type, passed as an array", "Parameters that are passed by reference", "Only primitive type parameters", "Parameters with default values"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is `System.Environment.NewLine` used for?",
    "options": ["To create a new line in the console output, specific to the current environment (OS)", "To get the next line from user input", "To define a new line character for strings", "To move to a new line in the source code editor"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 1
  },
  {
    "question": "What is the `?.` operator (null-conditional or Elvis operator) used for in C#?",
    "options": ["To provide a default value if an expression is null", "To safely access members of an object that might be null, returning null if the object itself is null, thus avoiding a NullReferenceException", "To check if an object is definitely not null", "To cast a nullable type to its non-nullable counterpart"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is the `??` operator (null-coalescing operator) used for in C#?",
    "options": ["To perform a bitwise OR on nullable types", "To return the left-hand operand if it is not null; otherwise, it evaluates and returns the right-hand operand (a default value)", "To check if two nullable types are both null", "To concatenate two nullable strings"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is LINQ (Language Integrated Query) primarily used for in C#?",
    "options": ["To define the structure of language grammars", "To provide a consistent way to query data from various sources (e.g., collections, databases, XML) using a SQL-like syntax or method chaining", "To link multiple C# assemblies together", "To integrate C# with other programming languages"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "Which LINQ method is used to filter a sequence based on a predicate?",
    "options": ["Select()", "Filter()", "Where()", "Take()"],
    "answer": 2,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "Which LINQ method is used to transform each element of a sequence into a new form?",
    "options": ["Transform()", "Map()", "Project()", "Select()"],
    "answer": 3,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is an anonymous type in C#?",
    "options": ["A type that has no name in the source code, typically created on-the-fly using `new { Property = value }` syntax, often with LINQ projections", "A class without any members", "A type that cannot be instantiated", "A type used for anonymous methods only"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is the purpose of an extension method in C#?",
    "options": ["To extend the functionality of existing types (classes, structs, interfaces) without modifying their source code or creating a derived type", "To create methods that are only accessible via file extensions", "To define methods that can extend their own execution time", "To add methods to a class dynamically at runtime only"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What are lambda expressions in C# primarily used for?",
    "options": ["Defining multi-line string literals", "Creating anonymous functions or methods, often used with delegates, LINQ, and event handlers for concise inline code", "Performing mathematical calculations on lambda calculus", "Defining constants with lambda scope"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is a `delegate` in C#?",
    "options": ["A lightweight class used for data transfer", "A type that safely encapsulates a method, similar to a function pointer in C++, allowing methods to be passed as arguments or stored", "A design pattern for delegating tasks to worker threads", "A reserved keyword for creating user interface delegates"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is an `event` in C#?",
    "options": ["A mechanism for a class or object to provide notifications (publish events) to other interested objects (subscribers) when something of interest occurs", "A system-level event like a mouse click or key press", "A data structure for storing event logs", "A timer event that fires at regular intervals"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is the `async` keyword used for in a C# method signature?",
    "options": ["To indicate that the method will execute synchronously", "To enable the use of the `await` keyword within the method, signifying that the method performs asynchronous operations", "To make the method run on a separate thread automatically", "To ensure the method is called asynchronously by the caller"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What does the `await` keyword do in an `async` method in C#?",
    "options": ["It forces the asynchronous operation to complete immediately, blocking the current thread", "It suspends the execution of the `async` method until the awaited asynchronous operation completes, without blocking the calling thread (if the caller is also async or the operation is truly non-blocking)", "It marks a method as being available for awaiting by other methods", "It cancels an ongoing asynchronous operation"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is a `Task` or `Task<TResult>` object in C# primarily used for?",
    "options": ["To represent a unit of work or an asynchronous operation that may or may not have completed, and may produce a result (`Task<TResult>`)", "To schedule tasks in the operating system's task scheduler", "To define a to-do list within an application", "To manage CPU tasks and priorities"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is Reflection in C#?",
    "options": ["A UI technique for creating mirror-like effects", "The ability of a program to examine its own metadata (types, members, attributes) at runtime and dynamically invoke methods or access fields/properties", "A pattern for reflecting changes in one object to another", "A way to optimize code by reflecting on its structure at compile time"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is an attribute in C# (e.g., `[Obsolete]`, `[Serializable]`)?",
    "options": ["A public field of a class that holds descriptive information", "A declarative tag that provides metadata about program elements (classes, methods, properties, etc.) to the compiler, runtime, or other tools", "A special type of comment that is processed by the compiler", "A configuration setting for an assembly"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is the purpose of the `IDisposable` interface and the `Dispose` method?",
    "options": ["To mark an object as no longer needed so the garbage collector can reclaim it faster", "To provide a standardized way for objects to release unmanaged resources (e.g., file handles, database connections) explicitly when they are no longer needed", "To disable an object's functionality temporarily", "To serialize an object for disposal"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is the `using` statement (block scope) typically used for with `IDisposable` objects?",
    "options": ["To import the namespace where the `IDisposable` object is defined", "To ensure that the `Dispose` method of an `IDisposable` object is called automatically when the execution leaves the `using` block, even if an exception occurs", "To create an alias for an `IDisposable` type", "To specify that an object should use disposable memory"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is the difference between a `struct` and a `class` in C# regarding inheritance?",
    "options": ["Structs can inherit from other structs but not classes; classes can inherit from other classes but not structs", "Structs cannot inherit from any other struct or class (except `System.ValueType` implicitly), but can implement interfaces; classes support single inheritance from another class and can implement multiple interfaces", "Both structs and classes support multiple inheritance", "Neither structs nor classes support inheritance"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What does it mean if a C# type is 'sealed'?",
    "options": ["The type is encrypted and cannot be read easily", "The type cannot be inherited from (i.e., it cannot be a base class)", "The type is guaranteed to be thread-safe", "The type is stored in a sealed memory location"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is boxing in C#?",
    "options": ["A technique for packaging C# applications", "The process of converting a value type instance (e.g., `int`, `struct`) into an object (a reference type) on the heap", "Creating a UI element that resembles a box", "Encrypting sensitive data values"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is unboxing in C#?",
    "options": ["Extracting files from a C# package", "The process of converting an object (that was previously boxed from a value type) back to its original value type", "Removing a UI element that resembles a box", "Decrypting sensitive data values"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is an indexer in C#?",
    "options": ["A tool for creating search indexes for C# documentation", "A special type of property that allows an object to be accessed like an array (e.g., `myObject[index]`)", "A way to define the starting index for collections in a class", "An attribute that specifies the indexing order for database tables"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is the `yield return` statement used for in C#?",
    "options": ["To return multiple values from a method simultaneously in an array", "To create an iterator method that produces a sequence of values one at a time, deferring execution until the value is requested", "To yield control to another thread for a specified duration", "To return a value and then immediately terminate the method"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What are generic constraints in C# (e.g., `where T : class`) used for?",
    "options": ["To limit the memory usage of generic types", "To specify requirements on the type arguments that can be used with a generic type or method (e.g., must be a reference type, must implement an interface, must have a parameterless constructor)", "To constrain the number of generic type parameters a class can have", "To define constraints for database queries involving generic types"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is the purpose of `System.Nullable<T>` (or `T?` syntactic sugar) in C#?",
    "options": ["To make all value types nullable by default", "To represent value types (`struct`s) that can also have a `null` value, in addition to their normal range of values", "To indicate that a reference type might be null (this is the default for reference types already)", "To provide a way to explicitly disallow nulls for reference types"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is the `nameof()` operator in C# used for?",
    "options": ["To convert a string to a valid C# identifier name", "To obtain the string name of a variable, type, or member at compile time, useful for avoiding 'magic strings' in things like exception messages or `INotifyPropertyChanged`", "To rename a class or method during refactoring", "To check if a given name is a C# keyword"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is a `record` type in C# 9 and later?",
    "options": ["A special struct type used exclusively for database record mapping", "A reference type (or value type if `record struct`) that provides concise syntax for creating types whose primary purpose is to store data, with built-in support for immutability (by default for positional records) and value-based equality", "A class that can only contain `readonly` fields", "A type used for recording audio and video streams in .NET"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is the `init` accessor in a C# 9 property (e.g., `public int Year { get; init; }`)?",
    "options": ["It allows the property to be set only during object initialization (in the constructor or using an object initializer)", "It initializes the property to a default value automatically", "It makes the property readable only after initialization", "It is a shorthand for a private setter that can only be called from `init` methods"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is a tuple in C# (e.g., `(int, string) GetPerson()`)?",
    "options": ["An immutable fixed-size collection of elements, typically of different types, often used for returning multiple values from a method", "A mutable version of an array", "A specialized list for storing 2D coordinates", "A synonym for an anonymous type"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is pattern matching in C# (e.g., using `is` with type patterns, or `switch` expressions)?",
    "options": ["A way to match regular expression patterns in strings", "A feature that allows checking an expression against various patterns (e.g., type, constant, relational, property patterns) and executing code based on the match", "A technique for finding similar code patterns in a codebase", "A method for matching UI design patterns"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is the `params` keyword in a C# method signature used for?",
    "options": ["To specify that the method has performance-critical parameters", "To allow a method to accept a variable number of arguments of a specified type, which are treated as an array within the method", "To indicate that the parameters are passed by reference by default", "To define parameters that are only used for parallel processing"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is the `dynamic` type in C#?",
    "options": ["A type that is determined at compile time but can change dynamically", "A type whose operations are resolved at runtime rather than compile time, bypassing compile-time type checking for those operations", "A base type for all dynamically allocated objects", "A keyword to make static members dynamic"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is an assembly in .NET?",
    "options": ["A collection of C# source code files before compilation", "The fundamental unit of deployment, versioning, security, and type identity in .NET; typically a DLL or EXE file containing compiled code (IL) and metadata", "A tool for assembling CPU instructions from C# code", "A high-level design document for a .NET application"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is the Global Assembly Cache (GAC)?",
    "options": ["A cache for frequently accessed global variables", "A machine-wide code cache that stores assemblies specifically designated to be shared by several applications on the computer (less common in modern .NET Core/5+ development)", "A cache for compiled LINQ queries", "A temporary storage area for .NET application settings"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is the Common Language Runtime (CLR)?",
    "options": ["The C# language compiler", "The virtual machine component of .NET that manages the execution of .NET programs, providing services like memory management, security, and exception handling", "A library of common language constructs", "A runtime environment for web services only"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is Intermediate Language (IL) or Common Intermediate Language (CIL) in .NET?",
    "options": ["A low-level human-readable language similar to assembly", "A CPU-independent instruction set into which .NET languages (like C#) are compiled; it is then further compiled into native machine code by the JIT compiler at runtime", "A language used for inter-process communication in .NET", "An internal logging language for the CLR"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is a 'managed' code in the context of .NET?",
    "options": ["Code that is managed by a project manager", "Code whose execution is managed by the Common Language Runtime (CLR), benefiting from services like garbage collection and security", "Code that is written in a very structured and manageable way", "Code that has passed all management reviews"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is 'unmanaged' code in the context of .NET?",
    "options": ["Code that is poorly written or disorganized", "Code that executes outside the control of the CLR, such as native C/C++ code, often accessed via P/Invoke or COM Interop", "Code that has not yet been managed by a version control system", "Code that does not use any .NET libraries"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is Platform Invoke (P/Invoke) in C#?",
    "options": ["A way to invoke methods on different .NET platforms", "A service that allows managed code (C#) to call functions implemented in unmanaged DLLs (e.g., Win32 API functions)", "A mechanism for invoking platform-specific UI elements", "A tool for remote procedure calls across different platforms"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is the `lock` statement in C# used for?",
    "options": ["To lock a file from being accessed by other processes", "To ensure that a block of code is executed by only one thread at a time, by acquiring a mutual-exclusion lock on a given object", "To prevent a variable's value from being changed", "To lock the user interface during a long operation"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is a `Mutex` (Mutual Exclusion) object in C# threading?",
    "options": ["A type of mutable string optimized for thread safety", "A synchronization primitive that can be used to control access to a shared resource; it can also be used for inter-process synchronization", "A collection that automatically excludes duplicate items in a thread-safe manner", "A method for muting audio output from a specific thread"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is a `Semaphore` in C# threading?",
    "options": ["A tool for sending signals between threads", "A synchronization primitive that limits the number of threads that can concurrently access a resource or a pool of resources", "A type of flag used in inter-thread communication", "A visual indicator of thread activity"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 2
  },
  {
    "question": "What is the `volatile` keyword in C# used for with a field?",
    "options": ["To indicate that the field's value may change frequently and should be stored in volatile memory", "To ensure that the most up-to-date value of the field is read from main memory by different threads, and that reads/writes are not reordered by the compiler or CPU in a way that breaks thread safety for certain scenarios", "To make the field read-only after its first assignment in a volatile context", "To mark the field as being prone to exceptions"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is the Thread Pool in .NET?",
    "options": ["A visual representation of active threads", "A collection of worker threads managed by the CLR that can be used to efficiently execute short asynchronous tasks without the overhead of creating and destroying threads for each task", "A memory area shared by all threads", "A specific type of swimming pool for .NET developers"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is the primary difference between `Task.Run()` and creating a new `Thread` object and starting it?",
    "options": ["`Task.Run()` always runs on the UI thread, while `new Thread()` runs on a background thread", "`Task.Run()` typically uses a thread from the Thread Pool, which is more efficient for short-lived tasks; `new Thread()` creates a dedicated thread which is more suitable for long-running, blocking operations", "`Task.Run()` is for CPU-bound work, `new Thread()` is for I/O-bound work", "There is no significant difference; `Task.Run()` is just newer syntax"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is an `Expression Tree` in C#?",
    "options": ["A graphical tree representation of a C# expression", "A data structure that represents code in a tree-like format, where each node is an expression (e.g., a method call, a binary operation). LINQ providers often use them to translate C# queries into other query languages (like SQL).", "A way to optimize mathematical expressions at compile time", "A tree data structure specifically for storing string expressions"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is the `Activator.CreateInstance<T>()` method used for?",
    "options": ["To activate a user's software license", "To create an instance of a specified type `T` at runtime, often used when the type is not known until runtime (requires `T` to have a parameterless constructor)", "To check if a type is active and can be instantiated", "To create an instance of an `Activity` class in UI frameworks"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is the purpose of the `System.Diagnostics.Debug` class versus `System.Diagnostics.Trace` class?",
    "options": ["`Debug` is for debugging UI, `Trace` is for tracing network calls", "`Debug` methods are typically compiled only in Debug builds, while `Trace` methods are usually compiled in both Debug and Release builds (though configurable), allowing for tracing in production environments", "`Debug` writes to console, `Trace` writes to a file", "`Trace` is a newer version of `Debug` with more features"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is `ConfigureAwait(false)` often used for in `async` library code?",
    "options": ["To configure the `await` to always run on a background thread", "To prevent the continuation after an `await` from trying to resume on the original synchronization context (e.g., UI thread), which can help avoid deadlocks in library code and improve performance in some cases", "To disable configuration loading for the awaited task", "To configure the task to run with lower priority"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is a `WeakReference<T>` in C#?",
    "options": ["A reference that is not type-safe", "A reference to an object that allows the garbage collector to collect the object if there are no other strong references to it, useful for caching or linking objects without preventing their collection", "A reference that can only be accessed by weak entities", "A reference that is automatically set to null after a short period"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is Covariance and Contravariance in C# generics?",
    "options": ["Mechanisms for varying CPU clock speed for generic operations", "Covariance allows using a more derived type than specified by the generic parameter (e.g., `IEnumerable<string>` to `IEnumerable<object>`). Contravariance allows using a less derived type (e.g., `Action<object>` to `Action<string>`). Applies to interfaces and delegates.", "Ways to define variant record types", "Terms related to statistical variance in generic collections"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is the `yield break` statement used for in an iterator method?",
    "options": ["To break out of the current loop within the iterator", "To indicate that the iterator has finished producing values and should stop, without returning any further values", "To cause a compile-time error if the iterator yields any more values", "To pause the iterator and yield control back to the operating system"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is the `AppDomain` in .NET (more relevant in .NET Framework than .NET Core/5+)?",
    "options": ["The domain name of the application server", "An isolation boundary within a process where .NET code can execute; applications can have multiple AppDomains to isolate parts of the application or load/unload assemblies", "A configuration file for application settings", "A domain-specific language for .NET applications"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is `System.Runtime.CompilerServices.CallerMemberNameAttribute` used for?",
    "options": ["To get the name of the current .NET runtime version", "To automatically provide the name of the calling method or property as an optional string parameter, often used in implementing `INotifyPropertyChanged`", "To restrict caller access based on member name", "To compile member names into a lookup table"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is a `ConditionalWeakTable<TKey, TValue>`?",
    "options": ["A table that only stores weak references to keys if a condition is met", "A collection that allows you to attach arbitrary data (value) to an object (key) using weak references for keys, so the entry is removed if the key is garbage collected and no other strong references to the value exist through the table", "A dictionary where values are conditional expressions", "A lookup table for conditional compilation symbols"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is the primary purpose of `Span<T>` and `ReadOnlySpan<T>` introduced in C# 7.2?",
    "options": ["To provide a type-safe representation of a contiguous region of arbitrary memory (managed, native, or stack-allocated) without allocation and copying, improving performance for operations on slices of data", "To span operations across multiple threads", "To define a timespan for asynchronous tasks", "To create read-only versions of any collection type"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What are C# Source Generators (introduced with .NET 5 / C# 9)?",
    "options": ["Tools that generate C# code from other languages", "A compiler feature that lets C# developers inspect user code during compilation and generate new C# source files on the fly that are added to the user's compilation, often used for boilerplate reduction or performance optimization", "Generators for random C# code snippets", "Visual Studio extensions for generating project templates"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is a `default interface method` in C# 8 and later?",
    "options": ["A method that is the default entry point for an interface", "A method in an interface that has a default implementation, allowing interfaces to evolve by adding new members without breaking existing classes that implement them", "An interface that can only contain default methods", "A method that resets an interface to its default state"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is the `IAsyncEnumerable<T>` interface and `await foreach` loop (C# 8+)?",
    "options": ["A way to enumerate collections asynchronously on multiple threads", "A mechanism for consuming an asynchronous stream of data, where elements are produced asynchronously and consumed one by one using `await foreach`", "An enumerable that can only be accessed via `async` methods", "A special type of enumerable for UI event streams"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is `System.Text.Json` library primarily used for in modern .NET?",
    "options": ["Manipulating text files with JSON-like structures", "Providing high-performance, low-allocation JSON serialization and deserialization, as a built-in alternative to libraries like Newtonsoft.Json", "Validating JSON schema definitions", "Querying JSON documents using LINQ"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is a 'target-typed new expression' in C# 9 (e.g., `Point p = new (x, y);`)?",
    "options": ["A `new` expression that targets a specific .NET runtime version", "A feature where the type of the `new` expression can be inferred from the context (e.g., the variable declaration or method parameter type), allowing for more concise object creation syntax", "A `new` expression that can only create instances of target framework types", "An expression for creating new targets in a game engine"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is the .NET Garbage Collector's 'mark and sweep' (or similar) algorithm generally responsible for?",
    "options": ["Marking code sections for optimization and sweeping away unused variables", "Identifying and reclaiming memory occupied by objects that are no longer reachable (referenced) by the application", "Marking files for deletion and sweeping them from the disk", "Identifying performance bottlenecks and sweeping them under the rug"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What are 'Generations' (Gen 0, Gen 1, Gen 2) in the .NET Garbage Collector?",
    "options": ["Different versions of the .NET GC algorithm", "A strategy where objects are grouped by age; new, short-lived objects are in Gen 0 and collected frequently, while older, long-lived objects are promoted to higher generations and collected less often, optimizing GC performance", "Memory segments for different types of objects (e.g., small, large, UI)", "Security levels for .NET objects"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is the Large Object Heap (LOH) in .NET?",
    "options": ["A heap for storing very large source code files", "A separate segment of the managed heap used for allocating large objects (typically >85KB); objects on the LOH are not compacted by default (in older .NET versions) to avoid performance costs, which can lead to fragmentation", "A heap dedicated to objects from unmanaged code", "A data structure for managing heap metadata"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is a `Memory<T>` and `ReadOnlyMemory<T>` in C#?",
    "options": ["Representations of .NET memory allocation statistics", "Types similar to `Span<T>`/`ReadOnlySpan<T>` but they can be stored on the heap and used in `async` methods, providing a more flexible way to represent a contiguous region of memory that might not be a simple array", "Classes for managing memory pools", "Wrappers for unmanaged memory pointers"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is `System.Threading.Channels` (introduced in .NET Core 3.0) used for?",
    "options": ["Managing TV channels in a media application", "Providing a set of synchronization data structures for passing data between producers and consumers asynchronously, like bounded or unbounded channels (queues)", "Defining communication channels for inter-process communication", "Encrypting data channels for secure communication"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is a `ValueTask` and `ValueTask<TResult>` in C#?",
    "options": ["Tasks that always return a value type", "Struct-based alternatives to `Task`/`Task<TResult>` designed to reduce allocations in scenarios where an asynchronous operation often completes synchronously or uses a reusable awaitable object", "Tasks that can only be used with value types", "Tasks that have a fixed value known at compile time"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What is the `stackalloc` keyword in C# used for (in an unsafe context or with `Span<T>`)?",
    "options": ["To allocate memory from the managed heap with stack-like access patterns", "To allocate a block of memory on the call stack, which is automatically freed when the method exits; useful for small, temporary buffers to avoid heap allocation overhead", "To define the maximum stack size for a thread", "To create a `Stack<T>` object with a pre-allocated size"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 3
  },
  {
    "question": "What are `ref struct` types in C# (C# 7.2+)?",
    "options": ["Structs that can only be passed by reference", "Value types that are constrained to live on the stack and cannot be boxed or stored in heap-based collections (like `List<T>`), designed for high-performance scenarios (e.g., `Span<T>`)", "Structs that automatically manage references to other objects", "Structs that behave like reference types for inheritance purposes"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 4
  },
  {
    "question": "What is the `Unsafe` class in `System.Runtime.CompilerServices` primarily used for?",
    "options": ["To mark code sections as potentially unsafe for execution", "To provide low-level, performance-critical memory manipulation operations (like pointer arithmetic, direct memory access) that bypass some CLR safety checks, intended for advanced scenarios", "To handle unsafe type casts", "To manage unmanaged resources in an unsafe manner"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 4
  },
  {
    "question": "What is the difference between `Interlocked` class methods (e.g., `Interlocked.Increment`) and using a `lock` statement for simple atomic operations on shared variables?",
    "options": ["`Interlocked` methods are generally less performant but easier to use", "`Interlocked` methods provide hardware-level atomic operations for simple increments, decrements, exchanges, etc., which are often more lightweight and performant than acquiring a full lock for these specific operations", "`lock` is for value types, `Interlocked` is for reference types", "`Interlocked` methods are not thread-safe"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 4
  },
  {
    "question": "What is a `DynamicMethod` in C# Reflection?",
    "options": ["A method whose behavior changes dynamically at runtime", "A way to create lightweight, JIT-compiled methods at runtime without needing to define a full assembly or type, often used for generating highly optimized code on the fly", "A method that can only be called using the `dynamic` keyword", "A method that is part of a dynamic link library"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 4
  },
  {
    "question": "What is 'tail call optimization' (TCO) and is it guaranteed in C# by the CLR?",
    "options": ["An optimization where a call at the tail end of a method is replaced by a jump, potentially avoiding stack overflow for deep recursion. It is not guaranteed by the CLR for C# in all cases, but may occur under specific conditions (e.g., 64-bit JIT, release mode, certain call patterns).", "An optimization for methods with many parameters ('long tails')", "A way to optimize the tail of a linked list", "Guaranteed for all recursive C# methods to prevent stack overflows"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 4
  },
  {
    "question": "What is `System.Reflection.Emit` namespace used for?",
    "options": ["Emitting sounds from the computer speakers", "Generating Intermediate Language (IL) code dynamically at runtime to create new types and methods in memory, which can then be executed", "Emitting events for reflection-based systems", "Controlling display emissions for UI elements"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 4
  },
  {
    "question": "What is a 'covariant return type' in C# 9 and later?",
    "options": ["A return type that varies based on CPU architecture", "Allows an overriding method in a derived class to return a type that is more derived than the return type of the base class method it overrides", "A return type that can be `object` or any of its variants", "A feature that makes all return types implicitly covariant"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 4
  },
  {
    "question": "What is the purpose of `Module Initializers` (C# 9+), marked with `[ModuleInitializer]` attribute?",
    "options": ["To initialize individual class modules within an assembly", "To allow code to run once when an assembly (module) is loaded, before any type in the assembly is accessed or any static constructor is run", "To define initial values for module-level configuration settings", "To initialize .NET runtime modules"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 4
  },
  {
    "question": "What are 'function pointers' in C# 9 and later (e.g., `delegate*<int, int, int> addPtr`)?",
    "options": ["Pointers to memory locations where functions are stored, similar to C++", "A low-level feature providing unmanaged function pointers that can call static methods (managed or unmanaged) with a specific signature, offering potential performance benefits over delegates in interop or high-performance scenarios", "Pointers that can only point to `static void Main()`", "A way to create delegates with pointer syntax"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 4
  },
  {
    "question": "What is the .NET `SocketsHttpHandler` (and its predecessor `HttpClientHandler`) primarily responsible for?",
    "options": ["Handling WebSocket connections exclusively", "Providing the underlying implementation for `HttpClient` to send HTTP requests and receive HTTP responses, managing connections, proxies, cookies, etc.", "Handling low-level network socket programming for HTTP", "Securing HTTP communications with SSL/TLS by default"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 4
  },
  {
    "question": "What is `SIMD` (Single Instruction, Multiple Data) support in .NET (e.g., `System.Numerics.Vector<T>`) used for?",
    "options": ["Simulating different data types with a single instruction", "Leveraging CPU vector instructions to perform the same operation on multiple data elements simultaneously, significantly speeding up certain types of numerical computations", "A secure way to manage multiple data streams", "A simple data structure for storing multiple values"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 4
  },
  {
    "question": "What are `required` members (C# 11+), e.g., `public required string Name { get; set; }`?",
    "options": ["Members that require special permissions to access", "Properties or fields that must be initialized by the caller when an object is created (e.g., in an object initializer), otherwise a compile-time error or warning is produced", "Members that are required by the .NET runtime for the class to function", "Members that are automatically initialized to a required default value"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 4
  },
  {
    "question": "What is a `file`-local type (C# 11+), declared with `file class MyType {}`?",
    "options": ["A class that can only be used for file I/O operations", "A type whose visibility is restricted to the source file in which it is declared, helping to avoid naming conflicts and improve encapsulation within a single file", "A class that is automatically serialized to a file", "A type that represents a file system entity"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 4
  },
  {
    "question": "What is `Tiered Compilation` in the .NET JIT compiler?",
    "options": ["A compilation process that involves multiple tiers of programming languages", "A feature where methods are initially JIT-compiled with minimal optimization for faster startup, and then re-compiled with more aggressive optimizations if they are frequently executed (hot methods)", "A system for compiling code for different CPU tiers (e.g., server, desktop, mobile)", "A way to compile code into different security tiers"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 4
  },
  {
    "question": "What is the purpose of `System.Runtime.Intrinsics` namespace in .NET?",
    "options": ["To provide access to intrinsic properties of .NET types", "To expose hardware-specific CPU intrinsics (like SSE, AVX instructions) directly to C# code, allowing for highly optimized, platform-dependent low-level operations", "To define intrinsic data types for the CLR", "To manage intrinsic security features of the .NET runtime"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 4
  },
  {
    "question": "What is `Dynamic PGO` (Profile-Guided Optimization) in .NET 6+?",
    "options": ["A dynamic way to guide users through application options", "A JIT optimization technique where runtime profiling data (e.g., which code paths are hot, typical branch behavior) is collected and used to make more informed optimization decisions during recompilation (e.g., with tiered compilation)", "A tool for dynamically optimizing database queries", "A method for profiling GUI performance dynamically"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 4
  },
  {
    "question": "What is a `scoped ref` variable in C# (e.g., `scoped ref readonly MyStruct s = ref GetStruct();`)?",
    "options": ["A reference variable whose scope is limited to the current assembly", "A `ref` variable whose lifetime is restricted to the current method's stack frame (or a shorter scope), preventing it from being stored on the heap or returned in a way that would outlive its source. Primarily for use with `ref struct` types.", "A reference that is automatically disposed at the end of its scope", "A reference variable that can only point to `scoped` objects"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 4
  },
  {
    "question": "What are 'raw string literals' (C# 11+), e.g., `var json = \"\"\" { \"name\": \"Test\" } \"\"\";`?",
    "options": ["String literals that contain raw, unescaped binary data", "A way to define string literals that can span multiple lines and where escape sequences (like `\\n`, `\\t`) are not processed by default, making it easier to embed text like JSON, XML, or regex patterns", "String literals that are not interned by the compiler", "String literals that are guaranteed to be allocated on the raw memory heap"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 4
  },
  {
    "question": "What is the `[AsyncMethodBuilder(...)]` attribute used for in C#?",
    "options": ["To specify a custom builder type for constructing the state machine and managing the lifecycle of custom awaitable types (beyond `Task`, `Task<T>`, `ValueTask`, `ValueTask<T>`)", "To build `async` methods from synchronous ones automatically", "To define the default awaiter for all `async` methods in an assembly", "To configure the thread pool used by `async` method builders"],
    "answer": 0,
    "category": "Csharp",
    "difficulty": 4
  },
  {
    "question": "What is the `ControlledExecution.Run` method (from older .NET frameworks, related to CERs - Constrained Execution Regions)?",
    "options": ["A method to run code with elevated administrative privileges in a controlled manner", "A mechanism to execute a block of code with guarantees that certain failures (like `ThreadAbortException` or `OutOfMemoryException` in specific places) will not corrupt state, primarily for writing robust infrastructure code. Less prominent in modern .NET.", "A way to control the execution speed of a method for testing", "A method to run .NET code in a sandboxed environment with controlled permissions"],
    "answer": 1,
    "category": "Csharp",
    "difficulty": 4
  }
]