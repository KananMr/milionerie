[
    {
      "question": "What is the primary purpose of the `public static void main(String[] args)` method in Java?",
      "options": ["To initialize objects", "To serve as the entry point for a Java application", "To handle exceptions", "To create threads"],
      "answer": 1,
      "category": "Java",
      "difficulty": 1
    },
    {
      "question": "Which keyword is used to define a variable that cannot be modified after initialization?",
      "options": ["static", "final", "private", "volatile"],
      "answer": 1,
      "category": "Java",
      "difficulty": 1
    },
    {
      "question": "What is the default value of an uninitialized` boolean variable in a class?",
      "options": ["true", "false", "null", "0"],
      "answer": 1,
      "category": "Java",
      "difficulty": 1
    },
    {
      "question": "Which of these data types is used to store whole numbers in Java?",
      "options": ["float", "double", "int", "String"],
      "answer": 2,
      "category": "Java",
      "difficulty": 1
    },
    {
      "question": "What does the `System.out.println()` method do in Java?",
      "options": ["Reads input from the console", "Prints output to the console", "Closes the program", "Compiles the code"],
      "answer": 1,
      "category": "Java",
      "difficulty": 1
    },
    {
      "question": "Which operator is used to compare two values for equality in Java?",
      "options": ["=", "==", "!=", "!=="],
      "answer": 1,
      "category": "Java",
      "difficulty": 1
    },
    {
      "question": "What is the purpose of the `import` statement in Java?",
      "options": ["To include external libraries or classes from other packages", "To define a loop", "To declare a class", "To handle exceptions"],
      "answer": 0,
      "category": "Java",
      "difficulty": 1
    },
    {
      "question": "Which keyword is used to create an instance of a class in Java?",
      "options": ["class", "new", "this", "super"],
      "answer": 1,
      "category": "Java",
      "difficulty": 1
    },
    {
      "question": "What is the default access modifier for a class member if none is specified?",
      "options": ["public", "private", "protected", "package-private (default)"],
      "answer": 3,
      "category": "Java",
      "difficulty": 1
    },
    {
      "question": "Which loop is used to iterate over a collection or array in Java?",
      "options": ["while", "do-while", "for (including for-each)", "switch"],
      "answer": 2,
      "category": "Java",
      "difficulty": 1
    },
    {
      "question": "What is the `String` class used for in Java?",
      "options": ["To perform mathematical calculations", "To store and manipulate text", "To manage threads", "To handle file operations"],
      "answer": 1,
      "category": "Java",
      "difficulty": 1
    },
    {
      "question": "Which keyword is used to inherit a class in Java?",
      "options": ["implements", "extends", "super", "this"],
      "answer": 1,
      "category": "Java",
      "difficulty": 1
    },
    {
      "question": "What is the purpose of the `break` statement in Java?",
      "options": ["To exit a loop or switch statement", "To skip the current iteration", "To declare a variable", "To throw an exception"],
      "answer": 0,
      "category": "Java",
      "difficulty": 1
    },
    {
      "question": "Which of these is a valid way to declare an array in Java?",
      "options": ["int[] arr;", "array int arr;", "int arr[];", "Both int[] arr; and int arr[];"],
      "answer": 3,
      "category": "Java",
      "difficulty": 1
    },
    {
      "question": "What is the purpose of the `return` statement in a method?",
      "options": ["To terminate the program", "To send a value back to the caller or exit the method", "To declare a variable", "To catch an exception"],
      "answer": 1,
      "category": "Java",
      "difficulty": 1
    },
    {
      "question": "Which keyword is used to define a method that belongs to the class rather than an instance?",
      "options": ["final", "static", "private", "abstract"],
      "answer": 1,
      "category": "Java",
      "difficulty": 1
    },
    {
      "question": "What is the default value of an uninitialized object reference in Java?",
      "options": ["0", "null", "false", "undefined"],
      "answer": 1,
      "category": "Java",
      "difficulty": 1
    },
    {
      "question": "Which of these is a primitive data type in Java?",
      "options": ["String", "Integer", "char", "ArrayList"],
      "answer": 2,
      "category": "Java",
      "difficulty": 1
    },
    {
      "question": "What is the purpose of the `if` statement in Java?",
      "options": ["To declare a variable", "To execute code conditionally", "To create a loop", "To define a class"],
      "answer": 1,
      "category": "Java",
      "difficulty": 1
    },
    {
      "question": "Which keyword is used to handle exceptions in Java?",
      "options": ["try", "throw", "catch", "All of the above (try, catch, throw, throws, finally are involved)"],
      "answer": 3,
      "category": "Java",
      "difficulty": 1
    },
    {
        "question": "What does JDK stand for?",
        "options": ["Java Development Kit", "Java Runtime Kit", "Java Virtual Kit", "Java Deployment Kit"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "What does JRE stand for?",
        "options": ["Java Runtime Environment", "Java Execution Environment", "Java Realtime Engine", "Java Resource Engine"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "What does JVM stand for?",
        "options": ["Java Virtual Machine", "Java Verified Machine", "Java Volatile Machine", "Java Vector Machine"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "Which keyword declares a class in Java?",
        "options": ["class", "void", "public", "static"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "How do you write a single-line comment in Java?",
        "options": ["// comment", "/* comment */", "# comment", "<!-- comment -->"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "How do you write a multi-line comment in Java?",
        "options": ["/* comment */", "// comment", "<!-- comment -->", "## comment ##"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "What is the file extension for a Java source file?",
        "options": [".java", ".class", ".jar", ".exe"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "What is the file extension for a compiled Java bytecode file?",
        "options": [".class", ".java", ".jar", ".src"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "Which company originally developed Java?",
        "options": ["Sun Microsystems", "Microsoft", "Apple", "Google"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "Is Java case-sensitive?",
        "options": ["Yes", "No", "Only for keywords", "Only for identifiers"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "Which of these is a valid variable name in Java?",
        "options": ["_myVariable", "1variable", "my-variable", "class"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "Which operator is used for addition in Java?",
        "options": ["+", "-", "*", "/"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "Which operator is used for multiplication in Java?",
        "options": ["*", "+", "-", "/"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "Which operator is used for modulus (remainder) in Java?",
        "options": ["%", "/", "mod", "rem"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "What is the result of `10 % 3` in Java?",
        "options": ["1", "3", "0", "10"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "What is the default value of an uninitialized `byte` variable in a class?",
        "options": ["0", "0.0", "false", "null"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "What is the default value of an uninitialized `float` variable in a class?",
        "options": ["0.0f", "0.0", "0", "null"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "What is the default value of an uninitialized `char` variable in a class?",
        "options": ["'\\u0000'", "' '", "null", "0"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "How do you declare an integer variable named `count` in Java?",
        "options": ["int count;", "integer count;", "count int;", "var count: int;"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "How do you assign the value 25 to an integer variable `score`?",
        "options": ["score = 25;", "score == 25;", "25 = score;", "assign score 25;"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "Which data type is used for single characters in Java?",
        "options": ["char", "String", "Character", "byte"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "What will `System.out.println(\"Java\" + \"Rocks\");` output?",
        "options": ["JavaRocks", "Java Rocks", "Java + Rocks", "Error"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "Which method of the `String` class returns its length?",
        "options": ["length()", "size()", "getLength()", "count()"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "Which method of the `String` class returns the character at a specific index?",
        "options": ["charAt()", "getChar()", "characterAt()", "indexOfChar()"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "What is the index of the first character in a String in Java?",
        "options": ["0", "1", "-1", "Varies"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "Which keyword is used to make a decision based on a condition?",
        "options": ["if", "for", "while", "switch"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "What is the purpose of the `else` keyword in Java?",
        "options": ["To provide an alternative block of code if the `if` condition is false", "To end a loop", "To define a class", "To import a package"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "Which loop executes its body at least once?",
        "options": ["do-while", "while", "for", "enhanced for"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "What does the `continue` statement do in a loop?",
        "options": ["Skips the current iteration and proceeds to the next", "Exits the loop", "Restarts the loop", "Halts the program"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "How do you declare an array of 5 integers in Java?",
        "options": ["int[] arr = new int[5];", "int arr[5];", "int arr = new int[5];", "array<int> arr = new array<int>(5);"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "How do you access the first element of an array `data`?",
        "options": ["data[0]", "data[1]", "data.first()", "data.get(0)"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "What is the property to get the size of an array `myArray`?",
        "options": ["myArray.length", "myArray.size()", "myArray.getLength()", "myArray.count"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "What is a method in Java?",
        "options": ["A block of code that performs a specific task and can be called by name", "A variable that holds data", "A data type", "A reserved keyword"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "Which keyword indicates a method does not return any value?",
        "options": ["void", "null", "empty", "returnless"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "How do you call a method named `calculateSum` on an object `calculator`?",
        "options": ["calculator.calculateSum();", "calculateSum(calculator);", "call calculator.calculateSum();", "calculator->calculateSum();"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "What is the `package` statement used for in Java?",
        "options": ["To organize classes and interfaces into namespaces", "To include external libraries", "To define constants", "To handle runtime errors"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "Which `Scanner` method reads an integer from input?",
        "options": ["nextInt()", "readInt()", "getInteger()", "nextInteger()"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "Which `Scanner` method reads a full line of text from input?",
        "options": ["nextLine()", "readLine()", "getString()", "getTextLine()"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "Which logical operator represents AND in Java?",
        "options": ["&&", "||", "!", "&"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "Which logical operator represents OR in Java?",
        "options": ["||", "&&", "!", "|"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "What is the result of `true && false` in Java?",
        "options": ["false", "true", "0", "1"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "What is the result of `true || false` in Java?",
        "options": ["true", "false", "0", "1"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "What is the purpose of a constructor in Java?",
        "options": ["To initialize a newly created object", "To destroy an object", "To define a static method", "To declare an instance variable"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "If a class does not explicitly define a constructor, what does Java provide?",
        "options": ["A default no-argument constructor", "A compilation error", "A private constructor", "No constructor is provided"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "What is type casting in Java?",
        "options": ["Converting a value from one data type to another", "Creating a new instance of a class", "Defining a generic type", "Importing a package dynamically"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "Which of these is an example of implicit type casting (widening)?",
        "options": ["int i = 100; long l = i;", "double d = 10.5; int i = (int)d;", "String s = \"10\"; int i = Integer.parseInt(s);", "char c = (char)65;"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
        "question": "Which of these is an example of explicit type casting (narrowing)?",
        "options": ["double d = 50.75; int i = (int)d;", "int i = 50; long l = i;", "char c = 'X'; int i = c;", "byte b = 10; short s = b;"],
        "answer": 0,
        "category": "Java",
        "difficulty": 1
    },
    {
      "question": "What is the difference between `==` and `.equals()` when comparing strings in Java?",
      "options": ["`==` compares references (memory locations); `.equals()` compares the actual content of the strings", "`==` compares content; `.equals()` compares references", "Both compare content", "Both compare references"],
      "answer": 0,
      "category": "Java",
      "difficulty": 2
    },
    {
      "question": "Which collection class is used to store key-value pairs in Java?",
      "options": ["ArrayList", "HashMap", "LinkedList", "TreeSet"],
      "answer": 1,
      "category": "Java",
      "difficulty": 2
    },
    {
      "question": "What is the purpose of the `super` keyword in Java?",
      "options": ["To refer to the current object", "To call a superclass method or constructor", "To declare a static method", "To create a new object"],
      "answer": 1,
      "category": "Java",
      "difficulty": 2
    },
    {
      "question": "Which interface must a class implement to be stored in a TreeSet and maintain natural ordering?",
      "options": ["Serializable", "Comparable", "Cloneable", "Runnable"],
      "answer": 1,
      "category": "Java",
      "difficulty": 2
    },
    {
      "question": "What is the output of `System.out.println(5 + 3 + \"Hello\");` in Java?",
      "options": ["8Hello", "53Hello", "Hello8", "Hello53"],
      "answer": 0,
      "category": "Java",
      "difficulty": 2
    },
    {
      "question": "Which keyword is used to prevent a method from being overridden in a subclass?",
      "options": ["static", "final", "abstract", "private"],
      "answer": 1,
      "category": "Java",
      "difficulty": 2
    },
    {
      "question": "What is the purpose of the `this` keyword in Java?",
      "options": ["To call a superclass method", "To refer to the current instance of the object", "To declare a static variable", "To throw an exception"],
      "answer": 1,
      "category": "Java",
      "difficulty": 2
    },
    {
      "question": "Which exception is thrown when trying to access an array index that does not exist?",
      "options": ["NullPointerException", "ArrayIndexOutOfBoundsException", "ClassCastException", "IllegalArgumentException"],
      "answer": 1,
      "category": "Java",
      "difficulty": 2
    },
    {
      "question": "What is the main advantage of using an ArrayList over a standard array in Java?",
      "options": ["Fixed size", "Dynamic resizing capability", "Faster access for all operations", "Less memory usage per element"],
      "answer": 1,
      "category": "Java",
      "difficulty": 2
    },
    {
      "question": "Which access modifier allows a class member to be accessed only within the same package (unless inherited by a subclass in another package for protected)?",
      "options": ["public", "private", "protected", "default (package-private)"],
      "answer": 3,
      "category": "Java",
      "difficulty": 2
    },
    {
      "question": "What is the purpose of the `implements` keyword in Java?",
      "options": ["To inherit a class", "To define an interface", "To specify that a class will provide implementations for methods of an interface", "To create a thread"],
      "answer": 2,
      "category": "Java",
      "difficulty": 2
    },
    {
      "question": "Which method is called by the garbage collector on an object just before it is reclaimed (though its use is discouraged)?",
      "options": ["finalize()", "destroy()", "close()", "delete()"],
      "answer": 0,
      "category": "Java",
      "difficulty": 2
    },
    {
      "question": "What is the purpose of the `synchronized` keyword in Java?",
      "options": ["To make a method abstract", "To ensure thread-safe execution of a block of code or method by allowing only one thread at a time", "To prevent inheritance of a class", "To handle exceptions automatically"],
      "answer": 1,
      "category": "Java",
      "difficulty": 2
    },
    {
      "question": "Which collection class provides a sorted set of unique elements based on natural ordering or a Comparator?",
      "options": ["HashSet", "TreeSet", "LinkedList", "HashMap"],
      "answer": 1,
      "category": "Java",
      "difficulty": 2
    },
    {
      "question": "What is the output of `System.out.println(\"Hello\".substring(1, 4));` in Java?",
      "options": ["Hell", "ello", "ell", "lo"],
      "answer": 2,
      "category": "Java",
      "difficulty": 2
    },
    {
      "question": "Which keyword is used to create an abstract class in Java?",
      "options": ["abstract", "final", "static", "interface"],
      "answer": 0,
      "category": "Java",
      "difficulty": 2
    },
    {
      "question": "What is the purpose of the `throws` clause in a method signature?",
      "options": ["To catch exceptions within the method", "To declare checked exceptions that the method might throw and must be handled by the caller", "To create a new custom exception", "To ignore all exceptions thrown by the method"],
      "answer": 1,
      "category": "Java",
      "difficulty": 2
    },
    {
      "question": "Which class is the ultimate parent (superclass) of all classes in Java?",
      "options": ["Object", "Class", "System", "String"],
      "answer": 0,
      "category": "Java",
      "difficulty": 2
    },
    {
      "question": "What is the purpose of the `volatile` keyword in Java for a variable?",
      "options": ["To prevent method overriding", "To ensure visibility of changes to the variable across threads and prevent certain compiler reorderings", "To make a class abstract", "To handle exceptions related to volatile memory"],
      "answer": 1,
      "category": "Java",
      "difficulty": 2
    },
    {
      "question": "Which interface is commonly used to make a class's instances executable as a task by a thread in Java?",
      "options": ["Comparable", "Runnable", "Serializable", "Cloneable"],
      "answer": 1,
      "category": "Java",
      "difficulty": 2
    },
    {
        "question": "What is polymorphism in Java?",
        "options": ["The ability of an object to take on many forms, typically achieved through method overriding and interfaces", "A type of variable that can hold multiple values", "A loop construct for iterating over collections", "A mechanism for handling exceptions"],
        "answer": 0,
        "category": "Java",
        "difficulty": 2
    },
    {
        "question": "Method overriding is an example of which type of polymorphism?",
        "options": ["Runtime polymorphism (Dynamic dispatch)", "Compile-time polymorphism (Static dispatch)", "Ad-hoc polymorphism", "Parametric polymorphism"],
        "answer": 0,
        "category": "Java",
        "difficulty": 2
    },
    {
        "question": "Method overloading is an example of which type of polymorphism?",
        "options": ["Compile-time polymorphism (Static dispatch)", "Runtime polymorphism (Dynamic dispatch)", "True polymorphism", "Dynamic polymorphism"],
        "answer": 0,
        "category": "Java",
        "difficulty": 2
    },
    {
        "question": "Can a `static` method be overridden in Java?",
        "options": ["No, static methods are class-bound and can be hidden, not overridden", "Yes, if the subclass method is also static", "Yes, always", "Only if it's public"],
        "answer": 0,
        "category": "Java",
        "difficulty": 2
    },
    {
        "question": "Can an abstract class have a constructor?",
        "options": ["Yes, it can be called by subclass constructors using `super()`", "No, because abstract classes cannot be instantiated", "Yes, but it's private by default", "Only if it has no abstract methods"],
        "answer": 0,
        "category": "Java",
        "difficulty": 2
    },
    {
        "question": "Can an interface extend another interface in Java?",
        "options": ["Yes, using the `extends` keyword", "No, interfaces cannot be extended", "Yes, using the `implements` keyword", "Yes, using the `super` keyword"],
        "answer": 0,
        "category": "Java",
        "difficulty": 2
    },
    {
        "question": "A class can implement _____ interfaces and extend _____ class(es).",
        "options": ["multiple, one", "one, multiple", "multiple, multiple", "one, one"],
        "answer": 0,
        "category": "Java",
        "difficulty": 2
    },
    {
        "question": "What is a \"checked\" exception in Java?",
        "options": ["An exception that the compiler requires to be handled (either caught or declared with `throws`)", "An exception that only occurs at runtime and is not checked at compile time", "A critical system error", "A subclass of `RuntimeException`"],
        "answer": 0,
        "category": "Java",
        "difficulty": 2
    },
    {
        "question": "Which of these is a common example of a checked exception?",
        "options": ["IOException", "NullPointerException", "ArrayIndexOutOfBoundsException", "ArithmeticException"],
        "answer": 0,
        "category": "Java",
        "difficulty": 2
    },
    {
        "question": "Which of these is a common example of an unchecked (runtime) exception?",
        "options": ["NullPointerException", "IOException", "SQLException", "FileNotFoundException"],
        "answer": 0,
        "category": "Java",
        "difficulty": 2
    },
    {
        "question": "What is the purpose of the `throw` keyword in Java?",
        "options": ["To explicitly throw an instance of an exception", "To declare that a method might throw certain exceptions", "To catch an exception", "To define a new exception class"],
        "answer": 0,
        "category": "Java",
        "difficulty": 2
    },
    {
        "question": "When is `StringBuffer` generally preferred over `StringBuilder`?",
        "options": ["In multi-threaded environments where thread safety for string modifications is required", "In single-threaded environments for better performance", "When immutability of strings is paramount", "Never, `StringBuilder` is always better"],
        "answer": 0,
        "category": "Java",
        "difficulty": 2
    },
    {
        "question": "What is the primary characteristic of a `Set` collection in Java?",
        "options": ["It does not allow duplicate elements", "It always maintains the insertion order of elements", "It stores elements as key-value pairs", "It is always sorted based on natural ordering"],
        "answer": 0,
        "category": "Java",
        "difficulty": 2
    },
    {
        "question": "Which `List` implementation is generally faster for random access (get by index)?",
        "options": ["ArrayList", "LinkedList", "Both are equally fast", "Depends on the size of the list"],
        "answer": 0,
        "category": "Java",
        "difficulty": 2
    },
    {
        "question": "Which `List` implementation is generally more efficient for frequent insertions or deletions at the beginning or middle of the list?",
        "options": ["LinkedList", "ArrayList", "Both are equally efficient", "Depends on the JVM implementation"],
        "answer": 0,
        "category": "Java",
        "difficulty": 2
    },
    {
        "question": "What is the contract between `equals()` and `hashCode()` methods?",
        "options": ["If `obj1.equals(obj2)` is true, then `obj1.hashCode()` must be equal to `obj2.hashCode()`", "If `obj1.hashCode() == obj2.hashCode()`, then `obj1.equals(obj2)` must be true", "There is no strict contract between them", "`hashCode()` is used for sorting, `equals()` for equality checks in collections"],
        "answer": 0,
        "category": "Java",
        "difficulty": 2
    },
    {
        "question": "What is an `enum` in Java?",
        "options": ["A special data type that defines a set of named constants", "A type of iterative loop", "An event handling mechanism", "A specialized collection class for enumerations"],
        "answer": 0,
        "category": "Java",
        "difficulty": 2
    },
    {
        "question": "What is a generic class or interface in Java (e.g., `ArrayList<E>`)?",
        "options": ["A class or interface that is parameterized over types, allowing type safety at compile time", "A class that generates code automatically", "A very commonly used, non-specific class", "A class belonging to the `java.util.generic` package"],
        "answer": 0,
        "category": "Java",
        "difficulty": 2
    },
    {
        "question": "What does `file.exists()` do if `file` is a `java.io.File` object?",
        "options": ["Checks if the file or directory denoted by this abstract pathname exists", "Checks if the file contains any data", "Checks if the file is readable by the current user", "Creates the file if it does not already exist"],
        "answer": 0,
        "category": "Java",
        "difficulty": 2
    },
    {
        "question": "What is a `ClassCastException`?",
        "options": ["An exception thrown when an attempt is made to cast an object to a subclass of which it is not an instance", "An exception thrown when a class definition is not found", "An exception related to invalid arithmetic operations", "An exception thrown when trying to access a member of a null object reference"],
        "answer": 0,
        "category": "Java",
        "difficulty": 2
    },
    {
      "question": "What is the time complexity of retrieving an element from an ArrayList by index in Java?",
      "options": ["O(1)", "O(log n)", "O(n)", "O(n log n)"],
      "answer": 0,
      "category": "Java",
      "difficulty": 3
    },
    {
      "question": "Which design pattern ensures that a class has only one instance and provides a global point of access to it?",
      "options": ["Factory", "Singleton", "Observer", "Decorator"],
      "answer": 1,
      "category": "Java",
      "difficulty": 3
    },
    {
      "question": "What is the purpose of the `transient` keyword in Java?",
      "options": ["To make a variable thread-safe", "To exclude a variable from being serialized when an object is written to a stream", "To make a method abstract", "To prevent inheritance of a class containing the variable"],
      "answer": 1,
      "category": "Java",
      "difficulty": 3
    },
    {
      "question": "Which exception is thrown when a method is called on a null object reference?",
      "options": ["ArrayIndexOutOfBoundsException", "NullPointerException", "ClassCastException", "IllegalStateException"],
      "answer": 1,
      "category": "Java",
      "difficulty": 3
    },
    {
      "question": "What is the purpose of the `java.util.stream` package introduced in Java 8?",
      "options": ["To handle file I/O operations more efficiently", "To process collections of objects in a functional style using operations like filter, map, reduce", "To manage threads and concurrency primitives", "To perform database operations using a streamlined API"],
      "answer": 1,
      "category": "Java",
      "difficulty": 3
    },
    {
      "question": "Which method must be overridden when implementing the `Comparable` interface to define natural ordering?",
      "options": ["equals()", "compareTo()", "hashCode()", "toString()"],
      "answer": 1,
      "category": "Java",
      "difficulty": 3
    },
    {
      "question": "What is the purpose of the `default` method in an interface introduced in Java 8?",
      "options": ["To make the interface abstract by default", "To provide a default implementation for methods, allowing interfaces to evolve without breaking existing implementing classes", "To prevent implementation of certain methods in the interface", "To handle exceptions thrown by interface methods by default"],
      "answer": 1,
      "category": "Java",
      "difficulty": 3
    },
    {
      "question": "Which collection class provides constant-time performance (on average) for basic operations like add, remove, and contains, assuming a good hash function?",
      "options": ["ArrayList", "LinkedList", "HashSet", "TreeSet"],
      "answer": 2,
      "category": "Java",
      "difficulty": 3
    },
    {
      "question": "What is the significance of the `wait()`, `notify()`, and `notifyAll()` methods in Java?",
      "options": ["They handle exceptions in multi-threaded environments", "They are fundamental for inter-thread communication and coordination, allowing threads to pause and resume execution based on conditions", "They create new threads with different priority levels", "They serialize objects for inter-process communication"],
      "answer": 1,
      "category": "Java",
      "difficulty": 3
    },
    {
      "question": "Which annotation is commonly used to mark a method for unit testing in JUnit framework?",
      "options": ["@Test", "@RunWith", "@Before", "@After"],
      "answer": 0,
      "category": "Java",
      "difficulty": 3
    },
    {
      "question": "What is the purpose of the `java.lang.AutoCloseable` interface?",
      "options": ["To make a class thread-safe automatically", "To ensure resources (like files or network connections) are closed automatically when used in a try-with-resources block", "To enable objects of a class to be serialized", "To prevent inheritance of the class"],
      "answer": 1,
      "category": "Java",
      "difficulty": 3
    },
    {
      "question": "Which functional interface from `java.util.function` is used for operations that take no arguments and return a result of type T?",
      "options": ["Consumer<T>", "Supplier<T>", "Predicate<T>", "Function<T, R>"],
      "answer": 1,
      "category": "Java",
      "difficulty": 3
    },
    {
      "question": "What is the output of `Integer.valueOf(\"123\")` in Java?",
      "options": ["123 as a String", "An Integer object representing the value 123", "null", "A NumberFormatException"],
      "answer": 1,
      "category": "Java",
      "difficulty": 3
    },
    {
      "question": "Which class(es) can be used to read input from the console in Java?",
      "options": ["System.in directly", "Scanner", "BufferedReader (usually with an InputStreamReader wrapping System.in)", "Both Scanner and BufferedReader (with appropriate setup)"],
      "answer": 3,
      "category": "Java",
      "difficulty": 3
    },
    {
      "question": "What is the primary purpose of the `java.util.concurrent` package?",
      "options": ["To handle file I/O operations concurrently", "To provide a rich set of utility classes for concurrent programming, including thread pools, concurrent collections, and synchronization aids", "To manage collections in a concurrent-friendly manner by default", "To perform database operations concurrently"],
      "answer": 1,
      "category": "Java",
      "difficulty": 3
    },
    {
      "question": "Which method(s) can be used to sort a `List` in Java?",
      "options": ["`Collections.sort(List<T> list)`", "`list.sort(Comparator<? super E> c)` (Java 8+)", "`Arrays.sort(list.toArray())` then convert back", "Both `Collections.sort()` and `list.sort()`"],
      "answer": 3,
      "category": "Java",
      "difficulty": 3
    },
    {
      "question": "What is the significance of the `hashCode()` method in Java, especially in relation to hash-based collections like HashMap and HashSet?",
      "options": ["It generates a unique integer identifier for an object, used to determine the bucket where the object should be stored in hash-based collections", "It compares the content of two objects for equality", "It serializes objects into a hash format for storage", "It handles exceptions related to hash collisions"],
      "answer": 0,
      "category": "Java",
      "difficulty": 3
    },
    {
      "question": "Which keyword is used to define a variable that is shared across all instances of a class (a class variable)?",
      "options": ["final", "static", "volatile", "transient"],
      "answer": 1,
      "category": "Java",
      "difficulty": 3
    },
    {
      "question": "What is the purpose of the `java.nio` (New I/O) package in Java?",
      "options": ["To provide more flexible and efficient I/O operations, including support for non-blocking I/O, memory-mapped files, and character set handling", "To manage threads for network I/O operations", "To process collections using new I/O paradigms", "To perform database operations with a new, improved API"],
      "answer": 0,
      "category": "Java",
      "difficulty": 3
    },
    {
      "question": "Which interface is used to iterate over a collection in Java, providing methods like `hasNext()`, `next()`, and `remove()`?",
      "options": ["Iterable<T>", "Iterator<E>", "Collection<E>", "List<E>"],
      "answer": 1,
      "category": "Java",
      "difficulty": 3
    },
    {
        "question": "What is Reflection API in Java?",
        "options": ["An API for inspecting and manipulating classes, interfaces, fields, and methods at runtime", "An API for reflecting graphical user interfaces", "An API for network data reflection", "An API for self-modifying code"],
        "answer": 0,
        "category": "Java",
        "difficulty": 3
    },
    {
        "question": "Which class is the entry point for using Reflection in Java to get information about a class?",
        "options": ["java.lang.Class", "java.lang.reflect.Reflector", "java.lang.ObjectInfo", "java.lang.RuntimeClass"],
        "answer": 0,
        "category": "Java",
        "difficulty": 3
    },
    {
        "question": "What is a `Callable<V>` interface in Java concurrency?",
        "options": ["An interface similar to Runnable, but its `call()` method can return a result and throw a checked exception", "An interface for objects that can be called remotely", "An interface for callback methods", "An interface for making phone calls programmatically"],
        "answer": 0,
        "category": "Java",
        "difficulty": 3
    },
    {
        "question": "What does an `ExecutorService` in `java.util.concurrent` primarily manage?",
        "options": ["The execution of asynchronous tasks, typically using a pool of threads", "System resources like memory and CPU", "Network connections for executors", "Execution of external programs"],
        "answer": 0,
        "category": "Java",
        "difficulty": 3
    },
    {
        "question": "What is a `Future<V>` object in Java concurrency?",
        "options": ["Represents the result of an asynchronous computation; provides methods to check if the computation is complete, to wait for its completion, and to retrieve the result", "A promise to execute a task in the future", "A placeholder for a future version of a class", "A way to schedule tasks for future execution"],
        "answer": 0,
        "category": "Java",
        "difficulty": 3
    },
    {
        "question": "What is the primary difference between `java.util.HashMap` and `java.util.concurrent.ConcurrentHashMap`?",
        "options": ["`ConcurrentHashMap` is thread-safe and designed for high concurrency, while `HashMap` is not thread-safe.", "`ConcurrentHashMap` does not allow null keys or values.", "`HashMap` offers better performance in all scenarios.", "`ConcurrentHashMap` uses a single lock for all operations."],
        "answer": 0,
        "category": "Java",
        "difficulty": 3
    },
    {
        "question": "What is a lambda expression in Java 8?",
        "options": ["An anonymous function that can be used to implement methods of functional interfaces", "A new way to declare strings with embedded expressions", "A new type of loop for iterating collections", "A way to define inline classes"],
        "answer": 0,
        "category": "Java",
        "difficulty": 3
    },
    {
        "question": "Which functional interface from `java.util.function` represents an operation that accepts a single input argument and returns no result?",
        "options": ["Consumer<T>", "Supplier<T>", "Predicate<T>", "Function<T, R>"],
        "answer": 0,
        "category": "Java",
        "difficulty": 3
    },
    {
        "question": "Which functional interface from `java.util.function` represents a predicate (boolean-valued function) of one argument?",
        "options": ["Predicate<T>", "Supplier<T>", "Consumer<T>", "Function<T, R>"],
        "answer": 0,
        "category": "Java",
        "difficulty": 3
    },
    {
        "question": "Which functional interface from `java.util.function` represents a function that accepts one argument and produces a result?",
        "options": ["Function<T, R>", "Supplier<T>", "Consumer<T>", "Predicate<T>"],
        "answer": 0,
        "category": "Java",
        "difficulty": 3
    },
    {
        "question": "What is the purpose of the `flatMap` operation in Java Streams?",
        "options": ["To transform each element of a stream into a stream of other objects and then flatten these resulting streams into a single stream", "To filter elements based on a complex predicate", "To map each element to a single value and then sum them up", "To create a parallel stream from a sequential one"],
        "answer": 0,
        "category": "Java",
        "difficulty": 3
    },
    {
        "question": "What is the `reduce` operation in Java Streams primarily used for?",
        "options": ["To combine all elements of a stream into a single result (e.g., sum, max, min, concatenation)", "To reduce the number of elements in a stream based on a filter", "To convert a stream back into a collection", "To perform a side-effect on each element of the stream"],
        "answer": 0,
        "category": "Java",
        "difficulty": 3
    },
    {
        "question": "What is a `WeakReference` in Java (`java.lang.ref` package)?",
        "options": ["A reference object that does not prevent its referent from being garbage collected if it's the only reference to the object", "A reference that is weaker than a `SoftReference`", "A reference that always points to a `null` object", "A reference that cannot be changed after initialization"],
        "answer": 0,
        "category": "Java",
        "difficulty": 3
    },
    {
        "question": "What is the `java.util.Base64` class (Java 8+) used for?",
        "options": ["Encoding and decoding data using the Base64 encoding scheme", "Performing basic arithmetic operations on 64-bit numbers", "Managing collections with a base size of 64", "Creating 64-bit hash codes"],
        "answer": 0,
        "category": "Java",
        "difficulty": 3
    },
    {
        "question": "What is a `ThreadLocal` variable in Java?",
        "options": ["A variable that provides thread-local storage; each thread has its own, independently initialized copy of the variable", "A variable that is local to a specific thread group", "A variable that cannot be accessed by multiple threads", "A deprecated way of achieving thread safety"],
        "answer": 0,
        "category": "Java",
        "difficulty": 3
    },
    {
      "question": "What is the time complexity of retrieving a value from a HashMap in Java, assuming a good hash function and no excessive collisions (average case)?",
      "options": ["O(1)", "O(log n)", "O(n)", "O(n log n)"],
      "answer": 0,
      "category": "Java",
      "difficulty": 4
    },
    {
      "question": "Which design pattern is used to decouple an abstraction from its implementation so that the two can vary independently?",
      "options": ["Singleton", "Bridge", "Observer", "Factory"],
      "answer": 1,
      "category": "Java",
      "difficulty": 4
    },
    {
      "question": "What is the significance of the `CopyOnWriteArrayList` class in Java's `java.util.concurrent` package?",
      "options": ["It provides thread-safe iteration by creating a fresh copy of the underlying array for any modification operation (add, set, remove), ensuring iterators see a consistent snapshot.", "It sorts elements automatically upon insertion in a thread-safe manner.", "It prevents duplicate elements from being added in a concurrent environment.", "It handles exceptions thrown during concurrent write operations gracefully."],
      "answer": 0,
      "category": "Java",
      "difficulty": 4
    },
    {
      "question": "Which method is used to submit a task that returns a value (`Callable`) to an `ExecutorService` in Java?",
      "options": ["run()", "execute()", "submit()", "start()"],
      "answer": 2,
      "category": "Java",
      "difficulty": 4
    },
    {
      "question": "What is the purpose of the `java.util.Optional` class introduced in Java 8?",
      "options": ["To provide a type-level solution for representing optional values instead of null references, reducing `NullPointerExceptions`.", "To manage threads in an optional, configurable manner.", "To sort collections optionally based on different criteria.", "To perform file I/O operations optionally depending on file existence."],
      "answer": 0,
      "category": "Java",
      "difficulty": 4
    },
    {
      "question": "Which annotation(s) can be used to inject dependencies in the Spring Framework?",
      "options": ["@Inject (JSR-330)", "@Autowired (Spring specific)", "@Resource (JSR-250)", "All of the above"],
      "answer": 3,
      "category": "Java",
      "difficulty": 4
    },
    {
      "question": "What is the significance of the `ReentrantLock` class in `java.util.concurrent.locks`?",
      "options": ["It provides a more flexible and powerful locking mechanism than intrinsic `synchronized` blocks, offering features like fairness policies, interruptible lock acquisition, and timed lock acquisition.", "It handles exceptions thrown by re-entrant code automatically.", "It serializes objects for re-entrant method calls.", "It sorts collections in a re-entrant, thread-safe manner."],
      "answer": 0,
      "category": "Java",
      "difficulty": 4
    },
    {
      "question": "Which functional interface from `java.util.function` is used for operations that take an input argument of type T and return a boolean?",
      "options": ["Consumer<T>", "Supplier<T>", "Predicate<T>", "Function<T, R>"],
      "answer": 2,
      "category": "Java",
      "difficulty": 4
    },
    {
      "question": "What is the purpose of the `java.util.concurrent.atomic` package?",
      "options": ["To provide classes that support lock-free, thread-safe programming on single variables (e.g., AtomicInteger, AtomicLong, AtomicReference).", "To handle file I/O operations atomically.", "To manage collections of atomic elements.", "To perform database transactions atomically."],
      "answer": 0,
      "category": "Java",
      "difficulty": 4
    },
    {
      "question": "Which static method on the `Stream` interface is used to combine two streams sequentially into a single stream in Java 8?",
      "options": ["`Stream.merge(stream1, stream2)`", "`Stream.concat(stream1, stream2)`", "`Stream.join(stream1, stream2)`", "`Stream.union(stream1, stream2)`"],
      "answer": 1,
      "category": "Java",
      "difficulty": 4
    },
    {
      "question": "What is the significance of the `ForkJoinPool` class in Java's `java.util.concurrent` package?",
      "options": ["It is an `ExecutorService` specifically designed for executing `ForkJoinTask`s, which are suitable for problems that can be broken down into smaller, recursive subtasks (divide and conquer).", "It serializes objects using a fork-join mechanism for distributed systems.", "It sorts collections using a parallel fork-join algorithm.", "It manages file I/O operations by forking multiple read/write tasks."],
      "answer": 0,
      "category": "Java",
      "difficulty": 4
    },
    {
      "question": "Which annotation(s) can be used to mark a class as a Spring-managed component?",
      "options": ["@Component (generic stereotype)", "@Service (for service layer components)", "@Repository (for data access layer components)", "All of the above (and others like @Controller)"],
      "answer": 3,
      "category": "Java",
      "difficulty": 4
    },
    {
      "question": "What is the primary purpose of the `java.lang.invoke` package in Java?",
      "options": ["To provide low-level primitives for dynamic language support on the JVM, including method handles and invokedynamic.", "To handle file I/O invocation efficiently.", "To manage thread invocation and scheduling.", "To process collections using invoked functional interfaces."],
      "answer": 0,
      "category": "Java",
      "difficulty": 4
    },
    {
      "question": "Which class is predominantly used to handle date and time without time-zone information in the modern Java Date-Time API (Java 8+)?",
      "options": ["java.util.Date", "java.util.Calendar", "java.time.LocalDateTime", "java.sql.Timestamp"],
      "answer": 2,
      "category": "Java",
      "difficulty": 4
    },
    {
      "question": "What is the significance of the `CompletableFuture` class in Java 8+?",
      "options": ["It provides a powerful mechanism for asynchronous programming, allowing chaining of dependent operations, explicit completion, and handling of results or exceptions.", "It handles exceptions in a completely futuristic, predictive manner.", "It sorts collections asynchronously for better performance.", "It serializes objects for future retrieval in a distributed system."],
      "answer": 0,
      "category": "Java",
      "difficulty": 4
    },
    {
      "question": "Which method is typically used to create a deep copy of a complex, mutable object in Java if the `Cloneable` interface is not sufficient or not implemented?",
      "options": ["`Object.clone()` always performs a deep copy", "`System.arraycopy()` for objects", "Using a copy constructor or a dedicated copying utility/library", "Serialization and deserialization of the object"],
      "answer": 2, 
      "category": "Java",
      "difficulty": 4
    },
    {
      "question": "What is the purpose of the `java.util.ServiceLoader` class?",
      "options": ["To load implementations of a service provider interface (SPI) that are available on the classpath or module path, enabling extensible applications.", "To handle loading of large files efficiently.", "To manage the loading and unloading of threads.", "To sort collections based on service priority."],
      "answer": 0,
      "category": "Java",
      "difficulty": 4
    },
    {
      "question": "Which JUnit 5 annotation is used to configure a method to run before each test method in a test class?",
      "options": ["@Test", "@Before", "@BeforeEach", "@BeforeAll"],
      "answer": 2,
      "category": "Java",
      "difficulty": 4
    },
    {
      "question": "What is the significance of the `MethodHandle` class in `java.lang.invoke`?",
      "options": ["It provides a typed, directly executable reference to an underlying method, constructor, or field, offering a more efficient and safer alternative to reflection for some use cases.", "It handles exceptions thrown by methods in a generic way.", "It sorts collections of methods based on their signatures.", "It manages file I/O handles for method execution logs."],
      "answer": 0,
      "category": "Java",
      "difficulty": 4
    },
    {
      "question": "Which class(es) from popular libraries like Jackson or Gson are commonly used to serialize Java objects to JSON and deserialize JSON to Java objects?",
      "options": ["ObjectMapper (Jackson)", "Gson (Gson library)", "JsonParser (part of various libraries)", "All of the above are common examples from different libraries"],
      "answer": 3,
      "category": "Java",
      "difficulty": 4
    },
    {
        "question": "What is the Java Memory Model (JMM) primarily concerned with?",
        "options": ["Defining how threads interact through memory, specifying visibility and ordering guarantees for shared variable access", "The physical layout of memory in a computer running Java", "The garbage collection algorithms used by the JVM", "The maximum amount of memory a Java application can use"],
        "answer": 0,
        "category": "Java",
        "difficulty": 4
    },
    {
        "question": "What does the `invokedynamic` bytecode instruction, introduced in Java 7, enable?",
        "options": ["Efficient implementation of dynamically-typed languages on the JVM and optimization of lambda expressions", "Dynamic loading of classes at runtime", "Invoking methods with a variable number of arguments", "Calling native methods dynamically"],
        "answer": 0,
        "category": "Java",
        "difficulty": 4
    },
    {
        "question": "What is a `Phaser` in `java.util.concurrent`?",
        "options": ["A reusable synchronization barrier, similar to `CyclicBarrier` and `CountDownLatch` but more flexible, allowing a variable number of parties", "A tool for measuring the phase of concurrent tasks", "A component for managing different phases of a software project", "A class for handling phase-shifted signals in concurrent applications"],
        "answer": 0,
        "category": "Java",
        "difficulty": 4
    },
    {
        "question": "What is the primary benefit of using `java.nio.channels.Selector` for network programming?",
        "options": ["It allows a single thread to manage multiple non-blocking I/O channels, improving scalability for network servers", "It selects the fastest network interface for communication", "It provides a secure channel for data transmission", "It automatically balances load across multiple network channels"],
        "answer": 0,
        "category": "Java",
      "difficulty": 4
    },
    {
        "question": "What is the role of the `StackWalker` API introduced in Java 9?",
        "options": ["To provide an efficient way to traverse the call stack and access stack frame information, as an alternative to `Throwable.getStackTrace()`", "To manage memory stacks for threads", "To perform static analysis of code for stack overflows", "To walk through directory structures on the file system stack"],
        "answer": 0,
        "category": "Java",
        "difficulty": 4
    },
    {
        "question": "What is a \"PhantomReference\" in `java.lang.ref` primarily used for?",
        "options": ["To schedule pre-mortem cleanup actions after an object has been finalized and before its memory is reclaimed, typically used with a `ReferenceQueue`", "To create a reference that is invisible to the garbage collector", "To refer to objects that are about to be resurrected", "To represent a ghost or phantom object in memory"],
        "answer": 0,
        "category": "Java",
        "difficulty": 4
    },
    {
        "question": "What is the `VarHandle` API (Java 9+) in `java.lang.invoke` used for?",
        "options": ["To provide a typed reference to a variable (field or array element) with fine-grained control over memory access semantics (e.g., volatile, atomic operations)", "To handle variable type conversions dynamically", "To validate variable names against Java naming conventions", "To manage environment variables for a Java process"],
        "answer": 0,
        "category": "Java",
        "difficulty": 4
    },
    {
        "question": "In the context of Java Modules (JPMS, Java 9+), what does the `requires transitive` directive in a `module-info.java` file mean?",
        "options": ["Modules that depend on this module also gain readability to the specified transitively required module", "This module requires another module only for transitive dependencies", "The required module is optional and only loaded if transitivity is enabled", "The dependency is only required during compilation, not at runtime transitively"],
        "answer": 0,
        "category": "Java",
        "difficulty": 4
    },
    {
        "question": "Which Java Garbage Collector is designed for low-latency applications by aiming for pause times under 10 milliseconds (and often much lower)?",
        "options": ["ZGC (Z Garbage Collector)", "Serial GC", "Parallel GC (Throughput Collector)", "CMS (Concurrent Mark Sweep) GC"],
        "answer": 0,
        "category": "Java",
        "difficulty": 4
    },
    {
        "question": "What is the primary goal of the G1 (Garbage-First) Garbage Collector in Java?",
        "options": ["To balance throughput and latency by dividing the heap into regions and prioritizing collection of regions with the most garbage (garbage first)", "To minimize memory footprint above all else", "To be the simplest and most compatible GC", "To maximize CPU utilization during garbage collection"],
        "answer": 0,
        "category": "Java",
        "difficulty": 4
    }
]