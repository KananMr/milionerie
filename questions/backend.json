[
  {
    "question": "Which of the following is a common responsibility of a backend system?",
    "options": ["Rendering user interfaces", "Managing client-side JavaScript", "Business logic processing and data storage", "CSS styling"],
    "answer": 2,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is an API (Application Programming Interface) in the context of backend development?",
    "options": ["A user interface for applications", "A set of rules and protocols that allows different software components (e.g., frontend and backend) to communicate with each other", "A database schema", "A type of server hardware"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "REST (Representational State Transfer) is an architectural style often used for designing:",
    "options": ["Frontend user interfaces", "Networked applications, particularly web APIs, often using HTTP methods like GET, POST, PUT, DELETE", "Database schemas", "Operating system kernels"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Which HTTP method is typically used to request data from a specified resource in a REST API?",
    "options": ["POST", "PUT", "DELETE", "GET"],
    "answer": 3,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Which HTTP method is typically used to submit data to be processed to a specified resource, often resulting in the creation of a new resource?",
    "options": ["GET", "POST", "HEAD", "OPTIONS"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Which HTTP method is typically used to update an existing resource completely at a specified URI?",
    "options": ["GET", "POST", "PUT", "PATCH"],
    "answer": 2,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Which HTTP method is typically used to apply partial modifications to a resource?",
    "options": ["GET", "POST", "PUT", "PATCH"],
    "answer": 3,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Which HTTP method is typically used to delete a specified resource?",
    "options": ["REMOVE", "ERASE", "DELETE", "DROP"],
    "answer": 2,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "JSON (JavaScript Object Notation) is a common data format used in web APIs because it is:",
    "options": ["Binary and highly compressed", "Lightweight, human-readable, and easily parsed by machines", "Specific to JavaScript only", "Primarily used for styling data"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is a database?",
    "options": ["A type of web server", "An organized collection of structured information, or data, typically stored electronically in a computer system, managed by a Database Management System (DBMS)", "A frontend JavaScript library", "A network protocol"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "SQL (Structured Query Language) is used for:",
    "options": ["Styling web pages", "Defining frontend logic", "Managing and querying relational databases", "Creating network protocols"],
    "answer": 2,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Which SQL statement is used to retrieve data from a database?",
    "options": ["UPDATE", "INSERT", "DELETE", "SELECT"],
    "answer": 3,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Which SQL statement is used to add new data to a database table?",
    "options": ["ADD", "CREATE", "INSERT", "NEW"],
    "answer": 2,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Which SQL statement is used to modify existing data in a database table?",
    "options": ["CHANGE", "MODIFY", "UPDATE", "ALTER"],
    "answer": 2,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Which SQL statement is used to remove data from a database table?",
    "options": ["REMOVE", "ERASE", "DROP", "DELETE"],
    "answer": 3,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "A primary key in a relational database table is a column (or set of columns) that:",
    "options": ["Stores primary contact information", "Uniquely identifies each row in that table", "Is the first column defined in the table", "Can contain null values"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "A foreign key in a relational database table is a column (or set of columns) that:",
    "options": ["Links to a table in a foreign database", "Establishes a link between data in two tables by referring to the primary key in another table", "Stores data from foreign countries", "Is always encrypted"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "NoSQL databases are often characterized by:",
    "options": ["Strict adherence to the relational model and SQL", "Not primarily using SQL, often offering flexible schemas, and catering to different data models (e.g., document, key-value, graph, column-family)", "Being slower than SQL databases", "Only storing numerical data"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "MongoDB is an example of which type of NoSQL database?",
    "options": ["Key-value store", "Graph database", "Column-family store", "Document database"],
    "answer": 3,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Redis is often used as a:",
    "options": ["Relational database", "Document database", "In-memory data structure store, used as a database, cache, and message broker (often key-value)", "Graph database"],
    "answer": 2,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Authentication in a backend system refers to:",
    "options": ["Determining what resources a user can access", "The process of verifying the identity of a user or client (e.g., using username/password, tokens)", "Encrypting user data", "Logging user activity"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Authorization in a backend system refers to:",
    "options": ["Verifying a user's identity", "The process of determining whether an authenticated user or client has permission to access a specific resource or perform a particular action", "Creating user accounts", "Authoring API documentation"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "JWT (JSON Web Token) is often used for:",
    "options": ["Storing large JSON documents in a database", "Representing claims securely between two parties, commonly used for authentication and authorization in web APIs", "Encrypting entire web pages", "A JavaScript templating engine"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Hashing passwords before storing them is a security best practice because:",
    "options": ["It makes passwords shorter and easier to store", "It converts passwords into a one-way, fixed-length string that cannot be easily reversed, protecting the original password even if the database is compromised", "It encrypts passwords so they can be decrypted later by the system", "It compresses passwords to save storage space"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'salting' in the context of password hashing?",
    "options": ["Adding salt to the database server for flavor", "Adding a random piece of data (the salt) to each password before hashing it. This ensures that even if two users have the same password, their hashes will be different, mitigating rainbow table attacks.", "A technique for seasoning API responses", "Encrypting the salt value itself"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "Scalability in a backend system refers to its ability to:",
    "options": ["Handle an increasing amount of load (e.g., users, requests, data) efficiently, often by adding more resources (e.g., servers, CPU, memory)", "Scale down to very small deployments", "Be easily understood by developers", "Use a wide range of programming languages"],
    "answer": 0,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Vertical scaling (scaling up) involves:",
    "options": ["Adding more identical servers to a cluster", "Increasing the resources (e.g., CPU, RAM, storage) of an existing server", "Distributing load across multiple geographical regions", "Scaling the database schema vertically"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Horizontal scaling (scaling out) involves:",
    "options": ["Increasing the RAM of a single server", "Adding more servers to a pool of resources to distribute the load", "Using a more powerful CPU in an existing server", "Scaling the width of database tables"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Load balancing is a technique used to:",
    "options": ["Balance the electrical load on servers", "Distribute incoming network traffic or computational workloads across multiple backend servers or resources to improve performance, availability, and reliability", "Ensure all database tables have a balanced number of rows", "Balance the number of frontend and backend developers"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Caching in a backend system is used to:",
    "options": ["Encrypt frequently accessed data", "Store frequently accessed data in a faster, temporary storage location (e.g., memory) to reduce latency and load on primary data sources (like databases or external APIs)", "Archive old data", "Log all data access patterns"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "A CDN (Content Delivery Network) helps improve backend performance and user experience by:",
    "options": ["Delivering dynamic application logic from servers closer to the user", "Caching and serving static content (e.g., images, CSS, JavaScript) from geographically distributed edge servers, reducing latency for users and load on the origin server", "Encrypting content during delivery", "Managing database connections"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Microservices architecture is an approach where:",
    "options": ["A single, large monolithic application is built", "An application is structured as a collection of small, independent, and loosely coupled services, each responsible for a specific business capability and often deployed separately", "All services run on microcontrollers", "Services are very small in terms of lines of code only"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "A message queue (e.g., RabbitMQ, Kafka, SQS) is often used in backend systems to:",
    "options": ["Store user interface messages", "Enable asynchronous communication between different services or components by allowing senders to publish messages to a queue and receivers to consume them independently, decoupling services and improving resilience", "Queue database queries for batch processing", "Manage HTTP request queues directly"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Serverless computing (e.g., AWS Lambda, Azure Functions) is a cloud computing model where:",
    "options": ["You don't need any servers at all to run a backend", "The cloud provider dynamically manages the allocation and provisioning of servers. Developers write functions (code) that are executed in response to events, without managing the underlying infrastructure.", "All computation happens on the client-side", "Servers are managed by an AI"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Which of the following is a popular backend programming language?",
    "options": ["HTML", "CSS", "Python (with frameworks like Django/Flask), Node.js (JavaScript), Java (Spring), Ruby (Rails), Go, PHP (Laravel/Symfony)", "SQL"],
    "answer": 2,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Node.js allows developers to write backend applications using which language?",
    "options": ["Java", "Python", "Ruby", "JavaScript"],
    "answer": 3,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Django and Flask are popular web frameworks for which backend language?",
    "options": ["Java", "Ruby", "Python", "Go"],
    "answer": 2,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Spring (Boot) is a popular framework for building enterprise applications with which language?",
    "options": ["Python", "JavaScript (Node.js)", "Java", "PHP"],
    "answer": 2,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Ruby on Rails is a web application framework written in:",
    "options": ["Ruby", "Python", "Perl", "Java"],
    "answer": 0,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What does ORM (Object-Relational Mapper) like SQLAlchemy (Python) or Hibernate (Java) or Eloquent (PHP) do?",
    "options": ["Maps objects to network protocols", "Provides a way to interact with a relational database using object-oriented programming concepts, abstracting away direct SQL queries for common operations", "Optimizes relational database memory usage", "Manages object relationships in memory only"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'idempotence' in the context of API operations?",
    "options": ["The operation can only be performed by an identified user", "An operation is idempotent if making multiple identical requests has the same effect on the server's state as making a single request (e.g., a GET request to retrieve data, or a PUT request to update a resource to a specific state).", "The operation returns an identical response every time, regardless of input", "The operation is part of an identity management system"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "Statelessness in REST APIs means that:",
    "options": ["The server does not store any information about the client's state between requests. Each request from a client must contain all the information needed to understand and process the request.", "The API cannot handle any stateful operations", "The client does not maintain any state", "The server is always in a static, unchanging state"],
    "answer": 0,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'rate limiting' in the context of APIs?",
    "options": ["Limiting the data transfer rate of an API response", "A mechanism to control the number of requests a client can make to an API within a certain time period, to prevent abuse, ensure fair usage, and protect backend resources", "Rating the quality of API responses", "Limiting the number of developers who can access an API"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a common use for environment variables in backend applications?",
    "options": ["Storing user interface themes", "Configuring application settings that may vary between different environments (e.g., development, staging, production), such as database credentials, API keys, or feature flags, without hardcoding them", "Defining global variables for client-side scripts", "Storing the application's source code"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Containerization technologies like Docker are used in backend development to:",
    "options": ["Store backend data in containers", "Package an application and its dependencies into a standardized unit (a container) that can run consistently across different computing environments, simplifying deployment and scaling", "Create physical containers for servers", "Manage user interface containers"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Kubernetes (K8s) is an open-source system for:",
    "options": ["Managing relational databases", "Automating the deployment, scaling, and management of containerized applications", "Writing backend code in a specific language", "A type of network hardware"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "CI/CD (Continuous Integration / Continuous Delivery or Deployment) is a practice in software development that involves:",
    "options": ["Integrating code continuously without testing", "Frequently integrating code changes into a shared repository, and automating the build, test, and deployment processes to deliver software updates more rapidly and reliably", "Delivering software only once it's fully complete", "Continuously changing infrastructure configurations"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is logging in a backend application crucial for?",
    "options": ["Making the application run faster", "Recording events, errors, and other important information during the application's execution, which is essential for debugging, monitoring, auditing, and understanding system behavior", "Storing user passwords", "Generating user interface logs"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Monitoring in a backend system involves:",
    "options": ["Watching user screens", "Collecting and analyzing data about the system's performance, availability, and health (e.g., CPU usage, memory, response times, error rates) to detect issues, ensure reliability, and inform capacity planning", "Monitoring competitor websites", "Keeping track of software licenses"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is a common strategy for handling database schema migrations in a backend application?",
    "options": ["Manually updating the schema on the production database directly", "Using migration tools or scripts that allow version-controlled, incremental, and reversible changes to the database schema as the application evolves", "Deleting and recreating the database with each deployment", "Never changing the database schema after initial deployment"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "ACID properties (Atomicity, Consistency, Isolation, Durability) are important characteristics of:",
    "options": ["Stateless APIs", "Database transactions, ensuring reliability and data integrity", "Frontend caching mechanisms", "User authentication protocols"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "Atomicity in ACID means that:",
    "options": ["Transactions are very small", "A transaction is treated as a single, indivisible unit of work; either all its operations complete successfully, or none of them do (it's all or nothing)", "Data is stored at an atomic level", "Transactions are isolated from each other"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "Consistency in ACID means that:",
    "options": ["Data is always consistent across all users", "A transaction brings the database from one valid state to another, preserving database invariants and integrity constraints", "The database schema is consistent", "Users experience consistent performance"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "Isolation in ACID means that:",
    "options": ["The database server is isolated from the network", "Concurrent transactions execute in a way that their effects are isolated from each other, as if they were executed serially. This prevents interference between transactions.", "Each user session is isolated", "Data is stored in isolated files"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "Durability in ACID means that:",
    "options": ["The database software is durable and long-lasting", "Once a transaction has been committed, its changes are permanent and will survive any subsequent system failures (e.g., power outages, crashes)", "Data is stored in a very durable format", "The database can endure high loads"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is an N+1 query problem in the context of ORMs or database access?",
    "options": ["A query that retrieves N+1 rows", "A performance issue where fetching a list of parent entities results in N additional queries to fetch related child entities for each of the N parents, instead of fetching the related data more efficiently (e.g., with a join or a single query for all children).", "A query that takes N+1 seconds to execute", "A security vulnerability related to N+1 users"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "Database indexing is primarily used to:",
    "options": ["Encrypt database tables", "Improve the speed of data retrieval operations on a database table by creating a data structure (e.g., B-tree) that allows for faster lookups of rows based on the values in indexed columns", "Index the database documentation", "Count the number of rows in a table"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is a 'connection pool' for databases?",
    "options": ["A pool of database administrators", "A cache of database connections maintained by the application so that connections can be reused, avoiding the overhead of establishing a new connection for every database request", "A physical pool where database servers are kept cool", "A list of available database servers"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'sharding' in the context of databases?",
    "options": ["Encrypting database shards", "A type of database partitioning where data is horizontally split across multiple database servers (shards). Each shard holds a subset of the data, allowing for improved scalability and performance for very large datasets.", "A technique for shattering database tables into pieces", "Creating backups of database shards"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is 'replication' in the context of databases?",
    "options": ["Replicating database errors", "The process of copying and maintaining database objects (e.g., tables) in multiple locations to improve availability, fault tolerance, or read performance. Can involve master-slave or multi-master setups.", "Creating identical database schemas", "Repeating database queries for consistency"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "The CAP theorem (Consistency, Availability, Partition tolerance) states that a distributed data store can simultaneously provide at most two of these three guarantees. Which one is often sacrificed or relaxed in highly available and scalable systems?",
    "options": ["Availability", "Partition tolerance (this is usually a must-have for distributed systems)", "Strong Consistency (often relaxed in favor of eventual consistency)", "None, all three can be fully achieved"],
    "answer": 2,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is 'eventual consistency' in distributed systems?",
    "options": ["A model where data will eventually become corrupted", "A consistency model where, if no new updates are made to a given data item, all accesses to that item will eventually return the last updated value. There might be a period where different nodes return different (stale) values.", "A guarantee that data is always immediately consistent across all nodes", "A system that eventually becomes consistent after a reboot"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a common use for WebSockets in backend applications?",
    "options": ["Serving static HTML pages", "Enabling persistent, bidirectional, real-time communication between a client (e.g., browser) and a server over a single TCP connection, often used for chat applications, live updates, or online games", "Managing server-side file sockets", "Encrypting web traffic by default"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "Server-Sent Events (SSE) provide:",
    "options": ["Bidirectional communication like WebSockets", "A mechanism for a server to push real-time updates to a web client over a standard HTTP connection (unidirectional: server to client)", "A way for servers to send emails", "Events triggered by server hardware"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'idempotence' in HTTP methods important for client-side retries?",
    "options": ["It ensures the request is always successful on the first try", "If a client retries an idempotent request (e.g., due to a network timeout), it knows that making the same request multiple times will have the same effect as making it once, preventing unintended side effects.", "It makes the client identify itself with each retry", "It makes retries faster"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "A common strategy for versioning REST APIs is:",
    "options": ["Never versioning APIs", "Including the version number in the URL (e.g., /api/v1/users), using a custom HTTP header, or using content negotiation (Accept header)", "Only versioning the backend code, not the API itself", "Using dates in API calls"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is the purpose of an API Gateway in a microservices architecture?",
    "options": ["To bypass all microservices and connect directly to the database", "To act as a single entry point for all client requests, routing them to appropriate microservices and potentially handling cross-cutting concerns like authentication, rate limiting, logging, and response aggregation.", "A gateway for connecting to external third-party APIs only", "A physical hardware device that manages API traffic"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'dependency injection' (DI) as a design pattern in backend development?",
    "options": ["Injecting malicious dependencies into a system", "A technique where an object's dependencies (other objects it needs to function) are provided to it from an external source (e.g., a DI container or factory) rather than the object creating them itself. This promotes loose coupling and testability.", "A way to automatically resolve project dependencies from a package manager", "Injecting JavaScript dependencies into HTML"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'Inversion of Control' (IoC)?",
    "options": ["A principle where control flow of a program is inverted by an external entity", "A design principle where custom-written portions of a computer program receive the flow of control from a generic framework. Dependency Injection is one way to achieve IoC.", "A way to control user input by inverting it", "Inverting the order of database operations for performance"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is the 'Single Responsibility Principle' (SRP) in SOLID design principles?",
    "options": ["A class should have only one method", "A class or module should have only one reason to change, meaning it should have only one job or responsibility", "A function should only be responsible for one type of input", "A developer should only have one responsibility in a project"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'race condition' in concurrent programming?",
    "options": ["A condition where multiple threads race to complete a task first", "A situation where the behavior of a system depends on the unpredictable timing or interleaving of operations by multiple threads or processes accessing shared resources, leading to incorrect results if not properly synchronized.", "A condition used in racing game simulations", "A hardware condition where CPU cores race against each other"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'mutex' (mutual exclusion lock)?",
    "options": ["A mutable X-value", "A synchronization primitive that ensures only one thread can acquire the lock and access a particular shared resource or execute a critical section of code at any given time, preventing race conditions.", "A device for muting audio from multiple threads", "A counter for thread accesses"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'semaphore' as a synchronization primitive?",
    "options": ["A signal used in maritime communication", "A variable or abstract data type used to control access by multiple processes/threads to a common resource in a concurrent system. It maintains a counter representing the number of available resource units.", "A visual indicator of thread status", "A type of hardware lock"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'deadlock'?",
    "options": ["A lock that is permanently broken", "A situation in concurrent programming where two or more threads are blocked forever, each waiting for a resource held by another thread in the set.", "A security feature to lock down dead code", "A state where a program has no active threads"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'gRPC' (gRPC Remote Procedure Call)?",
    "options": ["A graphical RPC framework for UIs", "A modern, open-source, high-performance RPC framework developed by Google. It typically uses HTTP/2 for transport, Protocol Buffers as the interface description language and message format, and supports features like streaming and bi-directional communication.", "A simplified RPC for gaming consoles", "A secure version of the standard RPC protocol"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What are 'Protocol Buffers' (Protobuf)?",
    "options": ["Buffers for storing network protocol headers", "A language-neutral, platform-neutral, extensible mechanism for serializing structured data, developed by Google. It's often used with gRPC and for efficient data storage and interchange, typically smaller and faster than XML or JSON.", "A way to define buffer overflow protection schemes in protocols", "Buffers used by the CPU for protocol processing"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'OAuth 2.0' commonly used for?",
    "options": ["A protocol for authenticating users directly with username/password", "An authorization framework that enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner or by allowing the third-party application to obtain access on its own behalf.", "A two-factor authentication protocol", "A protocol for encrypting network traffic"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'OpenID Connect' (OIDC)?",
    "options": ["A protocol for opening network connections", "An identity layer built on top of OAuth 2.0. It allows clients to verify the identity of the end-user based on the authentication performed by an Authorization Server, as well as to obtain basic profile information about the end-user.", "A standard for open database connectivity", "A connect protocol for IoT devices"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is a 'reverse proxy'?",
    "options": ["A proxy server used by clients to access the internet anonymously", "A server that sits in front of one or more web servers (backend servers), intercepting requests from clients and forwarding them to the appropriate backend server. It can provide load balancing, SSL termination, caching, security, etc.", "A proxy that reverses the order of HTTP requests", "A proxy that only allows outgoing traffic from servers"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'SSL/TLS termination' at a load balancer or reverse proxy?",
    "options": ["Terminating all SSL/TLS connections to the server", "The process where the load balancer/reverse proxy handles the SSL/TLS encryption/decryption for incoming client connections, and then communicates with backend servers over an unencrypted (or separately encrypted) connection. This offloads SSL processing from backend servers.", "A security feature to terminate SSL/TLS sessions after a short period", "A way to forcibly end SSL/TLS handshakes"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'blue-green deployment'?",
    "options": ["Deploying applications with blue and green themes", "A deployment strategy where two identical production environments ('blue' and 'green') are maintained. New versions are deployed to the inactive environment (e.g., green), tested, and then traffic is switched from the old environment (blue) to the new one. Allows for quick rollback if issues occur.", "A way to deploy applications to different colored servers", "Deploying only the blue and green components of an application"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What are 'canary releases'?",
    "options": ["Releasing software only to canary birds for testing", "A deployment strategy where a new version of software is gradually rolled out to a small subset of users or servers before making it available to everyone. This allows for monitoring performance and detecting issues with limited impact.", "A type of bird used for testing server environments", "Releasing software with a 'canary' warning message"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'Infrastructure as Code' (IaC)?",
    "options": ["Writing infrastructure documentation in code format", "The process of managing and provisioning computer data centers (infrastructure) through machine-readable definition files (code), rather than physical hardware configuration or interactive configuration tools. Tools like Terraform, Ansible, Chef, Puppet are used.", "Embedding infrastructure details directly into application code", "A programming language specifically for infrastructure"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'idempotence' in the context of backend operations (e.g., message processing)?",
    "options": ["The operation is performed by an identified component", "An operation is idempotent if applying it multiple times has the same effect as applying it once. This is important for retry mechanisms in message queues or distributed systems to avoid unintended side effects from processing the same message multiple times.", "The operation always returns an identical identifier", "The operation is part of an identity management system"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'distributed transaction'?",
    "options": ["A transaction that is distributed among multiple users", "A transaction that involves operations on multiple, often physically separate, database servers or resource managers. Ensuring ACID properties across a distributed transaction is complex and typically involves protocols like Two-Phase Commit (2PC).", "A transaction that is logged in a distributed ledger", "A very large transaction that needs to be distributed over time"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is the 'Two-Phase Commit' (2PC) protocol used for?",
    "options": ["Committing code changes in two phases", "A distributed algorithm that coordinates all the participating processes in a distributed atomic transaction on whether to commit or abort (roll back) the transaction, ensuring all participants either commit or abort.", "A way to commit database changes in two separate steps", "A security protocol with two phases of authentication"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is 'event sourcing' as an architectural pattern?",
    "options": ["Sourcing events from user interfaces", "A pattern where all changes to application state are stored as a sequence of events. The current state of the application can be reconstructed by replaying these events. This provides a strong audit log and can enable temporal queries.", "A way to trigger events based on external sources", "A pattern for handling only event-driven architectures"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is 'CQRS' (Command Query Responsibility Segregation)?",
    "options": ["A query language for complex relational schemas", "An architectural pattern that separates read and update (write/command) operations for a data store. Read models can be optimized for queries, while command models handle updates and business logic.", "A security principle for segregating user responsibilities", "A way to segregate code into command-line and query-based modules"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is a 'Saga' pattern in distributed systems, often used with microservices?",
    "options": ["A long story about a distributed system failure", "A way to manage data consistency across multiple microservices in a distributed transaction scenario without using traditional two-phase commit. It involves a sequence of local transactions, where each local transaction updates data within a single service and publishes an event or message that triggers the next local transaction in the saga. Compensating transactions are used to roll back if a step fails.", "A pattern for logging sagas of user activity", "A specific type of message queue for sagas"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is 'observability' in the context of backend systems (often referring to logs, metrics, and traces)?",
    "options": ["The ability of users to observe the system's internal workings", "The ability to understand the internal state or condition of a complex system based on the external outputs it generates (e.g., logs for events, metrics for performance/health, distributed traces for request flows). This helps in debugging, monitoring, and improving systems.", "Making the system's source code observable to everyone", "A security feature to observe unauthorized access"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What are 'distributed traces' used for in microservice architectures?",
    "options": ["Tracing physical network paths", "Tracking a single request as it flows through multiple microservices, by assigning a unique trace ID and propagating context. This helps in understanding request latency, identifying bottlenecks, and debugging issues in distributed systems.", "Creating traces of database transactions", "Security traces for user activity"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'service mesh' (e.g., Istio, Linkerd)?",
    "options": ["A physical mesh network for services", "A dedicated infrastructure layer for handling service-to-service communication in a microservices architecture. It provides features like traffic management, security, observability, and reliability often through a set of network proxies (sidecars) deployed alongside each service.", "A tool for designing service APIs", "A mesh topology for database servers"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is 'idempotency key' often used for in APIs that handle financial transactions or critical operations?",
    "options": ["A key that identifies an idempotent user", "A unique key provided by the client with a request, allowing the server to detect and safely handle retried requests (e.g., due to network issues) for the same operation without processing it multiple times if the original request was already successfully processed.", "A cryptographic key for idempotent encryption", "A key for locking idempotent resources"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is the 'Twelve-Factor App' methodology?",
    "options": ["A methodology for apps with exactly twelve features", "A methodology for building software-as-a-service applications with principles like codebase (one codebase tracked in revision control, many deploys), dependencies (explicitly declare and isolate), config (store in the environment), backing services (treat as attached resources), etc.", "A 12-step program for app developers", "A set of UI design principles for twelve-factor authentication"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is a 'circuit breaker' pattern in distributed systems?",
    "options": ["A physical circuit breaker for servers", "A design pattern used to detect failures and prevent a recurring failure from constantly bombarding a failing service. After a certain number of failures, the circuit breaker 'trips' (opens) and subsequent calls to the service are immediately failed or redirected, without attempting to contact the failing service. After a timeout, it may allow a limited number of test requests (half-open state).", "A pattern for breaking infinite loops in circuits", "A security pattern to break into circuits"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is 'chaos engineering'?",
    "options": ["Intentionally creating chaos in the development team", "The discipline of experimenting on a distributed system in production in order to build confidence in the system's capability to withstand turbulent and unexpected conditions, by proactively injecting failures (e.g., shutting down servers, introducing latency).", "A way to engineer chaotic user interfaces", "A tool for simulating chaotic network weather"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is 'GraphQL'?",
    "options": ["A graph database query language", "A query language for APIs and a server-side runtime for executing those queries by using a type system you define for your data. It allows clients to request exactly the data they need, in a single request, potentially from multiple resources.", "A graphical tool for designing SQL queries", "A language for creating graph-based user interfaces"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a common benefit of using GraphQL over traditional REST APIs for some use cases?",
    "options": ["GraphQL is always faster than REST", "It helps prevent over-fetching (requesting more data than needed) and under-fetching (needing to make multiple requests to get all related data) by allowing clients to specify exactly what data they need.", "GraphQL uses UDP for better performance", "GraphQL has built-in database integration"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'resolver' in GraphQL?",
    "options": ["A tool for resolving DNS names in GraphQL", "A function on the GraphQL server that is responsible for fetching the data for a specific field in a query. Each field in a GraphQL schema is backed by a resolver.", "A way to resolve conflicts between GraphQL queries", "A client-side component for resolving GraphQL responses"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'data consistency' in a database system?",
    "options": ["The data is always stored in a consistent file format", "Ensuring that any transaction brings the database from one valid state to another, maintaining all defined rules, constraints, and triggers. Different consistency models exist for distributed databases (e.g., strong, eventual).", "The database schema is consistent across all tables", "Users experience consistent query performance"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'database normalization'?",
    "options": ["Making a database behave normally", "The process of organizing the columns and tables of a relational database to minimize data redundancy and improve data integrity. It involves dividing larger tables into smaller, well-structured tables and defining relationships between them (e.g., 1NF, 2NF, 3NF, BCNF).", "Setting database performance to normal levels", "Encrypting database tables for normal access"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'denormalization' in database design?",
    "options": ["Making a database behave abnormally", "The process of intentionally adding redundant data to one or more tables, or combining tables, to improve query performance by reducing the need for complex joins, often at the cost of increased storage and potential data update anomalies. It's a trade-off typically made for read-heavy workloads.", "Removing all normalization rules from a database", "Decrypting normalized database tables"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'connection pooling'?",
    "options": ["A social gathering for database connections", "A cache of database connections maintained so that the connections can be reused when future requests to the database are required. This avoids the overhead of establishing a new connection for each request.", "A way to pool network bandwidth for database access", "A security feature to pool connections from trusted sources only"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'object pooling' in software development?",
    "options": ["A pool of software developers working on objects", "A design pattern where a set of initialized objects are kept ready to use, rather than allocating and destroying them on demand. This can improve performance when object creation is expensive and objects are frequently needed and discarded.", "A way to store objects in a swimming pool for cooling", "A method for managing UI objects in a pool"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'Test-Driven Development' (TDD)?",
    "options": ["Developing software by testing it extensively after it's written", "A software development process where developers write automated tests for a new feature or functionality *before* writing the actual code to implement it. The process typically follows a short cycle: write a failing test, write the minimal code to pass the test, then refactor.", "Driving tests with user input", "A methodology where tests are driven by project managers"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'Behavior-Driven Development' (BDD)?",
    "options": ["Developing software based on observed user behavior only", "A software development process that encourages collaboration between developers, QA, and non-technical participants by defining software behavior in a natural language format (e.g., using Gherkin syntax: Given-When-Then). These specifications can then be automated as tests.", "A way to drive development by analyzing application logs", "A methodology for predicting future software behavior"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'technical debt' in software development?",
    "options": ["The financial debt incurred by a software project", "A concept representing the implied cost of rework caused by choosing an easy (limited) solution now instead of using a better approach that would take longer. It can accumulate over time if not addressed, making future development slower and more difficult.", "Debt related to purchasing technical equipment", "A formal record of all technical issues in a project"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'refactoring' code?",
    "options": ["Deleting and rewriting code from scratch", "The process of restructuring existing computer code—changing the factoring—without changing its external behavior. Refactoring improves nonfunctional attributes of the software, such as readability, maintainability, and performance.", "Adding new features to existing code", "Commenting out old code"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'Big O notation' (e.g., O(n), O(log n), O(n²)) used for in computer science?",
    "options": ["A notation for very large numbers", "To describe the performance or complexity (e.g., time or space) of an algorithm in terms of how it responds to changes in the size of the input data, focusing on the asymptotic behavior (as input size grows large).", "A way to denote object-oriented programming concepts", "A musical notation for algorithms"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "An algorithm with O(1) time complexity means its execution time is:",
    "options": ["Proportional to the input size", "Constant, regardless of the input size", "Logarithmic with respect to the input size", "Quadratic with respect to the input size"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "An algorithm with O(n) time complexity means its execution time typically:",
    "options": ["Is constant", "Grows linearly with the size of the input (n)", "Grows quadratically with the size of the input", "Grows logarithmically with the size of the input"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "An algorithm with O(log n) time complexity is generally considered:",
    "options": ["Less efficient than O(n)", "More efficient than O(n) for large n, as its execution time grows very slowly with input size (e.g., binary search)", "Equivalent to O(n)", "Less efficient than O(n²)"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'hash table' (or hash map) data structure?",
    "options": ["A table for storing encrypted hash values", "A data structure that implements an associative array abstract data type, a structure that can map keys to values. It uses a hash function to compute an index (hash code) into an array of buckets or slots, from which the desired value can be found. Provides average O(1) time complexity for lookups, insertions, and deletions.", "A table that is difficult to understand ('hashed')", "A table for storing cryptographic hashes of files"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is a 'collision' in a hash table?",
    "options": ["A physical collision of server hardware", "When two different keys hash to the same index in the hash table. Collision resolution strategies (e.g., chaining, open addressing) are needed to handle this.", "An error in the hashing algorithm", "A collision between user sessions"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'chaining' as a hash collision resolution technique?",
    "options": ["Linking multiple hash tables together", "Each bucket in the hash table stores a linked list (or other data structure) of all key-value pairs that hash to that bucket. When a collision occurs, the new pair is added to the list in that bucket.", "Creating chains of hash values", "Using a chain of servers to resolve hashes"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'open addressing' (e.g., linear probing, quadratic probing) as a hash collision resolution technique?",
    "options": ["Addressing memory locations that are open and unused", "When a collision occurs, the algorithm probes for the next available empty slot in the hash table itself (rather than using an external data structure like a linked list) according to a specific probing sequence.", "Making all hash table addresses publicly accessible", "Using an open network port for hash resolution"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is a 'binary search tree' (BST)?",
    "options": ["A tree structure where each node can have at most two children, and for each node, all values in its left subtree are less than its own value, and all values in its right subtree are greater. Provides average O(log n) for search, insert, delete if balanced.", "A tree where all data is stored in binary format", "A tree with exactly two levels", "A tree used for searching binary files"],
    "answer": 0,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is a 'balanced binary search tree' (e.g., AVL tree, Red-Black tree)?",
    "options": ["A BST where the number of left children equals the number of right children at every node", "A BST that automatically maintains a balanced structure (e.g., height difference between left and right subtrees is limited) during insertions and deletions, ensuring worst-case O(log n) performance for operations.", "A BST that is perfectly symmetrical", "A BST that stores data in a balanced way across multiple disks"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'middleware' in the context of web frameworks (e.g., Express.js, Django middleware)?",
    "options": ["Software that sits between the operating system and applications", "Software components or functions that are chained together to process requests and responses in a web application. Each middleware component can perform specific tasks (e.g., logging, authentication, parsing request bodies, error handling) before passing control to the next component or the main request handler.", "Hardware in the middle of a network", "Software for managing medium-sized businesses"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'Content Security Policy' (CSP)?",
    "options": ["A policy for securing physical content in a data center", "An added layer of security that helps to detect and mitigate certain types of attacks, including Cross-Site Scripting (XSS) and data injection attacks. It's a set of directives (sent via HTTP header) that tell the browser which sources of content (scripts, styles, images, etc.) are allowed to be loaded.", "A policy for managing user-generated content", "A way to encrypt all website content"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'Cross-Origin Resource Sharing' (CORS) primarily used to enable?",
    "options": ["Sharing resources between users of the same origin", "Allowing a web application running at one origin (domain, protocol, port) to make requests for selected resources from a server at a different origin, which is normally restricted by the Same-Origin Policy", "Sharing CPU resources across different servers", "Encrypting resources shared across origins"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What are 'HTTP headers'?",
    "options": ["The main content of an HTTP message", "Key-value pairs of metadata transmitted in an HTTP request or response, providing information about the message, the sender, the receiver, or how the message should be handled (e.g., `Content-Type`, `Authorization`, `Cache-Control`).", "Headers for HTML documents only", "Physical headers attached to network packets"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "The `Content-Type` HTTP header indicates:",
    "options": ["The type of content the client is requesting", "The media type (MIME type) of the resource in the message body (e.g., `application/json`, `text/html`, `image/png`)", "The security content of the message", "The length of the content"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "The `Authorization` HTTP header is often used to:",
    "options": ["Request authorization from the server", "Carry credentials (e.g., a token like Bearer token) for authenticating the client to the server", "Specify the authorized user for the resource", "Grant authorization to other clients"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "The `Cache-Control` HTTP header is used to:",
    "options": ["Control access to the server's cache", "Specify caching directives for browsers and proxy caches (e.g., `no-cache`, `max-age`, `public`, `private`)", "Clear the browser's cache", "Define the size of the cache"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is an 'ETag' (Entity Tag) HTTP header used for?",
    "options": ["Tagging entities in a database", "An identifier for a specific version of a resource. It allows caches to be more efficient and saves bandwidth, as a web server does not need to send a full response if the content has not changed (used with `If-None-Match` header).", "A tag for identifying electronic devices", "Encrypting entity data"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'WebAssembly' (Wasm) and how can it relate to backend systems?",
    "options": ["An assembly language for web browsers only", "A binary instruction format that can be executed in web browsers and increasingly on servers (e.g., via Node.js or standalone Wasm runtimes). It allows code written in languages like C++, Rust, Go to run with near-native performance, potentially for CPU-intensive backend tasks or extending backend platforms.", "A tool for assembling web components", "A specification for web server hardware"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is 'Server Name Indication' (SNI) in TLS?",
    "options": ["A way for the server to indicate its name to the client", "An extension to the TLS protocol by which a client indicates which hostname it is attempting to connect to at the start of the handshaking process. This allows a server to present multiple certificates on the same IP address and port number, and therefore allows multiple secure (HTTPS) websites to be served off the same IP address without requiring all those sites to use the same certificate.", "A method for naming TLS sessions", "An indicator of the server's TLS version"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is a 'dead letter queue' (DLQ) in message queuing systems?",
    "options": ["A queue for messages that are no longer valid", "A queue where messages that cannot be processed successfully by a consumer (e.g., due to repeated errors, or if they are malformed) are sent, to be analyzed or handled separately, instead of blocking the main queue or being lost.", "A queue that is currently inactive or 'dead'", "A queue for undeliverable physical mail that has been digitized"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'backpressure' in stream processing or message queuing systems?",
    "options": ["Pressure applied to the back of a server rack", "A mechanism where a downstream component or consumer can signal to an upstream component or producer to slow down or stop sending data if the downstream component is overwhelmed or cannot process data fast enough. This helps prevent buffer overflows and system overload.", "The physical pressure inside a message queue", "A way to reverse the flow of data under pressure"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is 'ACID vs BASE' in the context of database properties?",
    "options": ["Two different types of database software", "ACID (Atomicity, Consistency, Isolation, Durability) represents properties typically guaranteed by traditional relational databases for transactions. BASE (Basically Available, Soft state, Eventual consistency) represents properties often found in NoSQL or distributed databases that prioritize availability and partition tolerance, sometimes at the cost of strong consistency.", "Acidic vs Basic database solutions", "Two different database query languages"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is 'polyglot persistence'?",
    "options": ["Storing data in multiple languages", "The practice of using multiple different database technologies (e.g., relational, NoSQL document store, graph database, key-value store) within a single application or system, choosing the best data store for each specific type of data or workload, rather than a one-size-fits-all approach.", "A database that supports multiple query languages", "Persisting data in a way that it can be read by many different programs"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is a 'data lake'?",
    "options": ["A lake where data is physically stored underwater", "A centralized repository that allows you to store all your structured and unstructured data at any scale. Data can be stored as-is, without having to first structure the data, and run different types of analytics—from dashboards and visualizations to big data processing, real-time analytics, and machine learning.", "A small, temporary data store (like a puddle)", "A specific type of SQL database for lakes"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'data warehouse'?",
    "options": ["A warehouse for storing physical data tapes", "A system used for reporting and data analysis, considered a core component of business intelligence. Data warehouses are central repositories of integrated data from one or more disparate sources, typically structured and optimized for querying and analysis rather than transactional processing.", "A software for managing warehouse inventory data", "A type of NoSQL database for large datasets"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'ETL' in the context of data warehousing and business intelligence?",
    "options": ["Extra Terrestrial Language", "Extract, Transform, Load - a process that involves extracting data from source systems, transforming it into a format suitable for analysis, and loading it into a data warehouse or other target system.", "Electronic Transaction Logging", "Easy To Learn (a type of programming language)"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'MapReduce'?",
    "options": ["A tool for creating maps and reducing their size", "A programming model and an associated implementation for processing and generating large data sets with a parallel, distributed algorithm on a cluster. It consists of a 'Map' step (processes key/value pairs to generate intermediate key/value pairs) and a 'Reduce' step (merges all intermediate values associated with the same intermediate key).", "A way to reduce the number of maps in a GIS system", "A specific type of database query"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is Apache Kafka often used for?",
    "options": ["A relational database management system", "A distributed event streaming platform capable of handling high-throughput, real-time data feeds. It's often used for building real-time data pipelines, streaming analytics, and event-driven architectures.", "A web server software", "A file storage system"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'idempotence' in the context of an API endpoint?",
    "options": ["The endpoint can only be accessed once", "Calling the endpoint multiple times with the same parameters has the same effect as calling it once. For example, a DELETE request for a specific resource is idempotent.", "The endpoint returns the same data for all users", "The endpoint identifies users uniquely"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'rolling update' deployment strategy?",
    "options": ["Updating servers by physically rolling them into place", "A strategy where a new version of an application is gradually deployed by updating a subset of instances (servers) at a time, while the remaining instances continue to run the old version. Once the updated instances are verified, more instances are updated, until all are running the new version. This minimizes downtime.", "A way to update software by rolling back to a previous version", "Updating only the parts of the application that have 'rolled over' a certain age"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'feature flag' (or feature toggle)?",
    "options": ["A flag indicating a feature is fully complete", "A technique in software development that allows turning specific features of an application on or off at runtime, without deploying new code. This enables practices like A/B testing, canary releases, and decoupling deployment from release.", "A physical flag on a server indicating its features", "A flag used in the UI to highlight new features"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'throttling' in the context of API request handling?",
    "options": ["Slowing down the API server intentionally for all users", "A process of controlling the usage of an API by limiting the number of requests a client can make within a specific time window. If the limit is exceeded, further requests might be delayed or rejected. This is similar to rate limiting but can imply slowing down rather than outright rejection.", "A way to reduce CPU throttle on the server", "A mechanism to prioritize API requests"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'OpenAPI Specification' (formerly Swagger Specification)?",
    "options": ["A specification for open-source APIs only", "A standard, language-agnostic interface description for RESTful APIs, which allows both humans and computers to discover and understand the capabilities of a service without access to source code, documentation, or through network traffic inspection. It can be used to generate documentation, client SDKs, and server stubs.", "An API for accessing open government data", "A specification for API security protocols"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'Webhook'?",
    "options": ["A hook for hanging web servers", "A user-defined HTTP callback (or HTTP POST) that is triggered by a specific event in a source application and sends data to a destination application. It's a way for one application to provide real-time information to another application.", "A type of fishing hook used for web data", "A security hook to monitor web traffic"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'Long Polling'?",
    "options": ["Polling a server at very long intervals", "A technique where the client makes an HTTP request to the server, and the server holds the request open until new data is available or a timeout occurs. Once data is available (or timeout), the server sends a response, and the client immediately makes a new request. This simulates a persistent connection for real-time updates, reducing latency compared to traditional polling.", "A way to make HTTP requests last longer", "Polling data from a long list of servers"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'Data Streaming' in backend systems?",
    "options": ["Streaming video data only", "The continuous processing of data as it is generated or received, rather than processing it in batches. This is common in real-time analytics, IoT applications, and event-driven architectures.", "A way to stream database backups", "Compressing data before sending it over a stream"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'Content Management System' (CMS) like WordPress or Drupal?",
    "options": ["A system for managing network content filters", "A software application that allows users to create, manage, and modify digital content (e.g., text, images, videos) on a website without requiring specialized technical knowledge.", "A database for storing website content", "A system for managing software licenses"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What does 'Backend as a Service' (BaaS) like Firebase or Parse (historical) provide?",
    "options": ["Only backend programming languages", "A cloud service model that provides backend functionalities (e.g., data storage, user authentication, push notifications, hosting) through APIs and SDKs, allowing frontend developers to build applications without managing backend infrastructure or writing extensive server-side code.", "A service for backing up backend code", "A physical server dedicated to backend operations"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'CSRF' (Cross-Site Request Forgery)?",
    "options": ["Forging requests between different CSS files", "An attack that tricks a victim's web browser into making an unintended, malicious request to a web application where the victim is already authenticated, by using the victim's existing session credentials.", "A way to forge SSL certificates", "A method for requesting resources from multiple sites simultaneously"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a common mitigation for CSRF attacks?",
    "options": ["Using HTTPS for all requests", "Implementing anti-CSRF tokens (synchronizer tokens): unique, unpredictable tokens that are embedded in forms or request headers and validated by the server for state-changing requests.", "Disabling all browser cookies", "Blocking requests from unknown IP addresses"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'XSS' (Cross-Site Scripting)?",
    "options": ["A scripting language for cross-platform development", "A type of security vulnerability where malicious scripts are injected into otherwise benign and trusted web sites, and then executed in the victim's browser. Can be stored XSS, reflected XSS, or DOM-based XSS.", "A way to share scripts across different websites securely", "A tool for testing website scripts"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "A common way to prevent XSS vulnerabilities is to:",
    "options": ["Encode all user input as Base64", "Properly sanitize or escape user-supplied data before rendering it in HTML or executing it in a JavaScript context on the client-side. Using Content Security Policy (CSP) can also help.", "Disable JavaScript in the browser", "Store all user input in a separate, secure database"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'SQL Injection'?",
    "options": ["Injecting more SQL servers into a cluster", "A code injection technique where malicious SQL statements are inserted into an input field (e.g., in a web form) for execution by the backend database, potentially allowing an attacker to view, modify, or delete data, or gain administrative control.", "A tool for optimizing SQL queries by injecting hints", "A type of database that uses injection molding for its hardware"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "Using 'prepared statements' (or parameterized queries) is a primary defense against:",
    "options": ["Cross-Site Scripting (XSS)", "Cross-Site Request Forgery (CSRF)", "Denial-of-Service (DoS) attacks", "SQL Injection"],
    "answer": 3,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'cryptographic hashing' (e.g., SHA-256, bcrypt)?",
    "options": ["Encrypting data using a secret key", "A process that takes an input (or 'message') and returns a fixed-size string of bytes, the hash value. Good cryptographic hash functions are one-way (hard to reverse), deterministic, and produce significantly different hashes for small input changes. Used for password storage, data integrity checks, etc.", "A way to hide data in images", "A method for generating random cryptographic keys"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'symmetric encryption'?",
    "options": ["Encryption where the key is symmetrical in shape", "A type of encryption where the same key is used for both encryption and decryption (e.g., AES, DES).", "Encryption that is symmetrical across different systems", "A very simple form of encryption that is easy to break"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'asymmetric encryption' (or public-key cryptography)?",
    "options": ["Encryption that is not symmetrical and therefore weak", "A type of encryption that uses a pair of keys: a public key (for encryption) and a private key (for decryption). Data encrypted with the public key can only be decrypted with the corresponding private key (e.g., RSA, ECC).", "Encryption where keys are of different lengths", "Encryption used only for asynchronous communication"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'TLS/SSL' (Transport Layer Security / Secure Sockets Layer)?",
    "options": ["A protocol for securing physical transport layers", "Cryptographic protocols designed to provide secure communication over a computer network. They are widely used for securing web traffic (HTTPS), email, VPNs, etc., providing confidentiality (encryption), integrity, and authentication.", "A way to manage secure software licenses", "A tool for scanning network layers for security vulnerabilities"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is a 'Digital Certificate' (e.g., an SSL/TLS certificate)?",
    "options": ["A certificate confirming a developer's digital skills", "An electronic document that uses a digital signature to bind a public key with an identity (e.g., a person, organization, or server), issued by a Certificate Authority (CA). Used to verify the authenticity of the public key owner.", "A license for using digital software", "A certificate for completing a course on digital security"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'two-factor authentication' (2FA) or 'multi-factor authentication' (MFA)?",
    "options": ["Authenticating twice with the same password", "A security process in which users provide two or more different authentication factors to verify themselves, such as something they know (password), something they have (security token, phone), or something they are (biometrics).", "Using two different passwords for the same account", "Authenticating with two different devices simultaneously"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'role-based access control' (RBAC)?",
    "options": ["Controlling access based on the user's role in a play", "A method of restricting system access to authorized users based on their roles (e.g., administrator, editor, viewer) within an organization. Permissions are assigned to roles, and users are assigned to roles.", "Access control based on the physical location of the user", "A way to control access to specific code roles in a program"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'OWASP' (Open Web Application Security Project)?",
    "options": ["A web browser focused on security", "An online community and non-profit foundation that produces freely-available articles, methodologies, documentation, tools, and technologies in the field of web application security. Known for the OWASP Top 10 list of critical web application security risks.", "A specific web application security scanner", "A government agency for web security"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'server-side rendering' (SSR)?",
    "options": ["Rendering 3D graphics on the server", "A technique where a web page's content (HTML) is generated on the server in response to a browser request, and then sent to the client, as opposed to client-side rendering where JavaScript in the browser generates much of the content. Can improve initial page load time and SEO.", "Rendering images on the server before sending to client", "A way to render server status pages"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'client-side rendering' (CSR)?",
    "options": ["Rendering HTML on the client's server", "A technique where most or all of the web page's content (HTML) is rendered in the client's web browser using JavaScript, after an initial minimal HTML page is loaded from the server. Common in Single-Page Applications (SPAs).", "Rendering client-specific data on the server", "A way to render 3D graphics on the client device"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'Single-Page Application' (SPA)?",
    "options": ["An application that consists of only one HTML page in its source code", "A web application or website that interacts with the user by dynamically rewriting the current web page with new data from the web server, instead of the default method of a web browser loading entire new pages. This often results in a more fluid user experience.", "An application that can only be viewed on a single page at a time", "A very simple application with only one page of functionality"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'MVC' (Model-View-Controller) architectural pattern?",
    "options": ["A pattern for managing video controllers", "An architectural pattern that separates an application into three interconnected components: the Model (data and business logic), the View (user interface and presentation), and the Controller (handles user input and interacts with the Model and View).", "Most Valuable Coder pattern", "A pattern for multi-threaded video conferencing"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is the 'Model' in MVC responsible for?",
    "options": ["Displaying data to the user", "Managing the application's data, logic, and rules. It directly interacts with the database and processes data.", "Handling user input", "Controlling the application flow"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is the 'View' in MVC responsible for?",
    "options": ["Managing data and business logic", "Presenting data to the user in a suitable format (e.g., HTML, UI elements). It gets data from the Model (often via the Controller).", "Handling user requests and updating the Model", "Controlling database access"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is the 'Controller' in MVC responsible for?",
    "options": ["Storing application data", "Displaying the user interface", "Receiving user input (e.g., from HTTP requests), processing it (possibly by interacting with the Model), and then selecting a View to render the response.", "Managing database connections"],
    "answer": 2,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'DevOps'?",
    "options": ["A specific software development tool", "A set of practices, cultural philosophies, and tools that combines software development (Dev) and IT operations (Ops) to shorten the systems development life cycle and provide continuous delivery with high software quality.", "A role for developers who also manage operations", "Developing software for operational tasks only"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'git'?",
    "options": ["A type of server hardware", "A distributed version control system designed to handle everything from small to very large projects with speed and efficiency. It tracks changes to files over time.", "A code editor", "A project management tool"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is a 'repository' in Git?",
    "options": ["A secure storage for passwords", "A collection of files and folders, along with a history of changes made to those files. Can be local or remote (e.g., on GitHub, GitLab).", "A database for storing Git commands", "A list of Git users"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is a 'commit' in Git?",
    "options": ["A promise to complete a task", "A snapshot of the changes made to the files in a repository at a specific point in time, along with a commit message describing the changes.", "A command to compile code", "A way to lock files from editing"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is a 'branch' in Git?",
    "options": ["A physical branch of a server tree", "An independent line of development. Branches allow you to work on different features or fixes simultaneously without affecting the main codebase (e.g., `main` or `master` branch).", "A type of conditional statement in Git", "A connection between two repositories"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'merging' branches in Git?",
    "options": ["Deleting one of the branches", "The process of combining the changes from different branches into a single branch.", "Creating a new branch from an existing one", "Archiving old branches"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is a 'pull request' (or merge request) in platforms like GitHub/GitLab?",
    "options": ["A request to pull data from the server", "A formal proposal to merge changes from one branch (e.g., a feature branch) into another (e.g., the main branch), often used for code review and discussion before merging.", "A command to fetch updates from a remote repository", "A request for help with a Git pull operation"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is a 'unit test'?",
    "options": ["A test for the entire application as a single unit", "A type of software testing where individual units or components of a software (e.g., a function, a method, a class) are tested in isolation to verify they work correctly.", "A test performed by a single user", "A test for measuring performance units"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is an 'integration test'?",
    "options": ["A test for integrating new developers into a team", "A type of software testing where individual software modules or components are combined and tested as a group to verify that they interact correctly (e.g., testing the interaction between an API endpoint and a database).", "A test for integrating different programming languages", "A test performed during the integration phase of a CI/CD pipeline only"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is an 'end-to-end (E2E) test'?",
    "options": ["A test that only checks the beginning and end of a function", "A type of software testing that validates the entire application flow from the user's perspective, simulating real user scenarios by interacting with the UI (if applicable) and checking that all integrated components (frontend, backend, database, external services) work together correctly.", "A test performed at the very end of the development cycle", "A test that connects two ends of a network cable"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'code coverage' in testing?",
    "options": ["The amount of code commented out", "A metric that measures the percentage of an application's source code that is executed when a particular suite of automated tests is run. Higher code coverage can indicate more thorough testing, but doesn't guarantee correctness.", "Covering the code with a protective layer", "The number of lines of code covered by insurance"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'mocking' in unit testing?",
    "options": ["Making fun of the code being tested", "Creating mock objects (simulated objects) that mimic the behavior of real dependencies (e.g., database connections, external APIs) in a controlled way. This allows testing a unit of code in isolation without relying on complex or unavailable external systems.", "A way to test user interface mockups", "Using a mockingbird to sing test results"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'stubbing' in testing?",
    "options": ["Leaving parts of the code as stubs (unfinished)", "Providing pre-programmed, canned responses for dependencies during a test, often to control the behavior of the dependency or to provide specific data needed for the test, without implementing the full logic of the dependency.", "A way to stub out toes while coding", "Shortening function names to stubs"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'fuzz testing' (fuzzing)?",
    "options": ["Testing with fuzzy logic", "A software testing technique that involves providing invalid, unexpected, or random data as input to a program to find vulnerabilities, crashes, or unhandled errors. Often used for security testing.", "Testing applications with fluffy data", "A very gentle form of testing"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is 'Big Data'?",
    "options": ["Data that is physically very large in size", "A term for large and complex datasets that traditional data processing application software are inadequate to deal with. It's characterized by high volume, velocity (rate of generation), and variety (different types of data).", "Data stored on very large servers", "A database with only one, very large table"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'Apache Hadoop' often used for?",
    "options": ["A web server software", "An open-source framework for distributed storage (HDFS) and distributed processing (MapReduce, YARN) of very large data sets across clusters of commodity hardware.", "A relational database management system", "A content management system"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'Apache Spark'?",
    "options": ["A tool for creating sparks in visual effects", "An open-source distributed general-purpose cluster-computing framework. It provides an interface for programming entire clusters with implicit data parallelism and fault tolerance, often faster than Hadoop MapReduce for many workloads due to in-memory processing capabilities.", "A type of spark plug for servers", "A JavaScript framework for sparklines"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'machine learning' (ML)?",
    "options": ["Teaching machines to learn human languages", "A field of artificial intelligence (AI) that focuses on the use of data and algorithms to enable systems to learn and improve from experience without being explicitly programmed for each task. Involves training models on data.", "Learning how to operate complex machinery", "A way to make machines learn by rote memorization"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'deep learning'?",
    "options": ["Learning about very deep topics", "A subfield of machine learning based on artificial neural networks with multiple layers (deep neural networks). It has achieved significant success in areas like image recognition, natural language processing, and speech recognition.", "Learning that requires deep concentration", "A very slow learning process"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'blockchain'?",
    "options": ["A chain of physical blocks used for server racks", "A distributed, immutable ledger technology where transactions are recorded in 'blocks' that are cryptographically linked together in a 'chain'. Each block contains a hash of the previous block, creating a secure and tamper-evident record.", "A tool for blocking chain emails", "A type of data structure for storing linked lists"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What are 'cryptocurrencies' (e.g., Bitcoin, Ethereum)?",
    "options": ["Currencies used for cryptographic research", "Digital or virtual currencies that use cryptography for security. They are typically decentralized (not controlled by a single entity like a central bank) and often based on blockchain technology.", "Encrypted versions of traditional currencies", "Currencies that can only be used by cryptographers"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'Cloud Computing'?",
    "options": ["Computing using data stored in weather clouds", "The delivery of on-demand computing services—including servers, storage, databases, networking, software, analytics, and intelligence—over the Internet ('the cloud') on a pay-as-you-go basis, offered by cloud providers like AWS, Azure, GCP.", "A way to make computers float in the air", "Using cloud-based themes for applications"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'IaaS' (Infrastructure as a Service) in cloud computing?",
    "options": ["Providing software applications over the internet", "A cloud computing model that provides virtualized computing resources (e.g., virtual machines, storage, networks) over the internet. Users manage the operating system, applications, and data.", "A platform for developing and deploying applications without managing infrastructure", "Identity and Access Management as a Service"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'PaaS' (Platform as a Service) in cloud computing?",
    "options": ["Providing raw virtual machines and storage", "A cloud computing model that provides a platform for customers to develop, run, and manage applications without the complexity of building and maintaining the infrastructure typically associated with developing and launching an app. The provider manages the OS, middleware, runtime, etc.", "Delivering software applications over the internet on a subscription basis", "Password Management as a Service"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'SaaS' (Software as a Service) in cloud computing?",
    "options": ["Providing infrastructure components like servers and networks", "A software distribution model in which a third-party provider hosts applications and makes them available to customers over the Internet on a subscription basis (e.g., Gmail, Salesforce, Dropbox). Users typically access SaaS applications through a web browser or mobile app.", "A platform for building and deploying applications", "Storage as a Service"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'edge computing'?",
    "options": ["Computing only on the sharp edges of a network", "A distributed computing paradigm that brings computation and data storage closer to the sources of data generation (e.g., IoT devices, users) – typically at the 'edge' of the network – rather than relying on a central cloud. This can reduce latency, save bandwidth, and improve privacy.", "A type of very advanced, cutting-edge computing", "Computing using edge-lit displays"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'latency' in the context of network or system performance?",
    "options": ["The maximum data transfer rate", "The delay or time it takes for data to travel from one point to another in a system or network (e.g., round-trip time for a request-response).", "The amount of data that can be processed per second", "The error rate of a system"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'throughput' in the context of network or system performance?",
    "options": ["The delay in data transfer", "The actual rate of data transfer or work done by a system over a given period (e.g., requests per second, megabits per second).", "The consistency of performance", "The time it takes for a system to start up"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is a 'cron job' (on Unix-like systems)?",
    "options": ["A job for managing user accounts named Cron", "A time-based job scheduler that allows users to schedule scripts or commands to run automatically at specified times, dates, or intervals.", "A type of CPU job with high priority", "A job that cleans up old cronut files"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'UTF-8'?",
    "options": ["A type of data compression algorithm", "A variable-width character encoding standard capable of encoding all possible Unicode code points. It is the dominant character encoding for the World Wide Web.", "A universal time format", "A secure file transfer protocol"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is the 'SOLID' acronym in object-oriented design?",
    "options": ["A set of principles for making software hard and inflexible", "Five design principles intended to make software designs more understandable, flexible, and maintainable: Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion.", "A framework for solid-state drive management", "Secure, Optimized, Lightweight, Independent, Dynamic"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "The 'Open/Closed Principle' (OCP) in SOLID states that:",
    "options": ["Software entities should be open for modification but closed for extension", "Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification. (New functionality should be added by adding new code, not by changing existing, working code).", "All files should be open by default, and closed explicitly", "Source code should be open, compiled code closed"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "The 'Liskov Substitution Principle' (LSP) in SOLID states that:",
    "options": ["Subtypes must be substitutable for their base types without altering the correctness of the program. (Objects of a superclass should be replaceable with objects of its subclasses without affecting the functionality of the program).", "All variables should be substitutable with constants", "Functions should be substitutable with inline code", "Database tables should be substitutable with views"],
    "answer": 0,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "The 'Interface Segregation Principle' (ISP) in SOLID states that:",
    "options": ["All interfaces should be segregated into separate files", "No client should be forced to depend on methods it does not use. It's better to have many small, specific interfaces than one large, general-purpose interface.", "User interfaces should be segregated from backend logic", "Network interfaces should be segregated by protocol"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "The 'Dependency Inversion Principle' (DIP) in SOLID states that:",
    "options": ["Low-level modules should depend on high-level modules", "High-level modules should not depend on low-level modules. Both should depend on abstractions (e.g., interfaces). Abstractions should not depend on details. Details should depend on abstractions.", "All dependencies should be inverted (reversed)", "Dependencies should be managed by inverting the control flow"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is 'idempotence' in the context of distributed systems or API calls?",
    "options": ["The operation can only be performed once", "An operation is idempotent if making multiple identical requests has the same effect as making a single request. This is crucial for handling retries safely in case of network failures or timeouts.", "The operation always returns an identical result regardless of input", "The operation identifies the system uniquely"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'stateless' application or service?",
    "options": ["An application that has no defined state transitions", "An application or service that does not store any client session data on the server between requests. Each request from a client is treated independently and must contain all necessary information for the server to process it. This simplifies scaling and improves resilience.", "An application that cannot maintain any internal state", "An application that runs without an operating system state"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is a 'stateful' application or service?",
    "options": ["An application that is always in a 'full' state", "An application or service that remembers client-specific data (session state) from one request to the next. This can complicate scaling and fault tolerance compared to stateless services.", "An application that has many defined states", "An application that reports its state to a central monitor"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'graceful degradation' in system design?",
    "options": ["A system that degrades very quickly when failing", "The ability of a system to continue operating and provide essential services, possibly at a reduced level of functionality or performance, when some of its components fail or are overloaded, rather than failing completely.", "A design that looks graceful even when it's old", "Degrading system performance to save power gracefully"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'failover' in a high-availability system?",
    "options": ["A system designed to fail over and over", "The process of automatically switching to a redundant or standby server, system, or network upon the failure or abnormal termination of the previously active one, to ensure continuity of service.", "Failing to complete an operation", "A security feature to fail if an unauthorized user attempts access"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'DNS round robin'?",
    "options": ["A game played with DNS servers", "A load balancing technique where multiple IP addresses are associated with a single domain name in DNS. When clients query for the domain, the DNS server responds with the IP addresses in a rotating (round-robin) order, distributing client requests across multiple servers.", "A way to cycle through different DNS resolvers", "A method for ensuring DNS responses are always in the same order"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'sticky sessions' (or session affinity) in load balancing?",
    "options": ["Sessions that are hard to terminate", "A load balancing feature where all requests from a specific client (session) are consistently routed to the same backend server for the duration of that session. This is often needed for stateful applications that store session data on individual servers.", "Sessions that 'stick' to the user's browser", "A way to make user sessions more engaging"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'geographical load balancing' (or GSLB - Global Server Load Balancing)?",
    "options": ["Balancing load only within a single geographical region", "Distributing traffic across servers located in different geographical regions, often based on the client's location, server health, or load, to improve performance (reduce latency) and availability.", "A map showing server load distribution", "Balancing the load of geographical data processing"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'reverse proxy cache'?",
    "options": ["A cache that stores data in reverse order", "A cache maintained by a reverse proxy server, which stores frequently requested content from backend servers. When a client requests this content, the reverse proxy can serve it directly from its cache, reducing load on backend servers and improving response times.", "A cache for proxy server configurations", "A cache that only stores responses to POST requests"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'cache invalidation'?",
    "options": ["Making a cache invalid for security reasons", "The process of removing or marking stale (outdated) data from a cache so that subsequent requests will fetch the fresh data from the origin source. Cache invalidation strategies are crucial for maintaining data consistency.", "Validating the integrity of a cache", "A cache that is always considered invalid"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'Time-To-Live' (TTL) for a cache entry?",
    "options": ["The time it takes to load the cache entry", "A value that specifies how long a cache entry should be considered valid and can be served from the cache before it expires and needs to be re-fetched or revalidated from the origin source.", "The maximum number of times a cache entry can be accessed", "The total lifetime of the cache server"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'dogpiling effect' (or cache stampede / thundering herd)?",
    "options": ["When many dogs pile on a server", "A situation where a cache entry expires or is invalidated, and multiple concurrent requests for that same data all miss the cache and try to regenerate or fetch it from the origin source simultaneously, potentially overwhelming the origin source.", "A pile of expired cache entries", "A group of users all requesting the same data at once from different caches"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is a 'mutex lock' used for in concurrent programming?",
    "options": ["To lock a user interface element", "A synchronization primitive that provides mutual exclusion, ensuring that only one thread can acquire the lock and execute a specific (critical) section of code or access a shared resource at any given time, preventing race conditions.", "A lock that mutes audio output", "A way to lock database tables for exclusive access"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is a 'read-write lock'?",
    "options": ["A lock that only allows reading and writing, not deleting", "A synchronization primitive that allows multiple threads to read a shared resource concurrently, but requires exclusive access for any thread that wants to write to (modify) the resource. This can improve performance for read-heavy workloads compared to a simple mutex.", "A lock that alternates between read and write modes", "A physical lock for read/write heads on a disk"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'optimistic locking' (or optimistic concurrency control)?",
    "options": ["Locking resources with an optimistic attitude", "A concurrency control strategy where multiple transactions can read data without acquiring locks. When a transaction attempts to update data, it checks if the data has been modified by another transaction since it was read. If so, the update fails (e.g., by detecting a version mismatch), and the transaction may need to be retried.", "A way to lock resources only if they are likely to be contended", "Locking that is optimized for performance"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is 'pessimistic locking' (or pessimistic concurrency control)?",
    "options": ["Locking resources with a pessimistic outlook on contention", "A concurrency control strategy where a resource is locked before it is accessed by a transaction, preventing other transactions from modifying (or sometimes even reading) it until the lock is released. This avoids conflicts but can reduce concurrency.", "A way to lock resources that are known to be problematic", "Locking that assumes the worst-case scenario for performance"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 3
  },
  {
    "question": "What is a 'Content Security Policy (CSP)' HTTP header primarily used to prevent?",
    "options": ["Denial-of-Service attacks", "Cross-Site Scripting (XSS) and other code injection attacks by specifying which sources of content (scripts, styles, images, etc.) are trusted and can be loaded by the browser.", "SQL Injection attacks", "CSRF attacks"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is the `X-Frame-Options` HTTP header used for?",
    "options": ["To specify options for HTML frames", "To protect against clickjacking attacks by controlling whether a browser should be allowed to render a page in a `<frame>`, `<iframe>`, `<embed>` or `<object>`.", "To define the framing rate for video streams", "Options for X-Windows display servers"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is the `Strict-Transport-Security` (HSTS) HTTP header used for?",
    "options": ["To enforce strict HTML validation", "To instruct browsers to only communicate with the website using HTTPS, even if the user tries to access it via HTTP. This helps prevent protocol downgrade attacks and cookie hijacking.", "To define strict transport protocols for data", "To secure data transport within the server only"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What are 'dependency hell' issues in software development?",
    "options": ["When developers argue about dependencies", "Problems that arise when managing software dependencies, such as conflicting version requirements between different libraries, circular dependencies, or difficulties in resolving transitive dependencies, leading to build failures or runtime errors.", "A very difficult dependency to implement", "When a project has too many dependencies from hellish sources"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'semantic versioning' (SemVer), e.g., MAJOR.MINOR.PATCH (1.2.3)?",
    "options": ["Versioning based on the semantic meaning of the code", "A widely adopted versioning scheme where version numbers consist of three parts: MAJOR (for incompatible API changes), MINOR (for adding functionality in a backward-compatible manner), and PATCH (for backward-compatible bug fixes).", "A way to version software using natural language", "Versioning that focuses on the semantics of the user interface"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'message broker' (e.g., RabbitMQ, Apache Kafka, ActiveMQ)?",
    "options": ["A broker for selling software messages", "An intermediary software component that translates messages from the formal messaging protocol of the sender to the formal messaging protocol of the receiver, often used for asynchronous communication, decoupling services, and managing message queues.", "A person who manages communication between teams", "A hardware device for routing messages"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is the 'publish-subscribe' (pub/sub) messaging pattern?",
    "options": ["A pattern for publishing articles and subscribing to magazines", "A messaging pattern where senders (publishers) do not send messages directly to specific receivers (subscribers), but instead categorize published messages into topics or channels, without knowledge of which subscribers (if any) there may be. Subscribers express interest in one or more topics and only receive messages that are of interest, without knowledge of which publishers (if any) there are.", "A way to subscribe to software updates via publishing", "A pattern for managing newspaper subscriptions"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'idempotence' in the context of message processing from a queue?",
    "options": ["The message can only be processed once successfully", "Ensuring that if the same message is processed multiple times (e.g., due to retries after a failure or redelivery), it has the same effect as if it were processed only once, preventing unintended side effects like duplicate data creation.", "The message identifies the processor uniquely", "The message processing is always very fast"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'blocking I/O' operation?",
    "options": ["An I/O operation that blocks all other network traffic", "An I/O operation (e.g., reading from a file or network socket) where the calling thread suspends execution (blocks) until the operation is complete or an error occurs.", "An I/O operation that is physically blocked by hardware", "A way to prevent I/O operations from occurring"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'non-blocking I/O' (or asynchronous I/O)?",
    "options": ["I/O operations that are not allowed to block", "An I/O operation where the calling thread does not suspend execution while waiting for the operation to complete. Instead, the call returns immediately (e.g., indicating the operation has started), and the completion is typically signaled later via a callback, promise, event, or by polling.", "I/O that does not use physical blocks", "A way to make I/O operations always succeed without blocking"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is an 'event loop' (common in Node.js, Python asyncio, browser JavaScript)?",
    "options": ["A loop for iterating through UI events only", "A programming construct that waits for and dispatches events or messages in a program. It allows single-threaded applications to handle concurrent operations (like I/O) by processing events (e.g., I/O completion, timers, user actions) from a queue one at a time, without blocking the main thread.", "A loop that generates random events for testing", "A physical loop in an electrical circuit for events"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'Big Data' often characterized by (the '3 Vs' or more)?",
    "options": ["Volume, Velocity, Variety (and sometimes Veracity, Value)", "Very large, Very fast, Very visual", "Virtual, Volatile, Validated", "Versioned, Vetted, Verified"],
    "answer": 0,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'data mining'?",
    "options": ["Physically mining for data storage devices", "The process of discovering patterns, correlations, anomalies, and other useful information from large sets of data using techniques from statistics, machine learning, and database systems.", "A way to encrypt data for mining operations", "Creating mines to store data securely"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'ETL' (Extract, Transform, Load) process typically used for?",
    "options": ["Easy Text Linking", "Moving data from various source systems, transforming it into a consistent format, and loading it into a target system, often a data warehouse, for analysis and reporting.", "Electronic Transaction Logging", "Executing Transformed Logic"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'data lake'?",
    "options": ["A small, curated dataset", "A centralized repository that allows you to store all your structured and unstructured data at any scale, in its raw format. It's often used for big data analytics, machine learning, and ad-hoc querying.", "A physical lake where data servers are cooled", "A specific type of database optimized for lake-related data"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'data warehouse'?",
    "options": ["A warehouse for storing physical data backups", "A system used for reporting and data analysis, typically storing large amounts of historical data that has been cleaned, transformed, and structured (often in a relational or dimensional model) from various operational sources to support business intelligence.", "A software for managing inventory in a warehouse", "A temporary storage for data before it's processed"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'OLTP' (Online Transaction Processing)?",
    "options": ["Online Text Processing", "A class of software programs capable of supporting transaction-oriented applications on the Internet, characterized by a large number of short online transactions (INSERT, UPDATE, DELETE). Databases designed for OLTP are optimized for fast, reliable transactional processing.", "Offline Transaction Processing", "Optimal Language for Transaction Processing"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'OLAP' (Online Analytical Processing)?",
    "options": ["Online Algorithm Processing", "A category of software technology that enables users to easily and selectively extract and view data from different points of view. OLAP databases are often multidimensional and optimized for complex queries, aggregations, and analytical tasks, typically on large historical datasets (data warehouses).", "Offline Analytical Processing", "Optimal Language for Analytical Processing"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'Content Delivery Network' (CDN)?",
    "options": ["A network for delivering only dynamic content", "A geographically distributed network of proxy servers and their data centers that cache static content (images, CSS, JS, videos) closer to end-users, improving content delivery speed and reducing load on origin servers.", "A network for managing content licenses", "A secure network for delivering confidential documents"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'geofencing'?",
    "options": ["Building physical fences around geographical areas", "A feature in a software program that uses GPS or RFID to define a virtual geographical boundary. When a device enters or exits this boundary, an action can be triggered (e.g., sending a notification, enabling/disabling features).", "Encrypting geographical data", "A way to fence off parts of a map from users"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'A/B testing' (or split testing)?",
    "options": ["Testing if A is better than B in all cases", "A method of comparing two versions (A and B) of a webpage, app feature, or other component by showing the two variants to similar groups of users simultaneously and then evaluating which version performs better against a target metric (e.g., conversion rate, engagement).", "Testing software with only 'A' and 'B' grade quality", "A way to test both sides of an application (frontend and backend) simultaneously"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'dogfooding' in software development?",
    "options": ["Feeding software to dogs", "The practice of a company using its own products or services internally before releasing them to the public, as a way to test them in a real-world environment and identify issues or areas for improvement.", "Creating software specifically for pet food companies", "A type of stress testing involving dogs"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'vendor lock-in'?",
    "options": ["When a vendor locks their office doors", "A situation where a customer using a product or service cannot easily transition to a competitor's product or service due to substantial costs, incompatibilities, or proprietary technologies.", "A security feature where vendors are locked out of a system", "Locking software to a specific hardware vendor"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'SLO' (Service Level Objective)?",
    "options": ["A slow-level objective for system performance", "A specific, measurable target for a service's performance or reliability, agreed upon as part of a Service Level Agreement (SLA). For example, 99.9% uptime or average API response time < 200ms.", "A list of objectives for service-oriented architecture", "Software License Objective"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'SLA' (Service Level Agreement)?",
    "options": ["Software Licensing Agreement", "A contract between a service provider and a customer that defines the level of service expected from the provider, including metrics like uptime, performance, and responsibilities. Often includes penalties for not meeting the agreed levels.", "Secure Layer Authentication", "System Load Analyzer"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'RPO' (Recovery Point Objective)?",
    "options": ["The objective for recovering old project files", "The maximum acceptable amount of data loss (measured in time) that a business can tolerate after a disaster or disruption. It defines how up-to-date the recovered data must be.", "Recovery Process Optimization", "Real-time Performance Objective"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'RTO' (Recovery Time Objective)?",
    "options": ["The objective for recovering user time spent on the system", "The maximum acceptable amount of time that a system, application, or business process can be down after a disaster or disruption before it needs to be restored to normal operation.", "Real-time Operation objective", "Remote Transaction Objective"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is a 'postmortem' (or incident review) in software operations?",
    "options": ["An autopsy performed on a failed server", "A process conducted after an incident (e.g., an outage, security breach) to analyze what happened, the impact, the root cause(s), what went well, what could have been done better, and what actions can be taken to prevent similar incidents in the future. Often blameless.", "A review of a project after it has been terminated", "A medical examination of software code"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'Infrastructure as a Service' (IaaS)?",
    "options": ["Providing fully managed software applications", "A cloud computing model where a provider offers virtualized computing resources like virtual machines, storage, and networking. The customer manages the OS, applications, and data.", "A platform for developing applications without managing servers", "Identity and Access Management as a Service"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'Platform as a Service' (PaaS)?",
    "options": ["Providing physical servers and data center space", "A cloud computing model where a provider offers a platform for developing, running, and managing applications without the complexity of building and maintaining the underlying infrastructure (hardware, OS, networking). The customer focuses on their application code.", "Delivering software applications over the internet", "Patch Management as a Service"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'Software as a Service' (SaaS)?",
    "options": ["Providing raw computing infrastructure", "A software distribution model where a third-party provider hosts applications and makes them available to customers over the Internet, typically on a subscription basis. Users access the software via a web browser or mobile app, without managing the software or infrastructure.", "A platform for building custom software", "Storage as a Service"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'Function as a Service' (FaaS) or 'Serverless Computing'?",
    "options": ["A service for defining mathematical functions", "A cloud computing model where the cloud provider dynamically manages the allocation and provisioning of servers to run individual functions (or small pieces of code) in response to events. Developers don't manage servers, and typically pay only for the execution time.", "A platform for building applications without using functions", "A service that provides pre-built server functions"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is a 'relational database' (RDBMS)?",
    "options": ["A database that stores relationships between users", "A type of database that organizes data into one or more tables (or 'relations') of columns and rows, with a unique key identifying each row. Relationships between tables are defined using foreign keys. Typically queried using SQL.", "A database for storing family relationship data", "A database that is related to other databases"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is a 'document database' (e.g., MongoDB, Couchbase)?",
    "options": ["A database for storing scanned documents only", "A type of NoSQL database that stores data in document-like structures, often JSON or BSON format. Each document can have a flexible schema and can contain nested data structures.", "A database that generates documents from data", "A system for managing physical document archives"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is a 'key-value store' (e.g., Redis, Memcached)?",
    "options": ["A store that only sells keys and values", "A simple type of NoSQL database that stores data as a collection of key-value pairs. Keys are unique identifiers, and values can be simple data types or complex objects. Optimized for fast lookups by key.", "A database where keys have fixed values", "A secure store for cryptographic keys and their values"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is a 'graph database' (e.g., Neo4j, Amazon Neptune)?",
    "options": ["A database for storing graphical images", "A type of NoSQL database that uses graph structures (nodes, edges, and properties) to represent and store data. Optimized for querying relationships between data points and traversing complex, interconnected data.", "A database that displays data as graphs", "A system for managing graph paper designs"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is a 'column-family store' (or wide-column store, e.g., Apache Cassandra, HBase)?",
    "options": ["A database that stores data in a single, very wide column", "A type of NoSQL database that stores data in tables consisting of rows and dynamic columns. Data for each row is grouped by column families. Optimized for queries over large datasets by column and can scale horizontally very well.", "A database for storing newspaper columns", "A system for managing data in columnar physical format only"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 2
  },
  {
    "question": "What is 'encryption at rest'?",
    "options": ["Encrypting data only when the server is at rest (idle)", "The practice of encrypting data that is stored physically in any digital form (e.g., on disk drives, in databases, in backups), to protect it from unauthorized access if the storage media is compromised.", "Encrypting data that is not currently being accessed", "A type of encryption that is very slow ('at rest')"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "What is 'encryption in transit' (or in motion)?",
    "options": ["Encrypting data while it is being physically transported", "The practice of encrypting data as it travels across a network (e.g., between a client and server, or between servers), to protect it from eavesdropping or tampering during transmission. SSL/TLS is a common method.", "Encrypting data that is frequently changing", "A type of encryption for vehicles"],
    "answer": 1,
    "category": "Backend",
    "difficulty": 1
  },
  {
    "question": "Explain the CAP theorem and its implications for designing distributed backend systems. Provide an example of a system that prioritizes CP and one that prioritizes AP.",
    "options": [
      "CAP means Compute, Access, Process; CP systems are fast, AP systems are always processing.",
      "CAP (Consistency, Availability, Partition tolerance) states a distributed system can only simultaneously guarantee two of these three. In a network partition (P), one must choose between Consistency (CP - all nodes see same data, might mean some nodes are unavailable) or Availability (AP - all responsive nodes process requests, might mean stale data). Example CP: Zookeeper. Example AP: Cassandra (tunable).",
      "CAP theorem is about CPU, Availability, and Power; CP systems are CPU-intensive, AP systems power-efficient.",
      "CAP stands for Cache, API, Protocol; CP systems have strong caching, AP systems flexible APIs."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Describe the Two-Phase Commit (2PC) protocol. What are its main drawbacks, and what are alternative approaches for managing distributed transactions (e.g., Sagas)?",
    "options": [
      "2PC is for committing code in two phases; drawback is slowness, Sagas are faster commits.",
      "2PC is a distributed atomic commitment protocol. Phase 1 (Prepare): Coordinator asks participants to prepare to commit. Phase 2 (Commit/Abort): Coordinator decides based on responses and tells participants to commit or abort. Drawbacks: Blocking (coordinator failure can block participants), performance overhead. Alternatives: Sagas (sequence of local transactions with compensating actions), eventual consistency models.",
      "2PC has two coordinators; drawback is complexity, Sagas use one coordinator.",
      "2PC commits to two databases simultaneously; drawback is data duplication, Sagas avoid this."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Explain the concept of idempotency in API design. Why is it crucial for certain HTTP methods (like PUT and DELETE), and how can it be implemented for non-idempotent methods like POST when retries are necessary?",
    "options": [
      "Idempotency means an API is only used by identified users; PUT/DELETE are always idempotent.",
      "Idempotency means multiple identical requests have the same effect as a single request. PUT (update/replace) and DELETE are naturally idempotent. For POST (create), which is not naturally idempotent, idempotency for retries can be achieved by using a client-generated idempotency key in the request header. The server tracks this key to ensure a retried request with the same key isn't processed again if the original succeeded.",
      "Idempotency means the API response is always identical; crucial for caching.",
      "Idempotency is about API security; POST is made idempotent by using HTTPS."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Discuss different strategies for database sharding (e.g., range-based, hash-based, directory-based). What are the trade-offs of each approach?",
    "options": [
      "Range-based splits by primary key, hash-based uses modulo, directory-based uses a map; hash is always best.",
      "Range-based: shards data by a range of a sharding key (e.g., user ID 1-1000 on shard 1). Pros: easy range queries. Cons: hotspots, re-sharding complexity. Hash-based: hashes sharding key to determine shard. Pros: better data distribution. Cons: range queries difficult. Directory-based: lookup table maps sharding key to shard. Pros: flexible. Cons: lookup overhead, single point of failure for directory.",
      "All sharding strategies have similar trade-offs, mainly data distribution.",
      "Sharding is about vertical partitioning; strategies define column splits."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Explain the concept of a 'Service Mesh' (e.g., Istio, Linkerd) in a microservices architecture. What problems does it solve and what are its key components?",
    "options": [
      "A physical network mesh connecting microservices for high bandwidth.",
      "A service mesh is a dedicated infrastructure layer for handling service-to-service communication. It provides features like traffic management (routing, load balancing, retries, circuit breaking), security (mTLS, authentication, authorization), and observability (metrics, tracing, logging) through a set of network proxies (sidecars, e.g., Envoy) deployed alongside each service instance, managed by a control plane.",
      "A mesh of APIs for microservice discovery and registration.",
      "A specific type of database optimized for microservice communication."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Describe how mutual TLS (mTLS) works and its role in securing inter-service communication in a backend system.",
    "options": [
      "mTLS means only the server presents a TLS certificate.",
      "In mTLS, both the client and the server authenticate each other using X.509 digital certificates during the TLS handshake. The client verifies the server's certificate, and the server verifies the client's certificate. This establishes a secure, encrypted channel where both parties are authenticated, crucial for protecting inter-service communication within a trusted (but potentially compromised) network.",
      "mTLS uses a shared secret key for authentication instead of certificates.",
      "mTLS is a less secure version of TLS for internal networks."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Explain the 'Saga' pattern for managing distributed transactions in a microservices architecture. Describe choreographed vs. orchestrated sagas.",
    "options": [
      "Saga is a single, long-running transaction across all microservices.",
      "Saga pattern manages data consistency across services using a sequence of local transactions. Each local transaction updates its service's data and publishes an event. Choreographed: services subscribe to events and trigger next local transaction. Orchestrated: a central coordinator tells services which local transactions to execute. Both require compensating transactions for rollback.",
      "Choreographed sagas use a central orchestrator; orchestrated sagas use event chains.",
      "Saga pattern uses two-phase commit for all local transactions."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "What are 'Idempotent Receivers' in message-driven architectures, and why are they important when dealing with 'at-least-once' message delivery guarantees?",
    "options": [
      "Receivers that can only process a message once successfully.",
      "At-least-once delivery means a message might be delivered multiple times (e.g., due to retries after ack failure). An idempotent receiver ensures that processing the same message multiple times produces the same result and side effects as processing it once, preventing issues like duplicate data creation or incorrect state updates. This often involves tracking processed message IDs.",
      "Receivers that identify duplicate messages and discard them without processing.",
      "Idempotent receivers are only needed for 'exactly-once' delivery systems."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Discuss the trade-offs between different caching strategies: cache-aside, read-through, write-through, write-back, and write-around. When might each be appropriate?",
    "options": [
      "Cache-aside is always best for read performance; write-back for write performance.",
      "Cache-aside: App checks cache, on miss loads from DB & populates cache. Read-through: Cache lib handles DB load on miss. Write-through: Writes go to cache & DB simultaneously (consistency, slower writes). Write-back: Writes to cache, later to DB (fast writes, risk of data loss on cache failure). Write-around: Writes to DB, cache updated on next read (avoids cache pollution from write-heavy, rarely read data). Choice depends on read/write patterns, consistency needs, data volatility.",
      "Read-through and write-through are only for in-memory caches.",
      "Write-around means writing around the cache directly to the user."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Explain the concept of 'Consistent Hashing' and its benefits for distributed caching or storage systems.",
    "options": [
      "A hashing algorithm that always produces the same hash for any input.",
      "Consistent hashing is a technique that minimizes data reshuffling when nodes are added or removed in a distributed system. Keys are mapped to a logical ring, and nodes are also mapped to points on this ring. A key is assigned to the first node encountered clockwise on the ring. When a node is added/removed, only a fraction of keys need to be remapped, improving stability and reducing load during scaling events.",
      "Hashing that ensures all data is stored consistently across all nodes.",
      "A cryptographic hashing method for ensuring data consistency."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "What is the 'Circuit Breaker' pattern, and how does it improve the resilience of a distributed system?",
    "options": [
      "A physical circuit breaker for server racks.",
      "The Circuit Breaker pattern prevents an application from repeatedly trying to execute an operation that is likely to fail (e.g., calling a failing remote service). It monitors failures. After a threshold, it 'trips' (opens), and subsequent calls are failed immediately or redirected to a fallback, without stressing the failing service. After a timeout, it enters a 'half-open' state to test if the service recovered.",
      "A pattern for breaking infinite loops in backend circuits.",
      "A security pattern to break unauthorized network connections."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Describe the 'Bulkhead' pattern. How does it contribute to fault isolation in a microservices architecture?",
    "options": [
      "Dividing a ship's hull into watertight compartments (bulkheads).",
      "The Bulkhead pattern isolates elements of an application into pools so that if one fails, the others will continue to function. In microservices, this can mean dedicating resource pools (e.g., thread pools, connection pools) for calls to different services. If one service becomes slow or unresponsive, it only exhausts its dedicated pool, preventing cascading failures from affecting other parts of the application.",
      "A pattern for storing large (bulk) data in separate heads.",
      "A security pattern to create isolated compartments for sensitive data."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Explain different database isolation levels (e.g., Read Uncommitted, Read Committed, Repeatable Read, Serializable) and the phenomena they prevent (dirty reads, non-repeatable reads, phantom reads).",
    "options": [
      "Higher levels are always faster; Serializable prevents all phenomena.",
      "Isolation levels define the degree to which transactions are isolated from each other. Read Uncommitted: allows dirty reads, non-repeatable reads, phantoms. Read Committed: prevents dirty reads. Repeatable Read: prevents dirty reads, non-repeatable reads. Serializable: prevents dirty reads, non-repeatable reads, phantoms (highest isolation, lowest concurrency). Trade-off between consistency and concurrency.",
      "Read Committed allows dirty reads but prevents non-repeatable reads.",
      "Serializable allows phantom reads for better performance."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "What is 'Event Sourcing' and how does it differ from traditional state-oriented persistence? What are its benefits and challenges?",
    "options": [
      "Sourcing events from user interface clicks only.",
      "Event Sourcing persists all changes to application state as a sequence of immutable events, rather than just storing the current state. The current state is derived by replaying events. Benefits: strong audit log, temporal queries, debugging. Challenges: complexity of replaying events for current state, schema evolution of events, eventual consistency for read models (if using CQRS).",
      "Event Sourcing stores only the final state after all events.",
      "It's a pattern for handling server-sent events from the client."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Describe CQRS (Command Query Responsibility Segregation). Why might one choose this pattern, and what are potential complexities?",
    "options": [
      "CQRS is a query language for complex systems.",
      "CQRS separates read (Query) operations from update (Command) operations for a data store. This allows optimizing the read model (e.g., denormalized, different database) for queries and the command model for updates and business logic. Benefits: scalability, performance, flexibility. Complexities: eventual consistency between read/write models, increased architectural complexity.",
      "CQRS combines read and write operations into a single model for simplicity.",
      "It's a security pattern for segregating command and query permissions."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Explain the concept of 'Observability' (logs, metrics, traces) in modern backend systems and why all three pillars are important.",
    "options": [
      "Observability means the system's code is open source.",
      "Observability is the ability to understand a system's internal state from its external outputs. Logs: detailed, timestamped records of events. Metrics: aggregated numerical data over time (e.g., request rate, error count). Traces: track a request's path through a distributed system. All three provide different perspectives needed for debugging, monitoring, and understanding complex system behavior.",
      "Logs are for errors, metrics for performance, traces for security.",
      "Observability is primarily achieved through detailed API documentation."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "What are the challenges and strategies for achieving zero-downtime deployments for a backend service?",
    "options": [
      "Zero-downtime means the service never has any bugs.",
      "Challenges: maintaining session state, database schema migrations, routing traffic seamlessly. Strategies: Blue-Green deployment (switch traffic to new version), Canary release (gradual rollout), Rolling updates (update instances incrementally), using load balancers with health checks, ensuring backward/forward compatibility of APIs and data formats during transition.",
      "It's achieved by deploying only during off-peak hours.",
      "Zero-downtime is only possible with serverless architectures."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Discuss the role of API Gateways in a microservices architecture, covering aspects like request routing, aggregation, authentication, rate limiting, and protocol translation.",
    "options": [
      "API Gateways are physical hardware devices that route all internet traffic.",
      "An API Gateway acts as a single entry point for clients. It routes requests to appropriate microservices, can aggregate responses from multiple services, offload authentication/authorization, enforce rate limits & quotas, perform protocol translation (e.g., HTTP to gRPC), and provide centralized logging/monitoring for API calls.",
      "API Gateways only handle authentication and authorization.",
      "Each microservice typically has its own API Gateway."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Compare and contrast stateless and stateful backend services. What are the implications for scalability, resilience, and session management?",
    "options": [
      "Stateless services are always less secure but more scalable.",
      "Stateless: server doesn't store client session state between requests; each request has all info. Pros: easy scaling, resilience (any instance can handle request). Cons: might need to send more data per request. Stateful: server stores session state. Pros: less data per request (context is on server). Cons: harder scaling (sticky sessions needed), resilience challenges (session loss on server failure).",
      "Stateful services are easier to scale horizontally.",
      "Stateless services require a database for all session data."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "What is the purpose of a distributed lock manager (e.g., using Zookeeper, Redis with Redlock, or etcd) in a distributed backend system?",
    "options": [
      "To manage user login sessions in a distributed manner.",
      "To provide a mechanism for coordinating access to shared resources among multiple processes or servers in a distributed environment, ensuring that only one process can acquire a lock (and thus access the critical section/resource) at a time, preventing race conditions or data corruption.",
      "To lock down entire servers in a distributed system for maintenance.",
      "A tool for managing software licenses in a distributed workforce."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Explain different approaches to API versioning (e.g., URI versioning, header versioning, query parameter versioning). What are the pros and cons of each?",
    "options": [
      "URI versioning is the only standard method; others are deprecated.",
      "URI (e.g., /v1/users): Clear, easy to cache/route. Cons: clutters URI. Header (e.g., `Accept: application/vnd.myapi.v1+json`): Cleaner URIs. Cons: less obvious to clients, harder caching. Query Param (e.g., /users?version=1): Easy for clients. Cons: can be ignored by proxies, clutters URI. Choice depends on factors like cacheability, client ease, API aesthetics.",
      "Header versioning is most performant but least secure.",
      "Query parameter versioning is best for RESTful principles."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "What is 'gRPC-Web' and what problem does it solve for using gRPC from web browsers?",
    "options": [
      "A web-based GUI for managing gRPC services.",
      "gRPC uses HTTP/2, which is not fully supported by all browser APIs for direct client-side gRPC calls (e.g., browsers typically don't allow direct control over HTTP/2 frames). gRPC-Web provides a way for browser clients to communicate with gRPC services, often via a proxy that translates between gRPC-Web (HTTP/1.1 or HTTP/2 with specific framing) and native gRPC.",
      "A JavaScript library for creating gRPC servers.",
      "A specification for using gRPC over WebSockets only."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Describe the actor model of concurrency (e.g., Akka, Orleans). How does it differ from traditional thread-based concurrency with shared memory and locks?",
    "options": [
      "Actor model uses actors (humans) to manage concurrent tasks.",
      "In the actor model, 'actors' are independent computational entities that communicate by asynchronously sending immutable messages to each other. Each actor has its own private state and processes messages sequentially from its mailbox. This avoids shared mutable state and locks, simplifying concurrent programming and reducing risks of deadlocks/race conditions. Concurrency is achieved by having many actors.",
      "Actor model is a way to create theatrical plays using code.",
      "It's a thread-based model where threads are called 'actors'."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "What are 'idempotent consumers' in a message queuing system, and why are they important for achieving 'effectively-once' processing semantics?",
    "options": [
      "Consumers that can only consume one message type.",
      "Message systems often provide 'at-least-once' delivery. To achieve 'effectively-once' processing (preventing duplicate processing of a message if it's redelivered), the consumer must be idempotent: processing the same message multiple times must have the same effect as processing it once. This usually involves tracking processed message IDs or using operations that are naturally idempotent.",
      "Consumers that identify and discard duplicate messages before processing.",
      "Idempotent consumers are only needed if the queue guarantees 'at-most-once' delivery."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Explain the role and benefits of using a reverse proxy (like Nginx or HAProxy) in front of a backend application server.",
    "options": [
      "Reverse proxies are only for caching static content.",
      "A reverse proxy acts as an intermediary, receiving client requests and forwarding them to backend servers. Benefits: Load balancing across multiple app servers, SSL/TLS termination (offloading encryption), caching frequently requested content, compression, serving static files, security (hiding backend topology, WAF), request/response manipulation, rate limiting.",
      "Reverse proxies mainly secure the client, not the server.",
      "They are primarily used to translate between HTTP/1.1 and HTTP/2 for backend servers."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "What are 'Chaos Engineering' principles and how are they applied to test the resilience of backend systems?",
    "options": [
      "Intentionally introducing random bugs into the codebase.",
      "Chaos Engineering is the discipline of experimenting on a distributed system in production (or a production-like environment) to build confidence in its ability to withstand turbulent conditions. It involves proactively injecting controlled failures (e.g., shutting down servers, introducing network latency/packet loss, CPU spikes) to identify weaknesses and verify recovery mechanisms.",
      "A method for engineering chaotic user interfaces.",
      "Using AI to predict and prevent chaotic system behavior."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Discuss the trade-offs between eventual consistency and strong consistency in distributed databases. When would you choose one over the other?",
    "options": [
      "Strong consistency is always preferable for all applications.",
      "Strong consistency: all reads see the latest write; simpler for developers but can have higher latency and lower availability in distributed systems (especially with partitions). Eventual consistency: reads might see stale data temporarily, but all replicas eventually converge; offers higher availability and lower latency, suitable for applications that can tolerate some staleness (e.g., social media feeds, product recommendations). Choice depends on application requirements (CAP theorem trade-offs).",
      "Eventual consistency means data is never truly consistent.",
      "Strong consistency is only achievable with single-node databases."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "What is 'Data Pipeline Orchestration' (e.g., using Apache Airflow, Luigi, Prefect)? What challenges does it address?",
    "options": [
      "Orchestrating musical performances based on data.",
      "Managing and automating complex data workflows (pipelines) that involve multiple dependent tasks, such as ETL jobs, data transformations, and ML model training. Orchestration tools help define, schedule, monitor, and manage these workflows, handling dependencies, retries, logging, and alerting. Challenges addressed: scheduling, dependency management, error handling, monitoring, scalability of data processes.",
      "A way to physically arrange data pipes in a data center.",
      "Orchestrating real-time data streams only."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Explain the concept of 'Infrastructure as Code' (IaC) and its benefits. Name a popular IaC tool.",
    "options": [
      "Writing application code that directly manages infrastructure.",
      "IaC is managing and provisioning IT infrastructure (servers, networks, storage, databases) through machine-readable definition files (code), rather than manual configuration or interactive tools. Benefits: automation, version control, repeatability, consistency, scalability, reduced errors. Popular tool: Terraform (also Ansible, CloudFormation, Pulumi).",
      "Embedding infrastructure IP addresses directly in application code.",
      "A programming language designed for writing infrastructure drivers."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Describe 'Canary Releases' and 'Blue-Green Deployments'. What are the pros and cons of each deployment strategy?",
    "options": [
      "Canary releases use canaries to test new software; Blue-Green uses colored servers.",
      "Canary: Gradually roll out new version to a small subset of users/servers, monitor, then expand or roll back. Pros: low risk, real user feedback. Cons: managing multiple versions, complex. Blue-Green: Deploy new version to identical 'green' env, test, then switch traffic from 'blue' (old) to 'green'. Pros: instant rollback, full env test. Cons: resource intensive (double infra), potential issues with stateful apps/DBs during switch.",
      "Blue-Green is for UI colors; Canary is for small, yellow features.",
      "Both are identical strategies with different names."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Explain the concept of 'Sidecar Pattern' in containerized applications, especially within a service mesh.",
    "options": [
      "A pattern where a small car (sidecar) is attached to each server.",
      "The Sidecar pattern deploys auxiliary components (e.g., logging agents, monitoring agents, proxies for network communication) as separate containers alongside the main application container within the same Pod (in Kubernetes) or execution context. These sidecars augment or enhance the main application without being tightly coupled to its codebase. Service meshes often use sidecar proxies (like Envoy) for traffic management and security.",
      "A pattern where the main application runs in a sidecar process.",
      "A way to attach debugging tools as sidecars during development."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "What are the challenges of managing state in a serverless (FaaS) architecture, and what are common strategies to address them?",
    "options": [
      "Serverless functions are always stateful by default.",
      "Serverless functions are typically stateless and ephemeral. Challenges: persisting state between invocations, sharing state across function instances. Strategies: Use external stateful services like databases (DynamoDB, Firestore), caches (Redis, Memcached), object storage (S3, GCS), or message queues. For short-lived state, temporary local storage (if available and appropriate) or passing state via function inputs/outputs.",
      "State management is not possible in serverless architectures.",
      "Serverless functions have built-in distributed state management."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Discuss the 'Strangler Fig' pattern for incrementally migrating a legacy monolithic application to microservices.",
    "options": [
      "A pattern where a fig tree strangles the legacy application server.",
      "The Strangler Fig pattern involves gradually replacing parts of a monolithic application with new microservices. An facade (e.g., API Gateway or reverse proxy) is placed in front of the monolith, initially routing all traffic to it. New functionality is built as microservices. The facade then incrementally routes specific requests to the new microservices, 'strangling' the monolith over time until it can be decommissioned.",
      "A pattern for quickly cutting over from monolith to microservices.",
      "A way to entangle microservices with the legacy monolith."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "What is the difference between 'authentication' and 'authorization'? Provide examples in a backend context.",
    "options": [
      "Authentication grants access, authorization verifies identity.",
      "Authentication: Verifying who a user or service is (identity). E.g., validating username/password, checking a JWT signature. Authorization: Determining what an authenticated user or service is allowed to do (permissions). E.g., checking if a user has 'admin' role to access an admin endpoint, or if a service has permission to read specific data.",
      "They are interchangeable terms for security access.",
      "Authorization happens before authentication."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Explain how a 'Rate Limiter' works and different algorithms used (e.g., Token Bucket, Leaky Bucket, Fixed Window, Sliding Window).",
    "options": [
      "Rate limiters only limit the speed of data, not request count.",
      "A rate limiter controls the rate of requests sent or received by a network interface controller. Token Bucket: Tokens added at fixed rate, requests consume tokens; allows bursts. Leaky Bucket: Requests added to queue, processed at fixed rate; smooths traffic. Fixed Window: Counts requests in fixed time window. Sliding Window: More accurate than fixed, counts requests in a continuously sliding time window. Used to prevent abuse/overload.",
      "Token Bucket is for security tokens, Leaky Bucket for data leaks.",
      "All algorithms work by simply counting requests per second."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "What are 'WebAssembly (Wasm)' and 'WASI (WebAssembly System Interface)' and how might they impact backend development?",
    "options": [
      "Wasm is a JavaScript framework, WASI is its interface to the OS.",
      "Wasm is a binary instruction format for a stack-based VM, allowing high-performance code (from C++, Rust, etc.) to run in browsers and on servers. WASI provides a standardized system interface for Wasm outside the browser (e.g., file access, networking), enabling Wasm to be a more portable and secure runtime for backend services, serverless functions, and plugins, potentially offering better performance and sandboxing than traditional containers for some workloads.",
      "Wasm is only for frontend; WASI allows it to call backend APIs.",
      "WASI is a WebAssembly-based operating system."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Describe different data replication strategies for databases (e.g., master-slave, multi-master, synchronous, asynchronous) and their trade-offs.",
    "options": [
      "Master-slave is for one master, multi-master for many; synchronous is always better.",
      "Master-Slave: Writes to master, reads from slaves (consistency lag). Multi-Master: Writes to any master, conflicts need resolution (complex). Synchronous: Write ack'd after all replicas confirm (strong consistency, high latency). Asynchronous: Write ack'd before all replicas confirm (low latency, potential data loss on master fail, eventual consistency). Trade-offs: consistency, availability, latency, complexity, write/read scalability.",
      "Synchronous replication has lower latency than asynchronous.",
      "Multi-master replication is simpler to manage than master-slave."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "What is 'polyglot programming' in the context of a microservices architecture?",
    "options": [
      "Using multiple spoken languages in API documentation.",
      "The practice of using different programming languages, frameworks, and data stores for different microservices within the same application, choosing the best technology for each service's specific requirements and team expertise, rather than a one-size-fits-all approach for the entire system.",
      "A programming language that supports multiple paradigms (like procedural, OO, functional).",
      "A system where microservices automatically translate between different programming languages."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "Explain 'Schema Evolution' in databases and message queues. What are common strategies (e.g., backward/forward compatibility) and challenges?",
    "options": [
      "Schema evolution means the database schema evolves naturally without changes.",
      "Schema evolution is managing changes to data schemas (database tables, message formats) over time as application requirements change. Strategies: Backward compatibility (new version can read old data), Forward compatibility (old version can read new data, often by ignoring new fields). Challenges: Ensuring compatibility between different service versions, data migration, coordinating updates, avoiding breaking changes.",
      "Backward compatibility means old code can read new schema; forward means new code reads old.",
      "Schema evolution is only a concern for SQL databases, not NoSQL or message queues."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  },
  {
    "question": "What is a 'distributed consensus algorithm' like Paxos or Raft, and why is it important for distributed systems?",
    "options": [
      "An algorithm for reaching social consensus in a distributed team.",
      "Distributed consensus algorithms enable a group of distributed servers to agree on a single value or sequence of operations, even in the presence of failures (e.g., server crashes, network partitions). This is crucial for building fault-tolerant distributed systems that need to maintain a consistent state, such as replicated databases, distributed lock managers, or leader election.",
      "Paxos is for peer-to-peer, Raft is for client-server.",
      "These algorithms ensure all nodes have identical hardware."
    ],
    "answer": 1,
    "category": "Backend",
    "difficulty": 4
  }
]