[
{
    "question": "Which sorting algorithm has a worst-case time complexity of O(n²)?",
    "options": ["Merge Sort", "Quick Sort", "Bubble Sort", "Heap Sort"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "What is the primary requirement for an array to be suitable for Binary Search?",
    "options": ["It must contain unique elements", "It must be sorted", "It must have an even number of elements", "It must be stored in contiguous memory"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "Which graph traversal algorithm explores as far as possible along each branch before backtracking?",
    "options": ["Breadth-First Search (BFS)", "Depth-First Search (DFS)", "Dijkstra's Algorithm", "Prim's Algorithm"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "What is the time complexity of finding an element in a hash table, on average, assuming good hash function and collision resolution?",
    "options": ["O(n)", "O(log n)", "O(1)", "O(n log n)"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "Which of these algorithms is a 'greedy' algorithm?",
    "options": ["Merge Sort", "Dijkstra's Algorithm (for SSSP)", "Bellman-Ford Algorithm", "Floyd-Warshall Algorithm"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "What does 'LIFO' behavior, often implemented by a Stack, stand for?",
    "options": ["Last In First Out", "Longest In First Out", "Lightest In First Out", "Least Important First Out"],
    "answer": 0,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "A 'stable' sorting algorithm maintains the relative order of records with equal keys. Which of these is NOT always stable?",
    "options": ["Insertion Sort", "Merge Sort", "Bubble Sort", "Quick Sort (standard implementations)"],
    "answer": 3,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "What problem does Kruskal's algorithm solve?",
    "options": ["Single Source Shortest Path", "All Pairs Shortest Path", "Minimum Spanning Tree", "Maximum Flow"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "The 'Divide and Conquer' paradigm involves which of these steps?",
    "options": ["Memoization, Tabulation, Optimal Substructure", "Greedy Choice, Iteration, Final Solution", "Divide, Conquer, Combine", "Explore, Backtrack, Prune"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "What is the best-case time complexity of Insertion Sort?",
    "options": ["O(n log n)", "O(n)", "O(n²)", "O(1)"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "Which data structure is typically used by Breadth-First Search (BFS) to keep track of nodes to visit?",
    "options": ["Stack", "Queue", "Priority Queue", "Hash Table"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "The notation O(n log n) implies that the algorithm's runtime grows:",
    "options": ["Linearly with input size", "Quadratically with input size", "Faster than linear but slower than quadratic", "Logarithmically with input size"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "What is the main purpose of a heuristic function in algorithms like A* search?",
    "options": ["To guarantee finding the absolute shortest path", "To ensure the algorithm terminates", "To guide the search towards the goal more efficiently", "To store visited states"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "Which algorithm is typically used to find the shortest paths between all pairs of vertices in a weighted graph?",
    "options": ["Dijkstra's Algorithm", "Prim's Algorithm", "Floyd-Warshall Algorithm", "Bellman-Ford Algorithm"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "What is the space complexity of a typical recursive Fibonacci implementation (without memoization)?",
    "options": ["O(1)", "O(n)", "O(n^2)", "O(2^n)"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "Topological sort can be applied to which type of graph?",
    "options": ["Any undirected graph", "Any directed graph", "Directed Acyclic Graph (DAG)", "Complete graph"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "Which complexity class contains problems solvable by a deterministic Turing machine in polynomial time?",
    "options": ["NP", "P", "NP-Hard", "PSPACE"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "What is the significance of an algorithm being 'in-place'?",
    "options": ["It requires constant extra space", "It processes input in real-time", "It modifies the input directly without using significant extra memory", "It runs in linear time"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "Which of the following is a characteristic of a queue data structure?",
    "options": ["Last In, First Out", "First In, First Out", "First In, Last Out", "Last In, Last Out"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "What is the purpose of a priority queue in algorithms like Dijkstra's?",
    "options": ["To store nodes in random order", "To maintain nodes sorted by a priority value", "To ensure constant time access to all elements", "To perform depth-first traversal"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "Which of these is a property of a binary search tree (BST)?",
    "options": ["All nodes have exactly two children", "Left subtree nodes are less than the root, right subtree nodes are greater", "It is always balanced", "It allows duplicate keys by default"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "What does the term 'recursion' refer to in algorithms?",
    "options": ["Iterating over a loop multiple times", "A function calling itself to solve smaller instances of the same problem", "Using multiple threads to solve a problem", "Reversing the input data"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "Which algorithm is used to detect cycles in an undirected graph efficiently?",
    "options": ["Floyd-Warshall", "Union-Find", "Topological Sort", "A* Search"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "What is the main advantage of using a hash table for lookups?",
    "options": ["Guaranteed sorted order", "Constant average-case time complexity", "Minimal memory usage", "Inherent support for range queries"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "Which of these sorting algorithms is comparison-based?",
    "options": ["Radix Sort", "Counting Sort", "Bucket Sort", "Quick Sort"],
    "answer": 3,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "What is the primary goal of Prim's algorithm?",
    "options": ["Shortest path finding", "Minimum spanning tree construction", "Cycle detection", "Max flow computation"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "What does it mean for an algorithm to be 'deterministic'?",
    "options": ["It uses randomization to make decisions", "It always produces the same output for a given input", "It runs in constant time", "It requires external input during execution"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "Which data structure is used to implement a LIFO structure?",
    "options": ["Queue", "Stack", "Heap", "Array"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "What is the worst-case time complexity of Selection Sort?",
    "options": ["O(n log n)", "O(n)", "O(n²)", "O(1)"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "Which of these algorithms uses a divide-and-conquer strategy?",
    "options": ["Bubble Sort", "Merge Sort", "Insertion Sort", "Selection Sort"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "What is the purpose of the 'pivot' in Quick Sort?",
    "options": ["To store the largest element", "To partition the array into two subarrays", "To merge sorted subarrays", "To track the smallest element"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "Which of these is NOT a property of a min-heap?",
    "options": ["The smallest element is at the root", "Every node's key is less than or equal to its children's keys", "It is a complete binary tree", "It is always balanced"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "What is the significance of an AVL tree?",
    "options": ["It ensures O(1) lookup time", "It is a self-balancing binary search tree", "It supports duplicate keys natively", "It is used for graph traversal"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 1
},
{
    "question": "Which algorithm is used for finding the longest path in a Directed Acyclic Graph (DAG)?",
    "options": ["Dijkstra's Algorithm", "Bellman-Ford", "Topological Sort with Dynamic Programming", "Floyd-Warshall"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "What is the main advantage of Merge Sort over Quick Sort in the worst-case scenario?",
    "options": ["Better average-case performance", "Lower space complexity", "Guaranteed O(n log n) time complexity", "Simpler implementation"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "Dijkstra's algorithm for single-source shortest paths may produce incorrect results if the graph contains:",
    "options": ["Cycles", "Negative weight edges", "Multiple edges between two vertices", "Disconnected components"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "The 0/1 Knapsack problem, where items cannot be divided, is classically solved using which algorithmic paradigm?",
    "options": ["Greedy Algorithm", "Divide and Conquer", "Dynamic Programming", "Backtracking"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "What are the two key properties that a problem must exhibit for dynamic programming to be an effective solution strategy?",
    "options": ["Greedy choice and optimal substructure", "Overlapping subproblems and optimal substructure", "Independent subproblems and memoization", "Linear ordering and tail recursion"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "In Kruskal's algorithm for finding a Minimum Spanning Tree, which data structure is commonly used to efficiently check if adding an edge forms a cycle?",
    "options": ["Priority Queue", "Stack", "Adjacency List", "Disjoint Set Union (Union-Find)"],
    "answer": 3,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "What is the primary difference in the approach between Prim's and Kruskal's algorithms for MST?",
    "options": ["Prim's builds the MST by adding vertices; Kruskal's by adding edges.", "Kruskal's only works on dense graphs; Prim's on sparse.", "Prim's is greedy; Kruskal's is dynamic programming.", "Prim's handles negative edges; Kruskal's does not."],
    "answer": 0,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "The Bellman-Ford algorithm can detect negative cycles in a graph. How does it typically do this?",
    "options": ["By checking if any edge can still be relaxed after V-1 iterations", "By using a depth-first search on the residual graph", "By comparing path costs to a heuristic", "By counting the number of positive edges"],
    "answer": 0,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "What is 'memoization'?",
    "options": ["A bottom-up dynamic programming technique", "A top-down dynamic programming technique storing results of subproblems", "A sorting algorithm based on memory addresses", "A data compression technique"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "Which of the following is an example of a problem where a greedy approach yields an optimal solution?",
    "options": ["0/1 Knapsack Problem", "Traveling Salesperson Problem", "Activity Selection Problem", "Longest Common Subsequence"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "The worst-case time complexity for Quick Sort occurs when:",
    "options": ["The pivot chosen is always the median element", "The input array is already sorted or reverse sorted (with bad pivot selection)", "The input array contains many duplicate elements", "The input array size is a power of two"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "What does the 'P' in 'P vs NP' stand for?",
    "options": ["Probabilistic", "Polynomial", "Parallel", "Provable"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "Which of these string searching algorithms preprocesses the pattern to create a 'failure function' or 'LPS array'?",
    "options": ["Naive string search", "Rabin-Karp algorithm", "Knuth-Morris-Pratt (KMP) algorithm", "Boyer-Moore algorithm"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "What is the primary goal of Huffman coding?",
    "options": ["Error detection and correction", "Lossless data compression", "Encrypting data securely", "Sorting data efficiently"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "Backtracking algorithms are often used for solving:",
    "options": ["Optimization problems with continuous variables", "Problems that can be broken into independent subproblems", "Constraint satisfaction problems", "Problems requiring shortest path computations"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "What is the time complexity for building a binary heap from an unsorted array of N elements using the standard bottom-up approach (heapify)?",
    "options": ["O(N log N)", "O(N)", "O(log N)", "O(N^2)"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "An 'online algorithm' is one that:",
    "options": ["Requires an internet connection to run", "Processes its input piece-by-piece without knowledge of future input", "Has its source code publicly available", "Is always more efficient than offline algorithms"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "What type of data structure is implicitly formed by recursive calls in Depth First Search?",
    "options": ["Queue", "Heap", "Stack", "Linked List"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "The Master Theorem is a tool for analyzing the complexity of:",
    "options": ["Greedy algorithms", "Iterative algorithms", "Divide and conquer recurrence relations", "Dynamic programming table constructions"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "Which sorting algorithm is adaptive, meaning its performance improves if the input is partially sorted?",
    "options": ["Heap Sort", "Selection Sort", "Insertion Sort", "Standard Merge Sort"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "What is the significance of a Red-Black Tree?",
    "options": ["It ensures O(1) insertion time", "It is a self-balancing binary search tree with guaranteed logarithmic height", "It is used for graph traversal", "It supports only integer keys"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "Which algorithm is used to compute the transitive closure of a graph?",
    "options": ["Dijkstra's Algorithm", "Floyd-Warshall Algorithm", "Kruskal's Algorithm", "A* Search"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "What is the purpose of a trie data structure?",
    "options": ["To store key-value pairs with O(1) lookup", "To store strings for efficient prefix-based searches", "To maintain a balanced binary tree", "To compute shortest paths"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "Which of these algorithms is used for finding the maximum flow in a flow network?",
    "options": ["Prim's Algorithm", "Kruskal's Algorithm", "Ford-Fulkerson Algorithm", "Bellman-Ford Algorithm"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "What is the time complexity of accessing an element in a balanced binary search tree?",
    "options": ["O(1)", "O(log n)", "O(n)", "O(n log n)"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "Which of these problems can be solved using a greedy approach?",
    "options": ["Knapsack Problem (fractional)", "Knapsack Problem (0/1)", "Traveling Salesperson Problem", "Longest Common Subsequence"],
    "answer": 0,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "What is the role of a 'hash function' in a hash table?",
    "options": ["To sort the keys", "To map keys to indices in the table", "To balance the tree", "To compress the data"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "Which of these sorting algorithms has the best average-case time complexity?",
    "options": ["Bubble Sort", "Selection Sort", "Quick Sort", "Insertion Sort"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "What is the significance of the 'amortized' time complexity?",
    "options": ["The worst-case time for a single operation", "The average time per operation over a sequence of operations", "The best-case time for a single operation", "The total time for all operations"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "Which data structure is best suited for implementing a priority queue?",
    "options": ["Array", "Linked List", "Binary Heap", "Stack"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "What is the time complexity of deleting the minimum element from a binary min-heap?",
    "options": ["O(1)", "O(log n)", "O(n)", "O(n log n)"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "Which algorithm is used to find the strongly connected components in a directed graph?",
    "options": ["Dijkstra's Algorithm", "Kruskal's Algorithm", "Kosaraju's Algorithm", "Prim's Algorithm"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "What does it mean for a graph to be bipartite?",
    "options": ["It has no cycles", "Its vertices can be divided into two disjoint sets such that every edge connects vertices in different sets", "All vertices have the same degree", "It is a complete graph"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "Which of these is a non-comparison-based sorting algorithm?",
    "options": ["Quick Sort", "Merge Sort", "Radix Sort", "Heap Sort"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "What is the significance of the 'greedy choice property' in greedy algorithms?",
    "options": ["A globally optimal solution can be reached by making locally optimal choices", "The algorithm always picks the smallest element", "The algorithm requires backtracking", "The solution is computed iteratively without recursion"],
    "answer": 0,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "Which of these problems can be solved using dynamic programming?",
    "options": ["Shortest Path in a DAG", "Minimum Spanning Tree", "Activity Selection", "Fractional Knapsack"],
    "answer": 0,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "What is the purpose of a bloom filter?",
    "options": ["To store exact key-value pairs", "To test whether an element is likely in a set with possible false positives", "To sort a list of elements", "To compress data losslessly"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "Which of these algorithms is used for string matching with preprocessing of the text?",
    "options": ["KMP Algorithm", "Rabin-Karp Algorithm", "Boyer-Moore Algorithm", "Suffix Array"],
    "answer": 3,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "What is the time complexity of performing a single insertion in a balanced binary search tree?",
    "options": ["O(1)", "O(log n)", "O(n)", "O(n log n)"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "Which of these algorithms is NOT suitable for graphs with negative weight edges?",
    "options": ["Bellman-Ford", "Dijkstra's Algorithm", "Floyd-Warshall", "Johnson's Algorithm"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "What is the primary purpose of the A* search algorithm?",
    "options": ["To find the minimum spanning tree", "To find the shortest path in a weighted graph with a heuristic", "To sort a list of elements", "To detect cycles in a graph"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "Which data structure is used in the implementation of a topological sort?",
    "options": ["Heap", "Stack", "Queue", "Hash Table"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "What is the space complexity of Merge Sort?",
    "options": ["O(1)", "O(log n)", "O(n)", "O(n log n)"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "Which of these problems is solved by the Hungarian Algorithm?",
    "options": ["Maximum Flow", "Minimum Spanning Tree", "Assignment Problem", "Shortest Path"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "What is the significance of a 'stable matching' in the context of the Stable Marriage Problem?",
    "options": ["No pair prefers each other over their assigned partners", "The matching is unique", "The matching minimizes total cost", "The matching is computed in linear time"],
    "answer": 0,
    "category": "Algorithms",
    "difficulty": 2
},
{
    "question": "If a problem is NP-Complete, it means:",
    "options": ["It can be solved in polynomial time", "It is in NP and is as hard as any problem in NP", "It is not in NP", "It has no known algorithm"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "The A* search algorithm is guaranteed to find the shortest path if its heuristic function h(n) is:",
    "options": ["Always 0", "Overestimating and consistent", "Admissible (never overestimates the cost to reach the goal)", "Monotonically increasing"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "What is the primary advantage of using a Fibonacci Heap in implementations of Dijkstra's or Prim's algorithm compared to a Binary Heap for dense graphs?",
    "options": ["Simpler implementation", "Better worst-case time complexity for the `decrease-key` operation", "Guaranteed O(1) extract-min operation", "Lower constant factors in practice for all operations"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "The Ford-Fulkerson method for maximum flow iteratively finds augmenting paths in what kind of graph?",
    "options": ["The original flow network", "A graph of only saturated edges", "The residual graph", "A bipartite matching graph"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "What is 'amortized analysis' in the context of algorithm complexity?",
    "options": ["Analyzing the average-case over all possible inputs", "Analyzing the worst-case cost of a sequence of operations, averaged per operation", "Analyzing algorithms that use randomization", "Analyzing the complexity for very small input sizes"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "Strassen's algorithm for matrix multiplication reduces the number of recursive multiplications from 8 to 7. This results in a time complexity of approximately:",
    "options": ["O(n^3)", "O(n^2.807)", "O(n^2.5)", "O(n^2 log n)"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "The Edit Distance (or Levenshtein distance) between two strings is commonly computed using:",
    "options": ["A greedy approach based on character matches", "Dynamic programming with a 2D table", "Suffix trees and LCA", "Hashing substrings"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "What is a 'Las Vegas' algorithm?",
    "options": ["An algorithm that always returns an answer, which may be incorrect with some probability.", "An algorithm whose running time is probabilistic, but always returns the correct answer.", "An algorithm specifically designed for problems with geometric components.", "An algorithm that uses gambling theory to find optimal solutions."],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "Tarjan's algorithm for finding Strongly Connected Components (SCCs) uses Depth First Search and maintains:",
    "options": ["A queue of unvisited nodes and their distances", "Discovery times and low-link values for each node", "A priority queue of edges sorted by weight", "A hash table of component IDs"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "What property does the 'optimal substructure' in dynamic programming refer to?",
    "options": ["The problem can be divided into independent subproblems.", "An optimal solution to the problem contains within it optimal solutions to subproblems.", "All subproblems must be of the same size.", "The solution can be found by making a series of locally optimal choices."],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "The Boyer-Moore string searching algorithm often achieves sub-linear average time complexity by using which heuristic(s)?",
    "options": ["Only the bad character heuristic", "Only the good suffix heuristic", "Both bad character and good suffix heuristics", "A rolling hash function"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "What is the primary limitation of Counting Sort?",
    "options": ["It is not stable.", "It has a high worst-case time complexity (O(n^2)).", "It is only efficient when the range of input values is not significantly larger than the number of items.", "It cannot sort negative numbers."],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "Which of these problems is NOT known to be NP-Complete?",
    "options": ["Traveling Salesperson Problem (TSP)", "Boolean Satisfiability (SAT)", "Vertex Cover", "Shortest Path in a DAG"],
    "answer": 3,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "Timsort, used in Python and Java for sorting, is a hybrid algorithm primarily combining:",
    "options": ["Quick Sort and Heap Sort", "Merge Sort and Insertion Sort", "Radix Sort and Bubble Sort", "Selection Sort and Merge Sort"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "The concept of 'flow conservation' in a flow network states that:",
    "options": ["The flow into any node (except source/sink) must equal the flow out of it.", "The capacity of any edge cannot be exceeded.", "The total flow out of the source equals the total flow into the sink.", "Augmenting paths must always increase total flow."],
    "answer": 0,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "What is the significance of a 'minimum cut' in a flow network?",
    "options": ["It is the smallest set of edges whose removal disconnects the source from the sink.", "It is the shortest path between source and sink.", "It is the minimum weight edge in the graph.", "It is the smallest set of vertices that disconnects the graph."],
    "answer": 0,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "Which of these algorithms is used for solving the Longest Common Subsequence problem?",
    "options": ["Greedy Algorithm", "Dynamic Programming", "Divide and Conquer", "Backtracking"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "What is the time complexity of the Fast Fourier Transform (FFT) algorithm?",
    "options": ["O(n)", "O(n log n)", "O(n^2)", "O(log n)"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "Which data structure is used in the implementation of the Bipartite Matching problem?",
    "options": ["Heap", "Stack", "Queue", "Adjacency List"],
    "answer": 3,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "What is the significance of the 'cut property' in Minimum Spanning Tree algorithms?",
    "options": ["The minimum weight edge crossing any cut belongs to some MST.", "All edges in an MST must have the same weight.", "The MST must contain all vertices.", "The MST is unique for any graph."],
    "answer": 0,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "Which of these is a characteristic of a Monte Carlo algorithm?",
    "options": ["It always produces the correct answer with a fixed runtime.", "It may produce incorrect results with some probability but runs in polynomial time.", "It is used only for sorting problems.", "It requires exponential time to guarantee correctness."],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "What is the time complexity of the Longest Increasing Subsequence problem using dynamic programming?",
    "options": ["O(n)", "O(n log n)", "O(n^2)", "O(2^n)"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "Which algorithm is used to find the articulation points in an undirected graph?",
    "options": ["Dijkstra's Algorithm", "Tarjan's Algorithm", "Kruskal's Algorithm", "Floyd-Warshall Algorithm"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "What is the significance of a 'suffix tree' in string processing?",
    "options": ["It stores all prefixes of a string for quick lookup.", "It stores all suffixes of a string in a compressed trie for efficient pattern matching.", "It is used to sort strings lexicographically.", "It computes the longest common substring in linear time."],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "Which of these problems can be solved using the Hungarian Algorithm?",
    "options": ["Shortest Path", "Maximum Flow", "Bipartite Matching", "Minimum Spanning Tree"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "What is the time complexity of the standard implementation of the Floyd-Warshall algorithm?",
    "options": ["O(V^2)", "O(V^3)", "O(V log V)", "O(V + E)"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "Which of these is a property of a B-Tree?",
    "options": ["All nodes have exactly two children.", "It is a self-balancing tree optimized for disk access.", "It supports O(1) lookup time.", "It is used only for graph problems."],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "What is the significance of the 'triangle inequality' in graph algorithms?",
    "options": ["The sum of any two sides of a triangle is greater than the third side.", "The shortest path between two nodes is always a straight line.", "The distance between two nodes via a third node is at least as large as the direct distance.", "All edges in a graph must have equal weights."],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "Which algorithm is used to find the convex hull of a set of points in 2D space?",
    "options": ["Graham's Scan", "Dijkstra's Algorithm", "Kruskal's Algorithm", "Bellman-Ford Algorithm"],
    "answer": 0,
    "category": "Algorithms",
    "difficulty": 3
},
{
    "question": "What is the time complexity of the Union-Find data structure operations (find and union) using path compression and union by rank/size heuristics?",
    "options": ["O(log N) amortized", "O(1) amortized", "O(N) amortized", "Nearly O(1), more precisely O(α(N)) amortized (Inverse Ackermann)"],
    "answer": 3,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "The Edmonds-Karp algorithm is an implementation of Ford-Fulkerson that guarantees polynomial time by choosing augmenting paths that are:",
    "options": ["Longest in terms of capacity", "Shortest in terms of number of edges (found via BFS)", "Randomly selected", "Paths that use edges with minimum residual capacity"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "What is an 'approximation algorithm' primarily used for?",
    "options": ["Finding exact solutions to P problems faster", "Finding near-optimal solutions for NP-Hard problems in polynomial time", "Verifying solutions for NP problems", "Solving problems with continuous input spaces"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "A 'reduction' in complexity theory (e.g., A ≤p B) implies that:",
    "options": ["Problem A is simpler than problem B.", "If problem B can be solved in polynomial time, then problem A can also be solved in polynomial time.", "Problem A and B are equivalent.", "Problem B uses problem A as a subroutine."],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "Suffix Arrays and Suffix Trees are advanced data structures primarily used for efficient:",
    "options": ["Graph traversal and shortest path computations", "Geometric queries and range searching", "String processing tasks like pattern matching and finding repeated substrings", "Network flow optimization"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "What does the term 'competitive analysis' refer to in the context of online algorithms?",
    "options": ["Comparing the algorithm's performance against other online algorithms", "Comparing the algorithm's performance against the optimal offline algorithm", "Analyzing the algorithm's performance in a multi-agent system", "The speed at which an algorithm can be implemented"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "The problem of finding the Closest Pair of Points in a 2D plane can be solved in O(n log n) time using which algorithmic paradigm?",
    "options": ["Greedy approach", "Dynamic Programming", "Divide and Conquer", "Backtracking"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "What is a potential issue with the Rabin-Karp string matching algorithm if the hash function is poorly chosen or hash collisions are not handled properly?",
    "options": ["It may run in exponential time.", "It may miss some occurrences of the pattern.", "It may have many spurious hits, degrading performance to O(nm).", "It requires excessive preprocessing time."],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "Borůvka's algorithm for MST is notable because:",
    "options": ["It is simpler to implement than Prim's or Kruskal's for beginners.", "It is inherently parallelizable and forms the basis for some parallel MST algorithms.", "It has better worst-case complexity than Prim's or Kruskal's on all graph types.", "It only works on complete graphs."],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "In the context of P vs NP, if a problem is NP-Hard but not in NP (e.g., Halting Problem), what can be said about it?",
    "options": ["It is easier than NP-Complete problems.", "It is at least as hard as any NP problem, and cannot be verified in polynomial time.", "It can be solved in polynomial time if P=NP.", "It is solvable by a quantum computer in polynomial time."],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "A Fenwick Tree (Binary Indexed Tree) is primarily used for efficiently calculating:",
    "options": ["Shortest paths in a grid", "Minimum spanning trees", "Prefix sums (and thus range sums) in an array with point updates", "Convex hulls of point sets"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "What is the approximation ratio of Christofides algorithm for the Traveling Salesperson Problem (assuming triangle inequality)?",
    "options": ["2", "1.5", "log N", "No constant bound"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "The Z-algorithm for string matching computes a Z-array where Z[i] is the length of the longest substring starting at index i that is also a:",
    "options": ["Suffix of the pattern", "Prefix of the pattern", "Palindrome", "Repeated substring elsewhere in the text"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "What is the core idea behind 'linear programming relaxation' for solving integer programming problems?",
    "options": ["Simplifying constraints to be linear", "Ignoring integer constraints initially to solve a related LP problem", "Adding more variables to make the problem linear", "Using a linear approximation for the objective function"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "What is the time complexity of the Push-Relabel algorithm for maximum flow with a Fibonacci Heap?",
    "options": ["O(V^3)", "O(V^2 E)", "O(V E log V)", "O(V^2 log V)"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "Which data structure is used to efficiently support range minimum queries in a static array?",
    "options": ["Binary Search Tree", "Segment Tree", "Heap", "Trie"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "What is the significance of the 'KMP failure function' in string matching?",
    "options": ["It stores the length of the longest proper prefix that is also a suffix.", "It computes the hash of the pattern.", "It tracks mismatched characters.", "It stores all substrings of the pattern."],
    "answer": 0,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "Which algorithm is used to solve the All-Pairs Shortest Path problem in a graph with negative weight edges?",
    "options": ["Dijkstra's Algorithm", "Floyd-Warshall Algorithm", "Prim's Algorithm", "Kruskal's Algorithm"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "What is the time complexity of the Hopcroft-Karp algorithm for bipartite matching?",
    "options": ["O(V + E)", "O(V E)", "O(V^0.5 E)", "O(V^2)"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "Which of these is a characteristic of a 'persistent' data structure?",
    "options": ["It allows updates without modifying the original structure.", "It is optimized for disk storage.", "It guarantees O(1) access time.", "It is used only for graph algorithms."],
    "answer": 0,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "What is the significance of the 'suffix array' in string processing?",
    "options": ["It stores all prefixes of a string.", "It stores the starting positions of all suffixes in sorted order.", "It computes the longest common prefix in linear time.", "It is used for graph traversal."],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "Which algorithm is used to find the k-th smallest element in an unsorted array in linear time on average?",
    "options": ["Quickselect", "Heap Sort", "Merge Sort", "Counting Sort"],
    "answer": 0,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "What is the time complexity of the Dinic's algorithm for maximum flow with unit capacities?",
    "options": ["O(V^2 E)", "O(V E^2)", "O(E min(V^0.5, E^0.5))", "O(V^3)"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "Which of these is a property of a 'randomized' algorithm?",
    "options": ["It always produces the same output for a given input.", "It uses random choices to influence its execution.", "It requires a fixed number of iterations.", "It is only used for sorting problems."],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "What is the significance of the 'LCA' (Lowest Common Ancestor) in tree algorithms?",
    "options": ["It finds the shortest path between two nodes in a tree.", "It computes the node that is the closest common ancestor of two nodes.", "It balances the tree.", "It computes the maximum flow in a tree."],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "Which data structure is used for efficient range sum queries and updates in a dynamic array?",
    "options": ["Binary Search Tree", "Segment Tree", "Heap", "Trie"],
    "answer": 1,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "What is the time complexity of the Coppersmith-Winograd algorithm for matrix multiplication?",
    "options": ["O(n^3)", "O(n^2.807)", "O(n^2.376)", "O(n^2)"],
    "answer": 2,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "Which algorithm is used to solve the Stable Marriage Problem efficiently?",
    "options": ["Gale-Shapley Algorithm", "Hungarian Algorithm", "Ford-Fulkerson Algorithm", "Kruskal's Algorithm"],
    "answer": 0,
    "category": "Algorithms",
    "difficulty": 4
},
{
    "question": "What is the significance of the 'heavy-light decomposition' in tree algorithms?",
    "options": ["It divides a tree into paths to optimize queries and updates.", "It balances the tree for O(1) access.", "It computes the shortest path in a tree.", "It finds the minimum spanning tree."],
    "answer": 0,
    "category": "Algorithms",
    "difficulty": 4
}
]
