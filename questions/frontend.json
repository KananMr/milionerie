[
  {
    "question": "What are the three core technologies of the World Wide Web that form the basis of most frontend development?",
    "options": ["Java, Python, SQL", "HTML, CSS, JavaScript", "C#, Ruby, PHP", "Flash, Silverlight, Java Applets"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is HTML primarily used for?",
    "options": ["Styling web pages", "Adding interactivity to web pages", "Defining the structure and content of web pages", "Server-side logic"],
    "answer": 2,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is CSS primarily used for?",
    "options": ["Defining the structure of web pages", "Describing the presentation and styling (e.g., layout, colors, fonts) of web pages written in HTML or XML", "Client-side scripting", "Database management"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is JavaScript primarily used for in frontend development?",
    "options": ["Defining the content structure", "Styling web pages", "Adding interactivity, dynamic content, and client-side logic to web pages", "Server-side processing only"],
    "answer": 2,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "Which HTML tag is used to define the main heading of a page?",
    "options": ["<heading>", "<h1>", "<head>", "<title>"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "Which HTML tag is used to create a hyperlink?",
    "options": ["<link>", "<href>", "<a>", "<navigate>"],
    "answer": 2,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "Which HTML attribute specifies the URL of the page the link goes to?",
    "options": ["src", "link", "url", "href"],
    "answer": 3,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "Which HTML tag is used to embed an image?",
    "options": ["<picture>", "<image>", "<img>", "<graphic>"],
    "answer": 2,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "Which HTML attribute specifies the path to the image to be displayed?",
    "options": ["href", "link", "src", "path"],
    "answer": 2,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "Which HTML tag is used to create an unordered (bulleted) list?",
    "options": ["<ol>", "<li>", "<list>", "<ul>"],
    "answer": 3,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "Which HTML tag is used to create an ordered (numbered) list?",
    "options": ["<ul>", "<ol>", "<numlist>", "<order>"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "Which HTML tag defines a list item within an ordered or unordered list?",
    "options": ["<item>", "<dt>", "<li>", "<dd>"],
    "answer": 2,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "Which HTML tag is used to define a paragraph?",
    "options": ["<paragraph>", "<text>", "<p>", "<para>"],
    "answer": 2,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What does a `<div>` element in HTML represent?",
    "options": ["A specific piece of text", "An inline division or section", "A generic container or division for flow content, often used for grouping and styling with CSS or manipulating with JavaScript", "A clickable button"],
    "answer": 2,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What does a `<span>` element in HTML represent?",
    "options": ["A block-level container", "A generic inline container for phrasing content, often used to group and style a part of text or a document", "A line break", "A horizontal rule"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "In CSS, how do you select an HTML element with the ID 'main-content'?",
    "options": [".main-content", "main-content", "*main-content", "#main-content"],
    "answer": 3,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "In CSS, how do you select all HTML elements with the class 'highlight'?",
    "options": ["#highlight", "highlight", ".highlight", "*highlight"],
    "answer": 2,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "Which CSS property is used to change the text color of an element?",
    "options": ["font-color", "text-color", "color", "text-style"],
    "answer": 2,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "Which CSS property is used to change the background color of an element?",
    "options": ["bgcolor", "background-color", "color-background", "element-background"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "Which CSS property is used to control the font size of text?",
    "options": ["text-size", "font-style", "font-size", "size-font"],
    "answer": 2,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "The CSS Box Model describes the rectangular boxes generated for elements. It consists of (from innermost to outermost):",
    "options": ["Margin, Border, Padding, Content", "Content, Padding, Border, Margin", "Padding, Content, Margin, Border", "Border, Margin, Content, Padding"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "Which CSS property is used to set the space between the content of an element and its border?",
    "options": ["margin", "spacing", "border-spacing", "padding"],
    "answer": 3,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "Which CSS property is used to set the space around an element, outside its border?",
    "options": ["padding", "outline", "margin", "spacing-outer"],
    "answer": 2,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "How do you include an external CSS file named `style.css` in an HTML document?",
    "options": ["<style src=\"style.css\">", "<css link=\"style.css\">", "<script type=\"text/css\" src=\"style.css\"></script>", "<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">"],
    "answer": 3,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "How do you include JavaScript code in an HTML document, typically before the closing `</body>` tag?",
    "options": ["<javascript src=\"script.js\"></javascript>", "<script file=\"script.js\"></script>", "<script type=\"text/javascript\" src=\"script.js\"></script>", "<link type=\"text/javascript\" href=\"script.js\">"],
    "answer": 2,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "Which JavaScript keyword is used to declare a variable that can be reassigned and is block-scoped (ES6+)?",
    "options": ["var", "const", "let", "static"],
    "answer": 2,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "Which JavaScript keyword is used to declare a variable whose value cannot be reassigned (a constant, ES6+)?",
    "options": ["let", "var", "static", "const"],
    "answer": 3,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "How do you write a single-line comment in JavaScript?",
    "options": ["# comment", "/* comment */", "// comment", "<!-- comment -->"],
    "answer": 2,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the Document Object Model (DOM)?",
    "options": ["A model for managing domain names", "A programming interface for HTML and XML documents. It represents the page so that programs can change the document structure, style, and content.", "A type of object-oriented database", "A specification for document styling"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "Which JavaScript method is commonly used to select an HTML element by its ID?",
    "options": ["`document.getElementByName()`", "`document.querySelector()`", "`document.getElementsByClassName()`", "`document.getElementById()`"],
    "answer": 3,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "Which JavaScript method is commonly used to select the first HTML element that matches a specified CSS selector?",
    "options": ["`document.getElementBySelector()`", "`document.querySelectorAll()`", "`document.select()`", "`document.querySelector()`"],
    "answer": 3,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "How can you change the text content of an HTML element with ID `myElement` using JavaScript?",
    "options": ["`document.getElementById('myElement').text = 'New Text';`", "`document.getElementById('myElement').innerHTML = 'New Text';` (or `.textContent`)", "`myElement.setText('New Text');`", "`changeText('myElement', 'New Text');`"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is an 'event' in JavaScript, in the context of browser interaction?",
    "options": ["A scheduled task", "An action or occurrence recognized by software that may be handled by the software (e.g., a mouse click, a key press, a page load, a form submission).", "A type of JavaScript error", "A social gathering for developers"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "How do you add an event listener to an HTML button with ID `myButton` to execute a function `handleClick` when clicked?",
    "options": ["`myButton.onClick = handleClick;`", "`document.getElementById('myButton').addEventListener('click', handleClick);`", "`myButton.listen('click', handleClick);`", "`attachEvent(myButton, 'onclick', handleClick);` (older IE)"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What does AJAX stand for?",
    "options": ["Asynchronous JavaScript and XML", "Advanced Java and XML", "Automated JavaScript and XHTML", "Asynchronous JSON and XML"],
    "answer": 0,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is AJAX primarily used for in frontend development?",
    "options": ["To animate XML documents", "To make asynchronous HTTP requests to a server to send or retrieve data without requiring a full page reload, allowing for dynamic updates to web page content.", "To parse XML data synchronously", "A JavaScript library for XML manipulation"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "The `fetch` API in modern JavaScript is used for:",
    "options": ["Fetching files from the local file system only", "Making network requests (e.g., HTTP requests to APIs), providing a more modern and flexible alternative to `XMLHttpRequest`.", "Fetching user data from browser storage", "Fetching elements from the DOM"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "A `Promise` in JavaScript (ES6+) is an object representing:",
    "options": ["A guarantee of successful code execution", "The eventual completion (or failure) of an asynchronous operation and its resulting value.", "A placeholder for a future JavaScript version feature", "A special type of callback function"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "Which method is typically used to handle the successful resolution of a Promise?",
    "options": [".error()", ".catch()", ".then() (with a success callback)", ".finally()"],
    "answer": 2,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "Which method is typically used to handle the rejection (failure) of a Promise?",
    "options": [".success()", ".then() (with a success callback only)", ".catch() (or as the second argument to .then())", ".done()"],
    "answer": 2,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "The `async` keyword before a JavaScript function declaration (ES2017+) indicates that:",
    "options": ["The function will execute synchronously but faster", "The function will always return a Promise, and allows the use of the `await` keyword inside it to pause execution until a Promise settles.", "The function is part of an asynchronous module definition", "The function can only be called by other async functions"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "The `await` keyword inside an `async` JavaScript function is used to:",
    "options": ["Force the async function to wait for a fixed duration", "Pause the execution of the `async` function until the Promise it is waiting for settles (resolves or rejects), and then resumes execution with the Promise's result (or throws the error).", "Mark a Promise as awaitable by other functions", "Immediately return the Promise object without waiting"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is responsive web design?",
    "options": ["Web design that responds quickly to user input", "An approach to web design that aims to make web pages render well on a variety of devices and window or screen sizes (e.g., desktops, tablets, phones) using techniques like flexible grids, fluid images, and CSS media queries.", "Designing websites that are very responsive to server requests", "A web design that uses a lot of JavaScript for responsiveness"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "CSS Media Queries are used to:",
    "options": ["Query media files on a server", "Apply different CSS styles based on characteristics of the device or viewport, such as its width, height, orientation, or resolution, enabling responsive web design.", "Embed media (audio/video) into a web page", "Optimize media files for different devices"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is CSS Flexbox (Flexible Box Layout Module)?",
    "options": ["A CSS module for creating flexible images", "A layout model designed for one-dimensional layout of items in a container (either as a row or a column), providing powerful alignment and distribution capabilities.", "A JavaScript library for flexible layouts", "A way to make CSS code more flexible"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is CSS Grid Layout?",
    "options": ["A CSS system for drawing grid lines on a page", "A two-dimensional layout system for CSS, allowing developers to define rows and columns to position and size items within a grid container.", "A JavaScript library for creating data grids", "A way to make images fit into a grid"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the `localStorage` object in browser JavaScript used for?",
    "options": ["Storing data that persists only for the current browser session", "Storing key-value pairs locally in the user's web browser with no expiration time, persisting even after the browser window is closed and reopened. Data is specific to the origin (protocol, domain, port).", "Accessing files on the user's local storage device", "Storing large binary data like videos"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the `sessionStorage` object in browser JavaScript used for?",
    "options": ["Storing data that persists indefinitely across browser sessions", "Storing key-value pairs locally in the user's web browser for the duration of a single browser session (i.e., until the tab or window is closed). Data is specific to the origin and the session.", "Managing server-side session data", "Storing session cookies only"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is a common use case for browser cookies?",
    "options": ["Storing large application assets", "Storing small pieces of data on the client-side, often used for session management (e.g., remembering a user is logged in), personalization, and tracking.", "Executing server-side code", "Styling web page elements"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "React, Angular, and Vue.js are popular:",
    "options": ["Backend programming languages", "JavaScript libraries/frameworks for building user interfaces and single-page applications", "CSS preprocessors", "Database management systems"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is a 'component' in the context of frameworks like React or Vue?",
    "options": ["A hardware component of the server", "A reusable, self-contained piece of the user interface that encapsulates its own structure (HTML/template), styling (CSS), and logic (JavaScript).", "A type of CSS class", "A backend service"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the 'virtual DOM' concept used by libraries like React?",
    "options": ["A DOM that exists only in virtual reality simulations", "An in-memory representation of the actual browser DOM. When state changes, the virtual DOM is updated, a 'diffing' algorithm compares it to the previous virtual DOM, and then only the necessary minimal changes are applied to the real browser DOM, improving performance.", "A DOM that is not visible to the user", "A simplified version of the DOM for mobile development"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is JSX (used with React)?",
    "options": ["A new version of JavaScript", "A syntax extension for JavaScript that allows writing HTML-like structures directly within JavaScript code, which is then typically transpiled into regular JavaScript function calls (e.g., `React.createElement()`).", "A JSON-based scripting language", "A templating engine for XML"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is a 'state' in a React component?",
    "options": ["The geographical state where the component is used", "An object that holds data specific to that component, which can change over time (e.g., due to user interaction). When a component's state changes, React typically re-renders the component.", "The current version of the React library", "The state of the browser (e.g., online/offline)"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What are 'props' (properties) in a React component?",
    "options": ["Internal state of the component", "Read-only data passed from a parent component to a child component to configure or customize the child component.", "CSS properties applied to the component", "Props used in a theatre play component"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is a 'Single-Page Application' (SPA)?",
    "options": ["An application that only has one HTML file in its entire source code", "A web application or website that interacts with the user by dynamically rewriting the current web page with new data from the server, instead of the browser loading entire new pages. This often provides a more fluid, desktop-like user experience.", "An application that can only be viewed on a single screen size", "A very simple application with only one core feature"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'routing' in the context of a SPA?",
    "options": ["Defining network routes for the application", "The process of navigating between different 'views' or 'pages' within the SPA based on the URL, without causing a full page reload from the server. Client-side routers manage this.", "Routing user input to different components", "Optimizing server routes for API calls"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is a CSS preprocessor like Sass or Less?",
    "options": ["A tool that processes CSS before it's sent to the browser for faster loading", "A scripting language that extends CSS with features like variables, nesting, mixins, functions, and inheritance, which are then compiled into standard CSS.", "A CSS linter to check for errors", "A library of pre-written CSS styles"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'transpiling' in JavaScript development (e.g., using Babel)?",
    "options": ["Translating JavaScript into a different programming language", "The process of converting source code written in one version of JavaScript (e.g., ES6+/modern JavaScript) into an older version of JavaScript (e.g., ES5) that is compatible with a wider range of browsers or environments.", "Compiling JavaScript directly to machine code", "Encrypting JavaScript code"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is a 'module bundler' like Webpack or Parcel used for in frontend development?",
    "options": ["Bundling multiple JavaScript developers into a team", "Processing and combining multiple JavaScript modules (and often other assets like CSS, images) into a smaller number of optimized files (bundles) for efficient loading in a web browser.", "A tool for managing software licenses for modules", "Bundling physical hardware modules for a frontend server"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'tree shaking' performed by module bundlers?",
    "options": ["A debugging technique involving shaking the monitor", "A dead code elimination process where unused exports from JavaScript modules (especially ES6 modules) are removed from the final bundle, reducing its size.", "A way to restructure the DOM tree", "A method for randomly selecting modules to include"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'code splitting' in the context of module bundlers?",
    "options": ["Splitting code into multiple lines for readability", "A technique where a module bundler creates multiple smaller bundle files that can be loaded on demand or in parallel, rather than a single large bundle. This can improve initial page load time by only loading the code necessary for the current view.", "Splitting source code files among different developers", "A way to divide code into functions and classes"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'lazy loading' in web development?",
    "options": ["A developer who loads code lazily", "A technique where resources (e.g., images, JavaScript modules, content sections) are loaded only when they are needed (e.g., when they scroll into view or are requested by user interaction), rather than loading everything upfront. This can improve initial page load performance.", "Loading resources very slowly to save bandwidth", "A feature that makes the website feel lazy and unresponsive"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What are 'semantic HTML' tags (e.g., `<article>`, `<nav>`, `<aside>`, `<footer>`)?",
    "options": ["HTML tags that have a specific visual style by default", "HTML tags that clearly describe their meaning or purpose in a human-readable and machine-readable way, improving accessibility, SEO, and code maintainability (e.g., `<nav>` for navigation links, `<article>` for self-contained content).", "HTML tags used for semantic analysis of text", "Tags that are only understood by search engines"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'web accessibility' (often abbreviated as a11y)?",
    "options": ["Making websites accessible only via a specific URL", "The inclusive practice of ensuring that websites, tools, and technologies are designed and developed so that people with disabilities can use them. This includes considerations for visual, auditory, motor, and cognitive impairments.", "Making web content accessible only to registered users", "The ability of a website to be accessed from any device"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What are ARIA (Accessible Rich Internet Applications) attributes used for?",
    "options": ["Styling rich internet applications", "A set of attributes that can be added to HTML elements to make web content and web applications more accessible to people with disabilities, especially when using assistive technologies (e.g., screen readers). They help define roles, states, and properties of UI components.", "Archiving rich internet application data", "ARIA is a JavaScript framework for accessibility"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the 'alt' attribute on an `<img>` tag used for?",
    "options": ["To provide an alternative image if the primary one fails to load", "To provide alternative text for an image, which is displayed if the image cannot be loaded and is read by screen readers for visually impaired users. It's important for accessibility and SEO.", "To specify the alignment of the image", "To link the image to an alternative page"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'SEO' (Search Engine Optimization)?",
    "options": ["Secure Execution Only for web applications", "The process of improving the quality and quantity of website traffic to a website or a web page from search engines, often by optimizing content, structure, and technical aspects of the site to rank higher in search results.", "A type of web server optimization", "Software for Encrypting Outputs"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is a 'meta tag' in HTML, often found in the `<head>` section?",
    "options": ["A tag for storing metadata about the user's computer", "An HTML element that provides metadata about the HTML document, such as character set, page description, keywords, author, and viewport settings. This metadata is not displayed on the page itself but can be used by browsers, search engines, and other web services.", "A tag for creating meta-links between pages", "A tag that is more important than other tags"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "The viewport meta tag (`<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">`) is important for:",
    "options": ["Setting the physical width of the user's display", "Controlling the layout and scaling of a web page on mobile devices and other viewports, ensuring it renders correctly and is responsive.", "Defining the viewport for video content only", "Specifying the version of the HTML viewport standard"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'Cross-Origin Resource Sharing' (CORS)?",
    "options": ["A way to share CSS resources across origins", "A mechanism that uses additional HTTP headers to tell browsers to give a web application running at one origin (domain) permission to access selected resources from a server at a different origin. By default, browsers restrict cross-origin HTTP requests initiated from scripts for security reasons (Same-Origin Policy).", "A JavaScript library for sharing resources between different browser tabs", "A protocol for encrypting resources shared across different origins"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "The 'Same-Origin Policy' (SOP) is a web browser security feature that:",
    "options": ["Requires all content on a website to originate from the same server", "Restricts how a document or script loaded from one origin can interact with a resource from another origin. It helps prevent malicious scripts on one page from obtaining sensitive data on another page through that page's DOM.", "Ensures all JavaScript files on a page have the same origin", "A policy for consistent coding style across different origins"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'event bubbling' in the JavaScript DOM?",
    "options": ["Creating bubble-like visual effects for events", "A phase of event propagation where an event triggered on a nested element will also trigger on its parent elements in the DOM tree, 'bubbling' up from the target element to its ancestors, unless stopped.", "A way to make events float to the top of the event queue", "A type of JavaScript error related to bubbles"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'event capturing' in the JavaScript DOM?",
    "options": ["Capturing user input events for logging", "A phase of event propagation where an event travels down the DOM tree from the window to the target element's parent, before reaching the target element itself and before the bubbling phase. Event listeners can be attached to this phase.", "A way to capture screenshots of events", "A security feature to capture malicious events"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "`event.preventDefault()` in JavaScript is used to:",
    "options": ["Stop the event from propagating to parent elements", "Prevent the browser's default action associated with an event (e.g., preventing a form submission from navigating to a new page, or a link from being followed).", "Delay the handling of an event", "Trigger the event's default action manually"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "`event.stopPropagation()` in JavaScript is used to:",
    "options": ["Prevent the browser's default action for an event", "Stop the event from propagating further in the DOM tree (i.e., stop bubbling up or capturing further).", "Pause the event listener queue", "Cancel the event and remove its listener"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is a 'closure' in JavaScript?",
    "options": ["A way to close a browser tab using JavaScript", "A function that has access to variables from its outer (enclosing) function's scope, even after the outer function has returned. This allows the inner function to 'remember' the environment in which it was created.", "A special syntax for closing JavaScript code blocks", "A security feature to close off access to certain parts of a script"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the `this` keyword in JavaScript?",
    "options": ["It always refers to the global window object", "Its value is determined by how a function is called (invocation context). It can refer to the global object, an object that a method is called on, a new object created with `new`, or be explicitly set with `call`, `apply`, or `bind`. In arrow functions, it's lexically bound.", "It refers to the current script file", "It's a reserved keyword with no specific meaning"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is prototypal inheritance in JavaScript?",
    "options": ["A type of inheritance based on class definitions only, like in Java", "A mechanism where objects can inherit properties and methods directly from other objects (their 'prototype'). Each object has a prototype object, and it can access properties/methods of its prototype as if they were its own. This forms a prototype chain.", "A way to create prototypes for UI elements only", "A deprecated inheritance model replaced by ES6 classes"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "The `Array.prototype.map()` method in JavaScript:",
    "options": ["Modifies the original array by applying a function to each element", "Creates a new array populated with the results of calling a provided function on every element in the calling array.", "Maps each element to a boolean value indicating if it passes a test", "Is used for geographical mapping of array data"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "The `Array.prototype.filter()` method in JavaScript:",
    "options": ["Filters out unwanted characters from string elements in an array", "Creates a new array with all elements that pass the test implemented by the provided callback function.", "Applies a filter to the array to change its visual appearance", "Reduces the array to a single value by filtering"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "The `Array.prototype.reduce()` method in JavaScript:",
    "options": ["Reduces the size of the array by removing elements", "Executes a user-supplied 'reducer' callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value.", "Reduces the memory footprint of an array", "Creates a new array with fewer elements based on a condition"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'debouncing' a function in JavaScript?",
    "options": ["Making a function bounce visually", "A technique to limit the rate at which a function gets called. It ensures that the function is only executed after a certain amount of time has passed without it being invoked again. Useful for events like search input or window resize.", "Removing duplicate calls to a function", "Adding a 'bouncing' animation when a function is called"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'throttling' a function in JavaScript?",
    "options": ["Slowing down the execution of all JavaScript functions", "A technique to ensure that a function is called at most once within a specified time interval, regardless of how many times the event that triggers it occurs. Useful for events like scroll or mouse move.", "Reducing the CPU usage of a function", "Prioritizing certain functions over others by throttling them"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the 'critical rendering path' in web performance?",
    "options": ["The path taken by critical JavaScript functions", "The sequence of steps the browser goes through to convert HTML, CSS, and JavaScript into pixels on the screen. Optimizing this path is key to improving perceived page load speed.", "A secure path for rendering sensitive content", "The most important visual element on a page"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What does 'render-blocking resources' mean in web performance?",
    "options": ["Resources that block the user from rendering an opinion", "Resources (typically CSS and JavaScript files in the `<head>` without `async` or `defer`) that the browser must download, parse, and execute before it can render the rest of the page content. These can delay the initial display of the page.", "Resources that are too large to be rendered", "Resources that are blocked by a firewall"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "The `async` attribute on a `<script>` tag tells the browser to:",
    "options": ["Execute the script synchronously with HTML parsing", "Download the script asynchronously while HTML parsing continues, and then execute it as soon as it's downloaded, potentially interrupting HTML parsing.", "Delay script execution until the HTML is fully parsed", "Execute the script only if the user is online"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "The `defer` attribute on a `<script>` tag tells the browser to:",
    "options": ["Defer script downloading until HTML parsing is complete", "Download the script asynchronously while HTML parsing continues, but execute it only after the HTML parsing is complete, and in the order they appear in the document.", "Execute the script before HTML parsing", "Make the script execution optional"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'minification' of CSS and JavaScript files?",
    "options": ["Making the font size of the code very small", "The process of removing all unnecessary characters (e.g., whitespace, comments, shortening variable names) from source code without changing its functionality, to reduce file size and improve load times.", "Creating a minimal version of the website with fewer features", "Encrypting the files to make them smaller"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'gzipping' or 'Brotli compression' in the context of web servers and browsers?",
    "options": ["Zipping files into a .gz or .br archive for download", "Compression algorithms that web servers and browsers can use to reduce the size of text-based assets (like HTML, CSS, JavaScript) before sending them over the network, which are then decompressed by the browser, improving load times.", "A way to make images look like they are zipped", "A type of file format for web assets"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'browser caching'?",
    "options": ["Caching the browser application itself in memory", "The process where a web browser stores copies of downloaded resources (e.g., images, CSS, JavaScript) locally, so that on subsequent visits or requests for the same resources, they can be loaded from the cache instead of being re-downloaded from the server, improving performance.", "A way for browsers to store user passwords securely", "Caching search engine results within the browser"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "The HTTP `Cache-Control` header is used to:",
    "options": ["Control access to the server's internal cache", "Specify directives for caching in both requests and responses, controlling how resources are cached by browsers and proxy caches (e.g., `max-age`, `no-cache`, `public`, `private`).", "Clear the browser's cache for a specific site", "Define the maximum size of the browser cache"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is an 'ETag' (Entity Tag) HTTP header used for in caching?",
    "options": ["Tagging entities in a database on the server", "An identifier for a specific version of a resource. When a client has a cached version with an ETag, it can send an `If-None-Match` request header with that ETag. If the server's version hasn't changed (ETag matches), the server can respond with `304 Not Modified`, saving bandwidth.", "A tag for identifying electronic devices connected to the web", "Encrypting entity data for secure caching"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What are 'Web Fonts' (e.g., using `@font-face` in CSS)?",
    "options": ["Fonts that are only available on the web, not for desktop use", "Fonts that are downloaded by the browser from a server and then applied to text on a web page, allowing designers to use fonts that are not pre-installed on the user's computer.", "A collection of standard fonts guaranteed to be on all web browsers", "Fonts specifically designed for optimal web readability"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'SVG' (Scalable Vector Graphics)?",
    "options": ["A raster image format for very large graphics", "An XML-based vector image format for two-dimensional graphics with support for interactivity and animation. SVGs can scale to any size without losing quality.", "A JavaScript library for drawing graphics", "A type of video compression format"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the HTML `<canvas>` element used for?",
    "options": ["Displaying static images only", "Providing a resolution-dependent bitmap canvas that can be used to draw graphics, game graphics, art, or other visual images on the fly, typically with JavaScript.", "Creating a container for canvas fabric material", "Embedding Flash content"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'WebGL' (Web Graphics Library)?",
    "options": ["A JavaScript library for simple 2D graphics", "A JavaScript API for rendering interactive 2D and 3D graphics within any compatible web browser without the use of plug-ins. WebGL programs consist of control code written in JavaScript and shader code that is executed on a computer's Graphics Processing Unit (GPU).", "A web-based version of OpenGL for servers", "A library for managing graphics drivers in the browser"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is a 'polyfill' in frontend development?",
    "options": ["A tool for filling holes in web pages", "A piece of code (or plugin) that provides the technology that you, the developer, expect the browser to provide natively. Essentially, it's a shim that implements a modern web feature in older browsers that do not support it.", "A type of CSS padding for filling empty spaces", "A JavaScript library for political polling"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'progressive enhancement' as a web design strategy?",
    "options": ["Enhancing only progressive web apps", "Starting with a baseline of core content and functionality that works for all users (e.g., basic HTML), and then adding more advanced layers of presentation and features (e.g., CSS, JavaScript) for browsers that can support them. This ensures basic usability even on older browsers or with JavaScript disabled.", "Gradually making a website more complex over time", "A strategy for progressively loading website features as the user scrolls"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'graceful degradation' as a web design strategy?",
    "options": ["Making a website look graceful even when it's failing", "Building a web application for modern browsers first, and then ensuring it remains functional (though perhaps with a reduced feature set or simpler presentation) in older browsers or less capable environments.", "A system that degrades very quickly to save resources", "Degrading website performance to discourage older browsers"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'FOUC' (Flash Of Unstyled Content)?",
    "options": ["A flash animation used for unstyled content", "A phenomenon where a web page briefly appears with no styling (or default browser styles) before external CSS files are loaded and applied, causing a jarring visual effect. Techniques like hiding content until CSS is loaded can mitigate this.", "A type of CSS error", "A security vulnerability related to unstyled content"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is a 'CSS Reset' or 'Normalize.css' used for?",
    "options": ["To reset all CSS styles on a page to browser defaults", "To provide a consistent baseline styling for HTML elements across different browsers by overriding default browser styles (CSS Reset) or by preserving useful defaults and correcting common inconsistencies (Normalize.css).", "To reset the CSS cache", "A tool for finding and resetting CSS errors"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'specificity' in CSS?",
    "options": ["How specific a CSS property value is", "A set of rules that browsers use to determine which CSS style declaration is applied to an element when multiple declarations could apply (e.g., an ID selector is more specific than a class selector, which is more specific than an element selector).", "The level of detail in a CSS comment", "A measure of how unique a CSS selector is"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "The `!important` rule in CSS is used to:",
    "options": ["Mark a style as important for documentation", "Give a specific CSS declaration higher precedence, overriding other declarations, including those with higher specificity or later in the cascade. Its use is generally discouraged unless necessary.", "Make a style apply only to important elements", "Flag a style for review by important stakeholders"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the CSS `z-index` property used for?",
    "options": ["Defining the zoom level of an element", "Specifying the stack order of positioned elements. An element with a greater stack order (higher `z-index`) is always in front of an element with a lower stack order.", "Setting the depth of an element in 3D space", "Indexing elements for faster CSS selection"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'CSS-in-JS'?",
    "options": ["Embedding CSS code directly in JavaScript strings only", "A styling paradigm where CSS is composed and managed within JavaScript code, often using libraries that allow for component-scoped styles, dynamic styling, and leveraging JavaScript's capabilities for theming and logic. (e.g., Styled Components, Emotion)", "A JavaScript library that replaces CSS", "A way to convert CSS to JavaScript for performance"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What are 'CSS Custom Properties' (also known as CSS Variables)?",
    "options": ["Properties specific to custom-built CSS frameworks", "Entities defined by CSS authors that contain specific values to be reused throughout a document. They are set using custom property notation (e.g., `--main-color: black;`) and are accessed using the `var()` function (e.g., `color: var(--main-color);`).", "JavaScript variables that can be used in CSS", "CSS properties that can only be used by custom elements"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is a 'Service Worker' in Progressive Web Apps (PWAs)?",
    "options": ["A JavaScript file that manages server-side tasks", "A script that your browser runs in the background, separate from a web page, enabling features like offline capabilities (caching resources), push notifications, and background synchronization, even when the web page is not open.", "A UI component for displaying service status messages", "A worker thread dedicated to customer service features"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is a 'Web App Manifest' in PWAs?",
    "options": ["A list of all web apps installed on a device", "A JSON file that provides information about a web application (such as its name, author, icon, description, and start URL) to the browser, enabling it to be installed on the user's home screen or desktop like a native app.", "A manifest for declaring JavaScript module dependencies", "A security manifest for web applications"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'server-side rendering' (SSR) for SPAs beneficial for?",
    "options": ["Reducing server load", "Improving initial page load performance (perceived speed) and Search Engine Optimization (SEO) by sending a fully rendered HTML page from the server, rather than an empty page that relies on client-side JavaScript to fetch and render content.", "Making the application work offline by default", "Simplifying client-side JavaScript code"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'static site generation' (SSG)?",
    "options": ["Generating websites with only static IP addresses", "The process of building a website as a collection of pre-rendered static HTML, CSS, and JavaScript files at build time. These files can then be served directly from a CDN, often resulting in very fast load times and good security. Content is typically managed via a headless CMS or markdown files.", "Generating static images for a website", "A way to make dynamic websites appear static"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is a 'headless CMS'?",
    "options": ["A CMS without a graphical user interface for content editors", "A content management system where the content repository (the 'body') is decoupled from the presentation layer (the 'head'). It provides content via an API (e.g., REST or GraphQL) to be consumed by any frontend (website, mobile app, etc.).", "A CMS that has lost its main configuration file", "A very simple CMS with limited features"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'JAMstack' (JavaScript, APIs, Markup)?",
    "options": ["A stack of Jams, APIs, and Markup languages", "A modern web development architecture based on client-side JavaScript, reusable APIs, and prebuilt Markup (HTML). Sites are often statically generated and served from CDNs, with dynamic functionality handled by JavaScript and APIs.", "A specific JavaScript framework", "A stack of technologies including Java, Angular, and MongoDB"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'hydration' in the context of SSR or SSG with JavaScript frameworks?",
    "options": ["Adding water effects to a website", "The process where client-side JavaScript takes over a server-rendered (or statically generated) HTML page and attaches event listeners, sets up component state, and makes the page fully interactive, effectively 'breathing life' into the static markup.", "Encrypting data with watermarks", "A way to keep server-rendered pages from drying out"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 3
  },
  {
    "question": "What is 'code splitting' in frontend JavaScript applications?",
    "options": ["Splitting JavaScript code into multiple lines for readability", "A technique used by module bundlers to create multiple smaller JavaScript bundles that can be loaded on demand (e.g., per route or per feature), rather than a single large bundle for the entire application. This improves initial load time.", "Dividing JavaScript code development tasks among multiple developers", "Using a code splitter tool to separate HTML, CSS, and JS"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'atomic design' in UI development?",
    "options": ["Designing UIs with atomic precision", "A methodology for creating design systems by breaking down UIs into fundamental building blocks: Atoms (basic HTML elements), Molecules (groups of atoms), Organisms (groups of molecules forming distinct sections), Templates (page-level structures), and Pages (specific instances of templates with real content).", "Designing UIs that are very small (atomic size)", "A way to make UI elements explode like atoms"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 3
  },
  {
    "question": "What is 'BEM' (Block, Element, Modifier) methodology in CSS?",
    "options": ["A CSS framework developed by Benjamin, Eleanor, and Michael", "A naming convention for CSS classes aimed at creating more understandable, maintainable, and scalable CSS by defining clear relationships between UI components (Blocks), their parts (Elements), and their variations (Modifiers). E.g., `.block__element--modifier`.", "A way to make CSS blocks, elements, and modifiers bold, emphasized, and modified", "A JavaScript library for managing BEM styles"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is a 'CSS framework' like Bootstrap or Tailwind CSS?",
    "options": ["A framework for managing CSS file versions", "A pre-prepared library of CSS styles, components (e.g., buttons, navigation, grids), and sometimes JavaScript utilities, designed to speed up and simplify web development by providing ready-to-use building blocks and a consistent design language.", "A JavaScript framework that generates CSS", "A server-side framework for CSS processing"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'utility-first CSS' (e.g., Tailwind CSS)?",
    "options": ["CSS that is primarily used for utility applications", "An approach to CSS where styling is primarily done by applying many small, single-purpose utility classes directly in the HTML markup (e.g., `.pt-4` for padding-top, `.text-red-500` for text color), rather than writing custom component-specific CSS.", "A CSS framework with only utility functions", "CSS that prioritizes utility over aesthetics"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What are 'CSS Modules'?",
    "options": ["Hardware modules for CSS processing", "A system where CSS files are locally scoped by default. Class names and animation names are automatically generated to be unique, preventing naming collisions and making styles modular and component-specific. Often used with module bundlers.", "Predefined modules of CSS code provided by browsers", "A way to organize CSS into different module types"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'critical CSS'?",
    "options": ["CSS that is essential for application security", "The minimal set of CSS required to render the above-the-fold content of a web page correctly. Extracting and inlining critical CSS in the `<head>` can significantly improve perceived load performance by allowing the initial view to render faster, before all other CSS is loaded.", "CSS that is likely to cause critical errors", "A CSS framework for critical applications"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is a 'shim' or 'ponyfill' in JavaScript?",
    "options": ["A tool for polishing JavaScript code", "A shim is a piece of code that intercepts API calls and changes the arguments passed, handles the operation itself, or redirects the operation elsewhere, often to provide compatibility for older browsers. A ponyfill provides a modern API feature as a standalone module that doesn't modify the global scope, which you use explicitly.", "A type of JavaScript variable for storing small numbers", "A decorative element for JavaScript code"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'WCAG' (Web Content Accessibility Guidelines)?",
    "options": ["Guidelines for caching web content", "A set of recommendations for making web content more accessible to people with disabilities, developed by the World Wide Web Consortium (W3C). They cover a wide range of issues, including perceivability, operability, understandability, and robustness.", "A working group for CSS animations", "Guidelines for web component architecture"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'unit testing' in frontend development?",
    "options": ["Testing the entire frontend application as one unit", "Testing individual, isolated units of code (e.g., JavaScript functions, React components) to ensure they behave as expected given specific inputs.", "Testing user interface elements as units", "A test performed by a single development unit (team)"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'integration testing' in frontend development?",
    "options": ["Integrating test results from different developers", "Testing how different parts or components of the frontend application (and sometimes their interaction with mock backend services) work together.", "Integrating frontend and backend tests into one suite", "Testing the integration of new CSS styles"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'end-to-end (E2E) testing' for a web application?",
    "options": ["Testing only the beginning and end points of user flows", "Testing the entire application flow from the user's perspective, by simulating real user scenarios in a browser (e.g., using tools like Cypress, Selenium, Playwright). This includes UI interactions, navigation, and integration with backend services.", "A test performed at the very end of each development sprint", "Connecting two ends of a network to test communication"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'linting' code (e.g., using ESLint for JavaScript, Stylelint for CSS)?",
    "options": ["Removing lint from the codebase", "The process of running a static analysis tool (a linter) to check code for programmatic and stylistic errors, potential bugs, and adherence to coding conventions, helping to improve code quality and consistency.", "A way to make code look cleaner visually", "Encrypting code to prevent linting"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'code formatting' (e.g., using Prettier)?",
    "options": ["Formatting code into a specific file format", "The process of automatically applying consistent styling rules (e.g., indentation, spacing, line breaks) to source code to improve readability and maintain a uniform code style across a project.", "Adding comments to format the code's documentation", "Converting code into a human-readable format"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is a 'state management library' like Redux or Vuex used for in complex SPAs?",
    "options": ["Managing the state of the web server", "Providing a centralized store and predictable patterns for managing application state that is shared across many components, making it easier to reason about state changes, debug, and maintain complex applications.", "Storing user session state on the client-side only", "Managing the state of CSS animations"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'TypeScript'?",
    "options": ["A scripting language for typewriters", "A superset of JavaScript developed by Microsoft that adds static typing (optional type annotations) to the language. TypeScript code is transpiled into plain JavaScript to run in browsers or Node.js environments.", "A JavaScript library for managing data types", "A version of JavaScript with stricter syntax rules"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is a 'package manager' like npm or Yarn used for in frontend (and Node.js) development?",
    "options": ["Managing physical software packages for delivery", "A tool for automating the process of installing, upgrading, configuring, and removing software packages (libraries, frameworks, tools) and managing their dependencies for a project.", "A manager for a team of software developers", "A system for tracking software licenses"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the `package.json` file in a Node.js or frontend project?",
    "options": ["A JSON file containing the packaged application code", "A manifest file that contains metadata about the project, including its name, version, dependencies (libraries it uses), development dependencies, scripts (for build, test, start, etc.), and other configuration.", "A JSON representation of the project's user interface", "A file for storing JSON data used by the application"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'git'?",
    "options": ["A type of frontend server", "A distributed version control system used for tracking changes in source code during software development, allowing multiple developers to collaborate, manage different versions (branches), and revert to previous states.", "A graphical interface tool for web design", "A JavaScript library for animations"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'DOM manipulation'?",
    "options": ["Manipulating domain name server records", "The process of using JavaScript to dynamically change the structure, content, or style of an HTML document (its Document Object Model).", "A technique for controlling user input", "Encrypting the DOM for security"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the 'event loop' in JavaScript?",
    "options": ["A loop that iterates through all DOM events only", "A core mechanism in JavaScript's concurrency model (in browsers and Node.js) that allows single-threaded JavaScript to handle asynchronous operations without blocking. It continuously checks a message queue (for tasks like I/O completion, timers, user interactions) and executes associated callback functions when the call stack is empty.", "A loop that generates random browser events for testing", "A visual representation of event flow in UI design tools"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the difference between `==` (abstract equality) and `===` (strict equality) in JavaScript?",
    "options": ["`==` checks type only, `===` checks value only", "`==` compares two values for equality after attempting to convert them to a common type (type coercion). `===` compares two values for equality without type coercion; both value and type must be the same.", "`===` is always faster than `==`", "They are functionally identical in modern JavaScript"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is a 'truthy' value in JavaScript?",
    "options": ["A value that is explicitly `true`", "A value that is considered true when encountered in a boolean context (e.g., in an `if` statement). Examples include non-empty strings, numbers other than 0, objects, and arrays.", "A value that has been verified for truthfulness", "A string containing the word 'true'"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is a 'falsy' value in JavaScript?",
    "options": ["A value that is explicitly `false`", "A value that is considered false when encountered in a boolean context. Examples include `false`, `0`, `\"\"` (empty string), `null`, `undefined`, and `NaN`.", "A value that has been proven false", "A string containing the word 'false'"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'hoisting' in JavaScript?",
    "options": ["Lifting UI elements to the top of the page", "JavaScript's default behavior where declarations of variables (using `var`) and functions are moved to the top of their containing scope (function or global) during the compilation phase, before code execution. Note that initializations are not hoisted for `var`, and `let`/`const` declarations are hoisted but not initialized (Temporal Dead Zone).", "A way to elevate the execution priority of certain JavaScript functions", "A method for rapidly scrolling content to the top of a webpage"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "The `Array.prototype.forEach()` method in JavaScript:",
    "options": ["Returns a new array with transformed elements", "Executes a provided callback function once for each array element. It does not return a new array and is often used for side effects.", "Filters the array based on the callback function", "Reduces the array to a single value"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'JSONP' (JSON with Padding)?",
    "options": ["A way to add padding to JSON objects for display", "A technique used to overcome the same-origin policy restrictions when making requests to a server in a different domain, by dynamically inserting a `<script>` tag that loads data from the remote server, where the data is wrapped in a JavaScript function call (the 'padding'). Less common now due to CORS.", "A JavaScript library for parsing JSON with extra padding data", "A compressed version of JSON that includes padding"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'Web Storage API' (localStorage and sessionStorage)?",
    "options": ["An API for storing website data on a remote server", "A browser API that provides mechanisms for web applications to store key-value data locally within the user's web browser, either persistently (`localStorage`) or for the duration of a session (`sessionStorage`).", "An API for managing storage devices connected to the user's computer", "A way to store large files like videos in the browser"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'IndexedDB'?",
    "options": ["A relational database that runs in the browser", "A low-level API for client-side storage of significant amounts of structured data, including files/blobs. It's a transactional, NoSQL-like database system built into modern browsers, allowing for offline data access and more complex querying than Web Storage.", "A way to index database tables for faster browser access", "A JavaScript library for database indexing"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What are 'Web Workers'?",
    "options": ["Automated scripts that work on web design tasks", "A JavaScript API that allows running scripts in background threads, separate from the main browser UI thread. This enables long-running or computationally intensive tasks to be performed without freezing the user interface.", "A tool for managing tasks for web development teams", "A type of browser extension for web workers"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'Server-Sent Events (SSE)'?",
    "options": ["Events triggered by server hardware failures", "A web technology that allows a server to push real-time updates (event streams) to a web client over a standard HTTP connection. It's a one-way communication from server to client, simpler than WebSockets for this use case.", "A way for servers to send JavaScript code to be executed on the client for specific events", "Events that occur when a web server starts or stops its services"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What are 'WebSockets'?",
    "options": ["Physical sockets for connecting web servers to the internet", "A communication protocol that provides full-duplex (bidirectional) communication channels over a single, long-lived TCP connection between a client (e.g., browser) and a server. Enables real-time, low-latency interaction.", "A type of secure web browser plugin for socket communication", "A standard for embedding socket programming directly within HTML pages"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the `canvas` API in HTML5 primarily used for?",
    "options": ["Creating structured document layouts", "Drawing graphics, animations, and other visual images on the fly using JavaScript. It provides a 2D drawing context (and WebGL for 3D).", "Embedding pre-rendered vector graphics", "Managing user interface canvases for painting applications"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'SVG' (Scalable Vector Graphics)?",
    "options": ["A raster image format optimized for scalability", "An XML-based vector image format for defining two-dimensional graphics with support for interactivity and animation. SVGs can be scaled to any size without loss of quality and can be manipulated with CSS and JavaScript.", "A JavaScript library for server-side vector graphics generation", "A standard for video game graphics"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'Aria roles' (e.g., `role=\"button\"`, `role=\"navigation\"`) used for?",
    "options": ["Defining roles for users accessing a website", "Part of WAI-ARIA, these attributes define the type or purpose of an element for assistive technologies, helping to make web content more accessible, especially for custom UI components that don't have native semantic HTML equivalents.", "Assigning roles to JavaScript functions", "Controlling the role of a CSS style in the cascade"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'CSS Specificity Hierarchy' (order of precedence)?",
    "options": ["A hierarchy of CSS file importance", "The set of rules that determines which CSS style is applied to an element when multiple conflicting styles target it. Generally, inline styles > ID selectors > class/attribute/pseudo-class selectors > element/pseudo-element selectors. `!important` overrides all.", "A visual hierarchy of CSS properties", "A system for organizing CSS into different levels of specificity"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What are CSS pseudo-classes (e.g., `:hover`, `:focus`, `:nth-child()`)?",
    "options": ["CSS classes that are not real", "Keywords added to CSS selectors that specify a special state of the selected element(s), or target elements based on their position or relation to others, without needing to add extra classes in the HTML.", "Classes that can only be used with pseudo-elements", "JavaScript classes that mimic CSS behavior"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What are CSS pseudo-elements (e.g., `::before`, `::after`, `::first-letter`)?",
    "options": ["HTML elements that look like CSS", "Keywords added to CSS selectors that let you style a specific part of the selected element(s), or insert generated content before or after an element's content, without needing extra HTML markup.", "Elements that can only be styled by pseudo-classes", "JavaScript elements that generate CSS"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'CSS currentColor' value?",
    "options": ["A variable that always holds the color black", "A CSS keyword value that represents the value of the `color` property of the element it is used on. It can be used for other properties like `border-color` or `background-color` to inherit the text color.", "The current color selected by the user in a color picker", "A function to get the current dominant color of an image"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the 'CSS `calc()`' function used for?",
    "options": ["Calculating mathematical expressions in JavaScript", "A CSS function that allows performing calculations (addition, subtraction, multiplication, division) to determine CSS property values, often mixing different units (e.g., `width: calc(100% - 20px);`).", "A function for calculating CSS specificity", "A tool for calculating the size of CSS files"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'BFC' (Block Formatting Context) in CSS?",
    "options": ["Basic Font Configuration", "A part of a visual CSS rendering of a web page in which block-level boxes are laid out. It's a region in which the layout of block boxes occurs and floats interact with other elements. Creating a new BFC can prevent issues like collapsing margins or containing floats.", "Browser Font Cache", "Block Formatting Code"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 3
  },
  {
    "question": "What are 'CSS Blend Modes' (e.g., `mix-blend-mode`, `background-blend-mode`) used for?",
    "options": ["Blending different CSS files together", "Specifying how an element's content should blend with the content of the element's parent and the element's background, or how an element's background images should blend with each other and with the background color.", "A way to create smooth transitions between CSS styles", "Blending text colors for better readability"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'critical rendering path optimization'?",
    "options": ["Optimizing only the most critical JavaScript functions", "The process of prioritizing the display of content that relates to the user's current action by minimizing the number of critical resources, reducing their size, and optimizing the order in which they are loaded and processed by the browser to achieve faster initial page rendering.", "A way to optimize rendering of critical error messages", "Optimizing the server's rendering engine"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 3
  },
  {
    "question": "What is the 'Performance API' in browsers (`window.performance`)?",
    "options": ["An API for testing website performance against competitors", "A JavaScript API that provides access to detailed performance information about the current web page, including navigation timing, resource timing, user timing, and paint timing metrics. Useful for measuring and optimizing web performance.", "An API for controlling CPU performance from JavaScript", "A set of performance guidelines for web developers"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What are 'Paint Timing' metrics (e.g., First Paint, First Contentful Paint) from the Performance API?",
    "options": ["Metrics for how long it takes to paint UI elements in a design tool", "Metrics that mark points in the page load timeline when the browser renders pixels to the screen. First Paint (FP) is when any pixel is first rendered. First Contentful Paint (FCP) is when the browser renders the first bit of content from the DOM (e.g., text, image).", "Metrics related to the performance of CSS paint operations", "Timings for repainting the screen during animations"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'Largest Contentful Paint' (LCP) core web vital?",
    "options": ["The largest image or video on the page", "A user-centric metric for measuring perceived load speed because it marks the point in the page load timeline when the page's main content has likely loaded—specifically, the render time of the largest image or text block visible within the viewport.", "The time it takes to paint the largest DOM element", "A measure of how much content is painted on the screen"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'First Input Delay' (FID) core web vital?",
    "options": ["The delay before the first user input is registered by the application logic", "A user-centric metric for measuring load responsiveness. It measures the time from when a user first interacts with a page (e.g., clicks a button) to the time when the browser is actually able to begin processing event handlers in response to that interaction.", "The time it takes for the first input field to appear on the page", "A delay caused by slow network input"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'Cumulative Layout Shift' (CLS) core web vital?",
    "options": ["The total amount of layout shift allowed per page", "A user-centric metric for measuring visual stability. It quantifies how much visible content shifts unexpectedly in the viewport during the page load or user interaction, which can be a frustrating user experience.", "A way to shift CSS layouts cumulatively", "The cumulative time spent on layout calculations"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'Internationalization' (i18n) in web development?",
    "options": ["Making a website accessible only internationally", "The process of designing and developing a software application so that it can be adapted to various languages and regions without engineering changes. This involves separating localizable elements (like text, date formats) from the source code.", "A specific international web standard", "Using only international character sets"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'Localization' (l10n) in web development?",
    "options": ["Making a website accessible only to a local audience", "The process of adapting an internationalized software application for a specific region or language by adding locale-specific components and translating text. This is the step after internationalization.", "Storing all website data locally", "Using only local time zones"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is a 'CSS Sprite'?",
    "options": ["A small, animated CSS character", "A technique where multiple small images are combined into a single larger image file (the sprite sheet). CSS is then used to display individual parts of the sprite sheet as background images for different elements, reducing the number of HTTP requests for images.", "A type of CSS animation effect", "A JavaScript library for managing CSS images"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'data-*' attribute in HTML5?",
    "options": ["Attributes for storing database connection strings", "Custom data attributes that allow embedding private custom data, in a standard way, in HTML elements. They are intended to store custom data private to the page or application, for which there are no more appropriate attributes or elements. JavaScript can access these attributes.", "Attributes that define the data type of an element", "Attributes for linking to external data sources"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the `OffscreenCanvas` API?",
    "options": ["A canvas that is always rendered off the main screen for performance", "An API that allows rendering graphics (using a canvas context) in a Web Worker, off the main browser thread. This can improve performance by moving rendering tasks away from the UI thread, preventing jank.", "A way to create hidden canvas elements", "A canvas that is displayed on a secondary screen"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 3
  },
  {
    "question": "What is 'Shadow DOM' primarily used for?",
    "options": ["Creating dark mode versions of the DOM", "Encapsulating the internal DOM structure and CSS styling of a custom HTML element (Web Component), keeping it separate and isolated from the main document's DOM and styles, preventing style conflicts and promoting reusability.", "A DOM that is only visible to screen readers", "A hidden copy of the DOM for backup purposes"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What are 'Custom Elements' (part of Web Components)?",
    "options": ["HTML elements with custom CSS styling only", "A web platform feature that allows developers to define their own fully-featured HTML elements with custom tags, behavior (defined with JavaScript classes), and encapsulated DOM (often using Shadow DOM), making them reusable across projects.", "Elements that can only be used in custom-built browsers", "Predefined HTML elements that have been customized by the user"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What are 'HTML Templates' (`<template>` tag, part of Web Components)?",
    "options": ["Pre-designed website templates", "A mechanism for holding client-side HTML content that is not to be rendered immediately when a page is loaded but may be instantiated subsequently during runtime using JavaScript. The content inside a `<template>` tag is inert.", "Templates for generating HTML server-side", "A way to define variables in HTML"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'WebRTC' (Web Real-Time Communication)?",
    "options": ["A protocol for real-time clock synchronization on the web", "An open-source project providing web browsers and mobile applications with Real-Time Communication (RTC) capabilities via simple JavaScript APIs. It enables peer-to-peer audio, video, and data sharing directly between browsers without needing plugins.", "A framework for real-time collaboration tools", "A way to record and transmit user interactions in real-time"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the 'Intersection Observer API'?",
    "options": ["An API for observing intersections in geometric shapes drawn on a canvas", "A browser API that provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport. Useful for lazy-loading images, infinite scrolling, and visibility tracking.", "An API for detecting collisions between mouse pointer and UI elements", "An API for observing network traffic intersections between different origins"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the `ResizeObserver` API?",
    "options": ["An API for resizing browser windows programmatically", "A browser API that provides a way to observe changes to an element's content rectangle (its size). It allows reacting to changes in an element's dimensions, which can be useful for responsive components or layout adjustments.", "An API for observing when the user resizes images", "A tool for automatically resizing text to fit its container"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What are 'CSS Containment' properties (e.g., `contain: layout style size;`)?",
    "options": ["Properties for containing text within a specific boundary", "CSS properties that allow an author to indicate that an element and its contents are, as much as possible, independent of the rest of the document tree. This allows the browser to optimize rendering by isolating a subtree, improving performance for complex layouts.", "Properties for creating container queries", "A way to contain CSS styles within a specific module"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 3
  },
  {
    "question": "What is 'CSS `will-change`' property used for?",
    "options": ["To predict which CSS properties will change in future CSS versions", "A hint to the browser about which properties of an element are expected to change frequently (e.g., during an animation). This allows the browser to set up optimizations (like promoting the element to its own layer) in advance, potentially improving performance of those changes, but should be used sparingly as it can consume resources.", "To mark a CSS property that will be changed by JavaScript", "A way to define variables whose values will change"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 3
  },
  {
    "question": "What is the 'SameSite' attribute for cookies used for?",
    "options": ["To ensure cookies are only sent to sites with the same IP address", "To control whether a cookie should be sent with cross-site requests, providing some protection against Cross-Site Request Forgery (CSRF) attacks. Values include `Strict`, `Lax`, and `None`.", "To make cookies only accessible from the same directory on a site", "To restrict cookies to the same browser tab"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the `defer` attribute on a `<script>` tag used for?",
    "options": ["To make script execution optional", "It tells the browser to download the script file asynchronously while parsing the HTML, but to execute it only after the HTML document has been fully parsed, and in the order the scripts appear in the document.", "To delay the download of the script", "To execute the script before the DOM is ready"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the `async` attribute on a `<script>` tag used for?",
    "options": ["To execute scripts synchronously with HTML parsing", "It tells the browser to download the script file asynchronously while parsing the HTML, and then execute it as soon as it finishes downloading, without waiting for HTML parsing to complete or for other scripts. This can potentially interrupt HTML parsing.", "To ensure scripts are executed in a specific asynchronous order", "To make scripts only execute if an asynchronous event occurs"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'Above the Fold' content?",
    "options": ["Content that is hidden by default and needs to be unfolded", "The portion of a web page that is visible in the browser window without scrolling when the page first loads. Optimizing the loading and rendering of above-the-fold content is crucial for perceived performance.", "Content that is printed on folded paper", "The most important content on the page, regardless of its position"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What are 'source maps' in frontend development?",
    "options": ["Maps showing the geographical source of website traffic", "Files that map code from its transformed state (e.g., minified, transpiled JavaScript or compiled CSS from Sass) back to its original source code. This allows developers to debug the original, readable code in browser developer tools even though the browser is executing the transformed version.", "Maps of all data sources used by an application", "A way to navigate the source code of a website like a map"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'State Hoisting' in React (or similar component-based frameworks)?",
    "options": ["Lifting stateful components higher in the UI", "A pattern where shared state between multiple components is moved up to their closest common ancestor component. The ancestor then passes the state down to its children via props, and callbacks to update the state back up.", "Storing component state on a server (hoisting it to the backend)", "A way to make component state globally accessible without passing props"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'prop drilling' in React?",
    "options": ["Drilling holes in props for better performance", "The process of passing props down through multiple layers of nested components, even if some intermediate components don't directly use those props but only pass them further down to a descendant that needs them. This can make code harder to maintain. (Context API or state management libraries can help avoid this).", "A technique for deeply inspecting props", "Encrypting props as they are passed down"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the React Context API used for?",
    "options": ["Defining the execution context for React components", "A way to pass data through the component tree without having to pass props down manually at every level. It's designed to share data that can be considered 'global' for a tree of React components, like current authenticated user, theme, or preferred language.", "Managing context menus in React", "Storing the context of HTTP requests"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What are 'React Hooks' (e.g., `useState`, `useEffect`)?",
    "options": ["Hooks for attaching React components to the DOM", "Functions that let you 'hook into' React state and lifecycle features from function components. They allow you to use state and other React features without writing a class component.", "Physical hooks for hanging React posters", "Hooks for connecting React to backend APIs"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the `useEffect` Hook in React primarily used for?",
    "options": ["Defining effects for CSS animations", "Performing side effects in function components. Side effects can include data fetching, subscriptions, or manually changing the DOM. `useEffect` runs after every render (by default) or when specified dependencies change.", "Applying visual effects to React components", "Managing the effect of user input on state"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'declarative programming' (often associated with frameworks like React)?",
    "options": ["Programming by declaring variables only", "A programming paradigm where you describe *what* you want to achieve, and the language/framework figures out *how* to achieve it. In UI, you declare what the UI should look like for a given state, and the framework updates the DOM accordingly, as opposed to imperative programming where you manually manipulate the DOM step-by-step.", "Declaring all functions before using them", "A very verbose style of programming"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'imperative programming'?",
    "options": ["Programming with a very commanding tone", "A programming paradigm where you describe *how* to achieve a result by specifying a sequence of statements or commands that change the program's state. Directly manipulating the DOM with JavaScript is an example.", "Programming that is essential for all applications", "A style of programming that uses only imperative mood verbs"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is a 'pure component' or 'pure function' in the context of UI development?",
    "options": ["A component written purely in HTML", "A component or function whose output (rendered UI or return value) depends only on its input props/arguments and does not cause any side effects (e.g., modifying external state, making API calls). Given the same input, it always produces the same output. This makes them predictable and easier to test/optimize.", "A component that is free of bugs", "A component that uses only pure CSS"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'memoization' in the context of optimizing React components (e.g., using `React.memo`)?",
    "options": ["Writing memos about component behavior", "An optimization technique where a component or function's result is cached based on its input props/arguments. If the props/arguments haven't changed, the cached result is returned, avoiding re-computation or re-rendering. `React.memo` is a higher-order component for memoizing function components.", "A way to store component state in memo pads", "Automatically generating memos for code reviews"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'CSS Cascade'?",
    "options": ["A CSS animation effect that looks like a cascade", "The process by which browsers resolve conflicting CSS declarations that apply to the same element. It follows a set of rules based on origin (author, user, browser), specificity of selectors, and source order.", "A waterfall-like layout in CSS", "A way to make CSS styles flow down the DOM tree"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the 'box-sizing' CSS property often set to `border-box` for?",
    "options": ["To make all boxes square", "To change the CSS box model so that the `width` and `height` properties include the content, padding, and border, but not the margin. This can make it easier to size elements, as padding and border don't add to the specified width/height.", "To size boxes based on their content only", "To draw a border around the box's sizing handles"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What are 'data attributes' (`data-*`) in HTML used for?",
    "options": ["Storing large datasets directly in HTML", "Storing custom data private to the page or application, for which there are no more appropriate attributes or elements. This data can then be accessed and manipulated by JavaScript.", "Defining the data type of an HTML element", "Linking HTML elements to external data sources"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the `localStorage` API limit typically around (can vary by browser)?",
    "options": ["1KB", "100KB", "5-10MB per origin", "Unlimited"],
    "answer": 2,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the `sessionStorage` API limit typically around?",
    "options": ["Same as localStorage (5-10MB per origin)", "Significantly smaller than localStorage, around 50KB", "Significantly larger than localStorage, around 100MB", "Unlimited for the session"],
    "answer": 0,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is a 'favicon'?",
    "options": ["A favorite icon used in design software", "A small icon associated with a website, typically displayed in the browser tab, bookmarks, or address bar.", "An icon that indicates a website is a user's favorite", "A tool for creating favicons"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the 'CORS preflight request' (using HTTP OPTIONS method)?",
    "options": ["A request made before a flight for in-flight Wi-Fi", "For certain types of cross-origin HTTP requests (e.g., those with methods other than GET/HEAD/POST, or with custom headers), the browser first sends an OPTIONS request to the server to check if the actual request is safe to send. The server responds with headers indicating whether the actual request is allowed.", "A request to pre-load resources before the main CORS request", "A test request to check if the server is online before making a CORS request"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 3
  },
  {
    "question": "What is the 'event delegation' pattern in JavaScript DOM manipulation?",
    "options": ["Delegating event handling tasks to a backend server", "Attaching a single event listener to a common ancestor element, instead of attaching listeners to many individual child elements. When an event occurs on a child, it bubbles up to the ancestor, and the listener on the ancestor can then check `event.target` to determine which child triggered the event and handle it accordingly. Useful for dynamically added elements.", "A way to delegate events to different browser tabs", "A design pattern for creating custom browser events"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'progressive rendering' in web performance?",
    "options": ["Rendering only progressive JPEGs", "A technique where content is displayed to the user as it downloads and becomes available, rather than waiting for the entire page or all resources to load. This improves perceived performance by showing content to the user sooner.", "A way to render websites with a progress bar", "Rendering different versions of a website for progressive enhancement"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What are 'design tokens' in a design system?",
    "options": ["Tokens used to purchase design software", "Named entities that store visual design attributes (e.g., colors, fonts, spacing, shadows). They are used to maintain consistency and allow for easier theming and updates across a UI by centralizing design decisions.", "Physical tokens representing design elements", "A way to tokenize UI designs for security"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 3
  },
  {
    "question": "What is 'functional CSS' (or utility-first CSS)?",
    "options": ["CSS that only uses functions", "An approach to writing CSS where styling is primarily achieved by composing small, single-purpose utility classes directly in the HTML markup (e.g., `.text-center`, `.p-4`, `.bg-blue-500`). This contrasts with semantic CSS where classes describe content.", "CSS that is guaranteed to be functional in all browsers", "A CSS framework that provides functions for common tasks"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the 'critical path' in rendering a web page?",
    "options": ["The path taken by the most critical user through the website", "The sequence of resources and computations the browser must perform to render the initial view of a web page (above-the-fold content) as quickly as possible. Optimizing this path involves minimizing render-blocking resources and their size.", "A secure path for transmitting critical data", "The most frequently used path in a JavaScript function"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is a 'linting tool' (e.g., ESLint, Stylelint) used for?",
    "options": ["Removing lint and dust from code", "Static code analysis tools that check source code for programmatic errors, stylistic errors, potential bugs, and adherence to coding conventions, helping to improve code quality and maintainability.", "A tool for linking different code files", "A way to make code look cleaner by adding lint effects"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'type checking' in languages like TypeScript?",
    "options": ["Checking the font type used in the code", "The process of verifying and enforcing constraints of types on values, either at compile time (static type checking) or runtime (dynamic type checking). TypeScript adds static type checking to JavaScript.", "Checking the type of keyboard used for coding", "A way to automatically convert between different data types"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is a 'build tool' (e.g., Webpack, Parcel, Rollup) in frontend development?",
    "options": ["A tool for constructing physical UI mockups", "Software that automates the process of preparing frontend code for deployment, which can include tasks like transpiling JavaScript, bundling modules, minifying code, optimizing images, and processing CSS.", "A tool for building user interfaces with drag-and-drop", "A hardware tool for building frontend servers"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'hot module replacement' (HMR) provided by some build tools like Webpack?",
    "options": ["Replacing hardware modules while the server is hot", "A feature that allows updating JavaScript modules in a running application during development without needing a full page reload. This can significantly speed up development by preserving application state.", "A way to replace modules that are overheating", "Swapping out entire application modules at runtime in production"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What are 'polyfills'?",
    "options": ["A type of parrot that fills holes in code", "Pieces of JavaScript code that provide implementations of modern web features (e.g., new JavaScript methods, browser APIs) in older browsers that do not natively support them, allowing developers to use these features more broadly.", "A tool for filling empty HTML elements with content", "A CSS technique for filling polygonal shapes"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'CSS specificity'?",
    "options": ["How specific a CSS color value is", "A weight or rank that determines which CSS style declaration is applied to an element when multiple declarations target the same element and property. Specificity is calculated based on the types and number of selectors used (e.g., ID selectors are more specific than class selectors).", "The level of detail provided in CSS comments", "A measure of how unique a CSS file name is"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "The CSS `position: relative;` property means:",
    "options": ["The element is positioned relative to the browser window", "The element is positioned according to the normal document flow, and then offset relative to its own normal position using `top`, `right`, `bottom`, `left`. The space it would normally occupy is preserved.", "The element is positioned relative to its nearest positioned ancestor", "The element is not positioned and cannot be offset"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "The CSS `position: absolute;` property means:",
    "options": ["The element is positioned absolutely at the top-left of the page", "The element is removed from the normal document flow, and its position (using `top`, `right`, `bottom`, `left`) is relative to its nearest positioned ancestor (an ancestor with `position` other than `static`). If no positioned ancestor exists, it's relative to the initial containing block (often the `<html>` element).", "The element's position cannot be changed", "The element is positioned relative to its previous sibling"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "The CSS `position: fixed;` property means:",
    "options": ["The element's position is fixed and cannot be changed by JavaScript", "The element is removed from the normal document flow, and its position is relative to the browser viewport. It does not move when the page is scrolled.", "The element is fixed to its parent container", "The element has a fixed size"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "The CSS `display: flex;` property turns an element into a:",
    "options": ["Flexible image container", "Flex container, enabling a flexbox layout for its direct children (flex items).", "Display that is flexible in size", "A block-level element with flexible text"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "The CSS `display: grid;` property turns an element into a:",
    "options": ["Grid-based image gallery", "Grid container, enabling a CSS Grid layout for its direct children (grid items).", "Display that shows a grid pattern", "A table-like element with a fixed grid"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'CSS `z-index`' used for?",
    "options": ["Setting the zoom level for an element", "Controlling the stacking order of positioned elements. Elements with a higher `z-index` value will appear in front of elements with a lower `z-index` value within the same stacking context.", "Defining the depth of 3D transformations", "Indexing CSS rules for faster lookup"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is an 'API endpoint'?",
    "options": ["The physical end of an API cable", "A specific URL or URI where an API can be accessed to perform a particular operation or retrieve a specific resource (e.g., `https://api.example.com/users/123`).", "The last function called in an API request", "A software tool for testing API endpoints"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is a 'callback function' in JavaScript?",
    "options": ["A function that calls back the user via phone", "A function that is passed as an argument to another function and is executed after some operation has been completed or at a specified time. Often used for asynchronous operations or event handling.", "A function that can only be called once", "A function that makes a call to the backend server"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'event-driven programming'?",
    "options": ["Programming that drives users to events", "A programming paradigm in which the flow of the program is determined by events, such as user actions (mouse clicks, key presses), sensor outputs, or messages from other programs or threads. Event handlers are used to respond to these events.", "Programming only with event listeners", "A way to create events in a program"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'FOUC' (Flash Of Unstyled Content)?",
    "options": ["A CSS animation that creates a flash effect", "An issue where a web page is briefly displayed by the browser without its CSS styles applied, typically because the CSS is loaded late or applied after the initial HTML render. This results in a momentary flash of unstyled content before the page renders correctly.", "A JavaScript error related to unstyled content", "A security vulnerability where unstyled content is injected"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What are 'Web Vitals' (e.g., Core Web Vitals)?",
    "options": ["Vital signs of a web server's health", "An initiative by Google to provide unified guidance for quality signals that are essential to delivering a great user experience on the web. Core Web Vitals focus on loading (LCP), interactivity (FID/INP), and visual stability (CLS).", "A set of vitamins for web developers", "A list of essential web technologies"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'Interaction to Next Paint' (INP), a Core Web Vital that is replacing FID?",
    "options": ["The time it takes to paint the next interaction element", "A metric that assesses a page’s overall responsiveness to user interactions by observing the latency of all click, tap, and keyboard interactions that occur throughout the lifespan of a user’s visit to a page. The final INP value is the longest interaction observed, ignoring outliers.", "The interaction required to trigger the next paint event", "A measure of how many interactions occur before the next paint"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 3
  },
  {
    "question": "What is 'Time to First Byte' (TTFB)?",
    "options": ["The time it takes to download the first byte of a webpage", "A metric that measures the time between the browser making an HTTP request and receiving the first byte of the response from the server. It includes DNS lookup, connection setup, SSL handshake, and server processing time.", "The time it takes for the user to type the first byte of input", "A measure of the size of the first byte received"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is a 'sprite sheet' in web graphics?",
    "options": ["A sheet of paper with sprite designs", "An image file that contains multiple smaller images (sprites) arranged in a grid. CSS background positioning is then used to display individual sprites from the sheet, reducing the number of HTTP requests needed for multiple small images.", "A spreadsheet for tracking sprite animations", "A type of ghostly image effect"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What does the CSS `display: none;` property do?",
    "options": ["Makes the element transparent", "Removes the element entirely from the document layout; it takes up no space and is not rendered.", "Hides the element but it still takes up space in the layout", "Displays a 'none' message instead of the element"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What does the CSS `visibility: hidden;` property do?",
    "options": ["Removes the element from the document layout", "Makes the element invisible, but it still takes up space in the layout.", "Hides the element and all its children, regardless of their visibility settings", "Makes the element visible only to screen readers"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the 'C' in CSS?",
    "options": ["Computer", "Cascading", "Creative", "Content"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the purpose of the `<!DOCTYPE html>` declaration?",
    "options": ["It defines the document type as HTML version 4", "It is an instruction to the web browser about what version of HTML the page is written in. `<!DOCTYPE html>` is for HTML5 and ensures the browser uses standards mode.", "It's a comment indicating the start of an HTML document", "It links to an external document type definition file"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "The `<head>` section of an HTML document typically contains:",
    "options": ["The main content of the page displayed to the user", "Meta-information about the HTML document, such as its title, character set, links to CSS files, and other metadata not displayed directly on the page.", "The header navigation bar", "JavaScript code for page interactivity only"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "The `<body>` section of an HTML document contains:",
    "options": ["Metadata and links to stylesheets", "The visible page content that is displayed to the user in the browser window.", "Only JavaScript code", "Server-side scripts"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "Which HTML element is used to define a client-side script, usually JavaScript?",
    "options": ["<js>", "<clientscript>", "<script>", "<javascript>"],
    "answer": 2,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the difference between `null` and `undefined` in JavaScript?",
    "options": ["They are interchangeable and mean the same thing.", "`null` is an assignment value representing the intentional absence of any object value. `undefined` typically means a variable has been declared but not yet assigned a value, or a function argument was not provided, or an object property does not exist.", "`null` is for numbers, `undefined` is for strings.", "`undefined` is an error, `null` is not."],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the `Array.prototype.slice()` method used for?",
    "options": ["To remove elements from an array and optionally insert new ones (modifies original array)", "To return a shallow copy of a portion of an array into a new array object selected from `start` to `end` (end not included). The original array is not modified.", "To cut an array into multiple smaller arrays", "To sort a slice of an array"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the `Array.prototype.splice()` method used for?",
    "options": ["To return a shallow copy of a portion of an array", "To change the contents of an array by removing or replacing existing elements and/or adding new elements in place. This method modifies the original array.", "To combine two arrays by splicing them together", "To create a sparse array with spliced sections"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'memoization'?",
    "options": ["A technique for writing memos in code comments", "An optimization technique where the results of expensive function calls are cached (memoized) based on their input arguments. If the same inputs occur again, the cached result is returned instead of re-computing, saving processing time.", "A way to store functions in memory for faster access", "A method for compressing function arguments"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is a 'callback hell' or 'pyramid of doom' in asynchronous JavaScript?",
    "options": ["A specific type of JavaScript error related to callbacks", "A situation where multiple nested callback functions make code difficult to read, debug, and maintain, often occurring with older styles of asynchronous programming before Promises or async/await.", "A visual effect where callbacks are arranged in a pyramid shape", "A performance issue caused by too many callbacks"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "Promises (ES6+) help mitigate callback hell by:",
    "options": ["Eliminating the need for asynchronous operations", "Allowing asynchronous operations to be chained using `.then()` and `.catch()`, leading to flatter, more readable code compared to deeply nested callbacks.", "Making all callbacks synchronous", "Automatically handling all errors in asynchronous code"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "`async/await` (ES2017+) further simplifies asynchronous JavaScript by:",
    "options": ["Making asynchronous code run synchronously, blocking the main thread", "Allowing asynchronous, Promise-based code to be written in a style that looks more synchronous and is easier to read and reason about, by using `async` to define functions that return Promises and `await` to pause execution until a Promise settles.", "Replacing Promises entirely with a new asynchronous model", "Automatically converting all functions to asynchronous functions"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the `Set` object in ES6 JavaScript?",
    "options": ["An object for setting global variables", "A collection of unique values of any type (primitives or object references). Values in a Set can only occur once; it checks for equality based on the SameValueZero algorithm.", "A way to define a fixed set of CSS properties", "A mathematical set operation tool"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the `Map` object in ES6 JavaScript?",
    "options": ["A geographical map display component", "A collection of key-value pairs where keys can be of any type (including objects), unlike regular JavaScript objects where keys are typically strings or Symbols. Maps also preserve insertion order of elements.", "A function for mapping array elements to new values", "A way to map keyboard inputs to actions"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What are 'template literals' (using backticks ``) in ES6 JavaScript?",
    "options": ["Literals used for HTML templates only", "String literals allowing embedded expressions (interpolation with `${expression}`), multi-line strings, and optional 'tag' functions for custom parsing.", "A way to define templates for generating JavaScript code", "Literals that can only store temporary data"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What are 'arrow functions' (`=>`) in ES6 JavaScript?",
    "options": ["Functions that draw arrows on the screen", "A more concise syntax for writing function expressions. They lexically bind the `this` value (i.e., `this` inside an arrow function is the same as `this` in its surrounding lexical scope), and they don't have their own `arguments` object or `prototype` property.", "Functions that can only be used for pointing to other functions", "A way to make functions execute faster"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'destructuring assignment' in ES6 JavaScript?",
    "options": ["A way to destroy objects and arrays to free memory", "A syntax that makes it possible to unpack values from arrays, or properties from objects, into distinct variables in a concise way.", "A method for restructuring the DOM", "A process of breaking down complex algorithms into simpler parts"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What are 'default parameters' in ES6 JavaScript function definitions?",
    "options": ["Parameters that are always set to a default browser value", "A way to specify default values for function parameters if no value or `undefined` is passed for that parameter when the function is called.", "Parameters that can only accept default JavaScript types", "Parameters that reset to their default values after each function call"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the 'rest parameter' syntax (`...paramName`) in ES6 JavaScript function definitions?",
    "options": ["A parameter that allows the function to rest for a while", "Allows a function to accept an indefinite number of arguments as an array. It collects all remaining arguments passed to the function (that are not matched by preceding named parameters) into a single array.", "A parameter that can only be the last one and is optional", "A way to define parameters that are passed by REST API calls"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the 'spread syntax' (`...iterable`) in ES6 JavaScript?",
    "options": ["A way to spread butter on JavaScript code", "Allows an iterable (like an array or string) to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object to be expanded in places where zero or more key-value pairs (for object literals) are expected.", "A syntax for spreading viruses through JavaScript", "A method for evenly distributing elements in a layout"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What are 'modules' in ES6 JavaScript (`import`/`export`)?",
    "options": ["Small hardware modules for running JavaScript", "A way to organize JavaScript code into reusable pieces. Code in a module is executed in strict mode by default. You can `export` functions, objects, or primitives from a module and `import` them into other modules.", "Pre-compiled JavaScript libraries provided by the browser", "A type of comment for module documentation"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'shadowing' a variable in JavaScript?",
    "options": ["Making a variable dark or hidden visually", "When a variable declared within a certain scope (e.g., an inner function or block) has the same name as a variable in an outer scope. The inner variable 'shadows' or hides the outer variable within its scope.", "Creating a backup copy (shadow) of a variable", "Encrypting a variable so it's like a shadow"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the 'Temporal Dead Zone' (TDZ) for `let` and `const` variables in JavaScript?",
    "options": ["A zone where time-related functions don't work", "The period between entering the scope where a `let` or `const` variable is declared and the actual declaration statement. Accessing the variable in the TDZ results in a `ReferenceError`. These variables are hoisted but not initialized.", "A temporary zone for storing dead (unused) variables", "A specific time zone where JavaScript execution is problematic"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is a 'higher-order function' in JavaScript?",
    "options": ["A function that is defined at a higher level in the call stack", "A function that either takes one or more functions as arguments, or returns a function as its result, or both. Examples include `map`, `filter`, `reduce`.", "A function that has very high performance", "A function that is part of JavaScript's core high-level API"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'currying' a function in JavaScript?",
    "options": ["Adding curry spice to a function for flavor", "The technique of transforming a function that takes multiple arguments into a sequence of functions, each taking a single argument. For example, `f(a,b,c)` could become `f(a)(b)(c)`.", "A way to cache function results using curry powder", "A method for combining multiple functions using a curry recipe"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 3
  },
  {
    "question": "What is a 'pure function' in JavaScript?",
    "options": ["A function written purely in JavaScript without any HTML or CSS", "A function that, given the same input, will always return the same output and has no side effects (e.g., it doesn't modify external state, perform I/O, or mutate its input arguments if they are objects/arrays).", "A function that has been verified by a code purity checker", "A function that only works with pure numerical data"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'referential transparency'?",
    "options": ["Transparency in how references are managed in memory", "A property of expressions (often functions) where an expression can be replaced with its corresponding value without changing the program's behavior. Pure functions exhibit referential transparency.", "A way to make object references visible for debugging", "A security feature for transparently managing references"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 3
  },
  {
    "question": "What is 'functional programming' paradigm?",
    "options": ["Programming by defining only functions that perform UI actions", "A programming paradigm that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data. It emphasizes pure functions, immutability, higher-order functions, and declarative style.", "A way to program hardware functions", "Programming that focuses on the functionality of the user interface"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'immutability' in the context of data structures?",
    "options": ["Data structures that cannot be muted (silenced)", "A property of an object or data structure whose state cannot be modified after it is created. If a change is needed, a new object/structure is created with the change, rather than altering the original.", "Data structures that are immune to errors", "A way to make data structures permanent and un-deletable"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the 'call stack' in JavaScript execution?",
    "options": ["A stack of phone calls made by the application", "A data structure that JavaScript uses to keep track of function calls. When a function is called, a new frame is added to the top of the stack. When a function returns, its frame is removed from the stack.", "A stack data structure provided by a library named 'Call'", "A visual representation of all active function calls"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is a 'stack overflow' error in JavaScript?",
    "options": ["When too much data is pushed onto an array acting as a stack", "An error that occurs when the call stack grows beyond its maximum limit, typically due to very deep or infinite recursion, or excessively nested function calls.", "When a UI stack layout overflows its container", "An error in a data stack used for undo/redo functionality"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'recursion' in programming?",
    "options": ["Re-cursing a user for bad input", "A technique where a function calls itself directly or indirectly to solve a problem by breaking it down into smaller, similar subproblems, until a base case is reached.", "A way to curse a program that has bugs", "Repeating a block of code using a loop"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'Big O notation' (e.g., O(n), O(log n)) used to describe?",
    "options": ["The size of very large objects in memory", "The asymptotic behavior (time or space complexity) of an algorithm in relation to the size of its input, providing a way to analyze and compare algorithm efficiency.", "A notation for object-oriented programming", "The number of operations in a single function call"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is a 'user story' in Agile development?",
    "options": ["A story written by a user about their experience", "A short, simple description of a feature or functionality from the perspective of an end user or customer, typically following a format like: 'As a [type of user], I want [an action] so that [a benefit/value].'", "A fictional story used for software testing", "A log of all user interactions with an application"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'Agile methodology' in software development?",
    "options": ["A methodology for making software run very fast (agile)", "An iterative and incremental approach to software development that emphasizes collaboration, flexibility, customer feedback, and rapid delivery of working software. Common frameworks include Scrum and Kanban.", "A specific programming language for agile development", "A set of hardware requirements for agile software"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is a 'sprint' in Scrum (Agile framework)?",
    "options": ["A short race between developers", "A fixed-length timebox (typically 1-4 weeks) during which a specific amount of work (from the product backlog) is planned, developed, tested, and potentially delivered as a usable increment of the product.", "A quick meeting to discuss sprint progress", "A type of fast code deployment"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is a 'stand-up meeting' (or daily scrum) in Agile?",
    "options": ["A meeting where everyone stands up for the entire duration", "A short, daily meeting (often 15 minutes) for the development team to synchronize, discuss progress, identify impediments, and plan for the day. Typically, each member answers: What did I do yesterday? What will I do today? Are there any blockers?", "A meeting to discuss standing issues in the project", "A formal presentation of completed work"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'pair programming'?",
    "options": ["Programming with a pair of monitors", "An agile software development technique in which two programmers work together at one workstation. One, the 'driver', writes code while the other, the 'navigator' or 'observer', reviews each line of code as it is typed in, suggests improvements, and thinks about the strategic direction.", "Creating pairs of functions that work together", "Programming applications for couples"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'version control' (e.g., using Git)?",
    "options": ["Controlling the version of the operating system", "A system that records changes to a file or set of files over time so that you can recall specific versions later. It allows multiple people to collaborate on a project, track history, and manage different lines of development (branches).", "A way to control access to different software versions", "A tool for automatically updating software to the latest version"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the `typeof null` in JavaScript?",
    "options": ["'null'", "'undefined'", "'object'", "'none'"],
    "answer": 2,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is `NaN` in JavaScript, and what does `typeof NaN` return?",
    "options": ["Not a Null, 'null'", "Not a Number, 'number'", "New Age Notation, 'symbol'", "No Available Name, 'undefined'"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What does `Array.isArray()` check for?",
    "options": ["If a variable is an array-like object", "If a value is a true Array instance", "If an array has any elements", "If an array is declared with `let` or `const`"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the 'SameValueZero' equality comparison used by `Set` objects and `Array.prototype.includes`?",
    "options": ["It's the same as `==` (abstract equality)", "It's similar to `===` (strict equality), but treats `NaN` as equal to `NaN`, and `+0` and `-0` as equal.", "It compares values after converting them to zero", "It's a special comparison for numeric values only"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 3
  },
  {
    "question": "What is the difference between `element.innerHTML` and `element.textContent`?",
    "options": ["`innerHTML` gets/sets text only, `textContent` gets/sets HTML content", "`innerHTML` gets/sets the HTML content (markup) within an element. `textContent` gets/sets the raw text content of an element and its descendants, without any HTML markup.", "`textContent` is faster for all operations", "They are aliases for the same property"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'event capturing' phase in DOM event propagation?",
    "options": ["When an event is captured and logged by the browser", "The phase where the event travels down the DOM tree from the `window` object to the target element's parent, before it reaches the target element. Listeners attached for the capturing phase are triggered first.", "When an event is captured by a Web Worker", "A phase where all events are captured by the root element"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'event bubbling' phase in DOM event propagation?",
    "options": ["When an event creates visual bubbles on the screen", "The phase where, after an event triggers on the target element, it then 'bubbles' up the DOM tree, triggering event listeners attached to its ancestor elements, from parent to parent, up to the `window` object (unless propagation is stopped).", "A phase where events are handled by child elements only", "When multiple events bubble up at the same time creating a conflict"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is a `NodeList` returned by methods like `document.querySelectorAll()`?",
    "options": ["A static (non-live) collection of nodes. Changes to the DOM after the NodeList is created are generally not reflected in it.", "A live collection of nodes that automatically updates if the DOM changes.", "An array of node names.", "A list specific to Node.js environments."],
    "answer": 0,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is an `HTMLCollection` returned by methods like `document.getElementsByClassName()` or `element.children`?",
    "options": ["A static collection of HTML elements.", "A live collection of HTML elements that automatically updates when the underlying document is changed.", "A collection of HTML strings.", "A specific type of JavaScript array for HTML."],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the difference between `window.setTimeout(callback, delay)` and `window.setInterval(callback, delay)`?",
    "options": ["`setTimeout` executes repeatedly, `setInterval` executes once.", "`setTimeout` executes the `callback` function once after the specified `delay` (in milliseconds). `setInterval` repeatedly executes the `callback` function at the specified `delay` interval, until cleared.", "`setInterval` is for UI updates, `setTimeout` for background tasks.", "There is no functional difference."],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "How do you clear a timer set by `setTimeout()`?",
    "options": ["`stopTimeout(timerId)`", "`clearTimeout(timerId)` where `timerId` is the value returned by `setTimeout`", "`deleteTimeout(timerId)`", "The timer clears itself automatically always"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "How do you clear an interval set by `setInterval()`?",
    "options": ["`stopInterval(intervalId)`", "`deleteInterval(intervalId)`", "`clearInterval(intervalId)` where `intervalId` is the value returned by `setInterval`", "The interval clears itself after one execution"],
    "answer": 2,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the 'C' in 'SOLID' principles for object-oriented design?",
    "options": ["Consistency", "Cohesion", "Liskov Substitution Principle (the 'L' is Liskov)", "Composition over Inheritance (this is a principle, but not directly 'C' in SOLID) - The 'C' is part of OCP (Open/Closed Principle) or ISP (Interface Segregation Principle) depending on interpretation of the acronym components"],
    "answer": 2, 
    "category": "Frontend",
    "difficulty": 3
  },
  {
    "question": "What is the 'L' in 'SOLID' principles for object-oriented design?",
    "options": ["Layering", "Liskov Substitution Principle", "Lazy Loading", "Loose Coupling"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'CSS `calc()` function' used for?",
    "options": ["To calculate specificity scores", "To perform calculations to determine CSS property values, allowing mixing of units (e.g., `width: calc(100% - 50px);`).", "To trigger JavaScript calculations from CSS", "A function to count CSS properties"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What are CSS Custom Properties (CSS Variables)?",
    "options": ["Variables that can only be used in custom CSS builds", "Author-defined entities that contain specific values to be reused throughout a CSS document, using syntax like `--my-color: blue;` and `color: var(--my-color);`.", "JavaScript variables accessible in CSS", "Properties that are specific to custom HTML elements"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the `em` unit in CSS relative to?",
    "options": ["The width of the root element's font", "The font-size of the parent element (if used for font-size) or the font-size of the element itself (if used for other properties like padding, margin).", "A fixed pixel size (1em = 10px)", "The height of the viewport"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the `rem` unit in CSS relative to?",
    "options": ["The font-size of the parent element", "The font-size of the root (`<html>`) element. This provides a consistent sizing unit across the entire document.", "A remainder value from a calculation", "The height of the element itself"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What are `vh` and `vw` units in CSS relative to?",
    "options": ["The height and width of the parent element", "1% of the viewport's height (`vh`) and 1% of the viewport's width (`vw`).", "The vertical and horizontal resolution of the screen", "Variable height and width based on content"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'Mobile First' approach in responsive web design?",
    "options": ["Designing the mobile version of a website last", "Designing the website for mobile devices first, and then progressively enhancing the design and layout for larger screens (tablets, desktops) using media queries.", "Using only mobile-specific technologies", "Ensuring the website works only on mobile phones"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is the purpose of the `aria-label` attribute?",
    "options": ["To define a label for an input field that is visible on screen", "To provide an accessible name (label) for an element when there is no visible text label, or when the visible label is not sufficiently descriptive for assistive technologies like screen readers.", "To label an entire ARIA region", "To link an element to an external label resource"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the purpose of the `aria-labelledby` attribute?",
    "options": ["To provide a direct text label for an element", "To associate an element with another element on the page that serves as its label, by referencing the ID of the labelling element. This is useful when a visible label exists but is not directly associated via `<label for>`.", "To list all ARIA labels used on the page", "To create a label that is hidden by default"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'code minification'?",
    "options": ["Making code smaller in font size", "The process of removing all unnecessary characters (whitespace, comments, shortening names) from source code (HTML, CSS, JS) without changing its functionality, to reduce file size for faster downloads.", "Creating a minimal, feature-reduced version of the code", "Encrypting code to make it appear smaller"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'image optimization' for the web?",
    "options": ["Making images look better with filters", "The process of reducing the file size of images as much as possible without significant loss in visual quality, using techniques like compression, choosing appropriate formats (JPEG, PNG, WebP, AVIF), and resizing. This improves page load speed.", "Optimizing images for search engines only", "Storing images in an optimized database"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is a 'sprite sheet' used for in web development?",
    "options": ["A sheet of paper for sketching UI sprites", "An image file containing multiple smaller images (sprites). CSS background positioning is used to display individual sprites, reducing HTTP requests and potentially improving load performance for sites with many small icons or images.", "A spreadsheet for managing game sprite data", "A type of CSS animation for sprites"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the 'critical rendering path'?",
    "options": ["The path taken by the most critical user", "The sequence of steps the browser must take to convert HTML, CSS, and JavaScript into pixels on the screen. Optimizing this path (e.g., minimizing render-blocking resources, reducing resource size, optimizing order) is key to fast initial page loads.", "A secure rendering path for sensitive data", "The main JavaScript execution path"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What are 'render-blocking resources'?",
    "options": ["Resources that block user interaction during rendering", "External JavaScript or CSS files that the browser must download, parse, and execute before it can continue rendering the rest of the page. They can significantly delay First Contentful Paint if not managed properly (e.g., using `async`, `defer`, inlining critical CSS).", "Resources that are too large for the browser to render", "Corrupted resources that block rendering"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the purpose of the `defer` attribute in a `<script>` tag?",
    "options": ["To defer the script execution until a user interaction", "The script is downloaded asynchronously alongside HTML parsing, but its execution is deferred until after the HTML document has been fully parsed. Deferred scripts execute in the order they appear in the document.", "To make the script download optional", "To execute the script before the DOM is fully ready"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the purpose of the `async` attribute in a `<script>` tag?",
    "options": ["To make the script execute synchronously with HTML parsing", "The script is downloaded asynchronously alongside HTML parsing, and then executed as soon as it finishes downloading, without waiting for HTML parsing to complete or for other scripts. This can interrupt HTML parsing. Order of execution for multiple async scripts is not guaranteed.", "To ensure asynchronous scripts execute in a specific order", "To execute the script only if the network connection is asynchronous"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'FOUC' (Flash Of Unstyled Content)?",
    "options": ["A feature where unstyled content is flashed for emphasis", "A rendering issue where a web page is briefly displayed without its CSS styles applied, before the styles are loaded and parsed. This causes a jarring visual shift.", "A CSS animation effect involving flashes", "A security exploit using unstyled content"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is a 'CSS Reset' or 'Normalize.css'?",
    "options": ["A tool to reset all CSS styles to browser defaults during development", "A set of CSS rules applied to provide a consistent baseline styling across different browsers. Resets aim to remove all default browser styling. Normalize.css aims to make default styles consistent and fix common browser bugs.", "A way to reset CSS animations", "A JavaScript library for managing CSS states"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'CSS specificity'?",
    "options": ["How specific a CSS property's value is (e.g., `red` vs `#FF0000`)", "A weight or set of rules that browsers use to determine which CSS style declaration is applied to an element when multiple conflicting declarations target it. It's calculated based on the number and type of selectors (ID, class, attribute, element, pseudo-elements/classes).", "The level of detail in CSS comments", "A measure of how unique a CSS file's purpose is"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the significance of `!important` in a CSS declaration?",
    "options": ["It marks the CSS rule as important for documentation", "It gives a specific CSS declaration the highest precedence, overriding any other conflicting declarations, including those with higher specificity or inline styles. Its use is generally discouraged as it can make debugging harder.", "It makes the style apply only to elements marked as important in HTML", "It flags the style for review by senior developers"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'CSS `z-index`' property used for?",
    "options": ["Setting the zoom level of an element in 3D space", "Specifying the stack order of positioned elements (elements with `position` other than `static`). An element with a greater stack order (higher `z-index`) is always in front of an element with a lower stack order within the same stacking context.", "Defining the depth of nested elements", "Indexing elements for faster CSS processing"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'CSS-in-JS' (e.g., Styled Components, Emotion)?",
    "options": ["A technique for embedding CSS rules directly within JavaScript strings only", "A styling paradigm where CSS is written and managed within JavaScript code. This allows for component-scoped styles, dynamic styling based on props or state, use of JavaScript variables/logic for theming, and often eliminates unused CSS.", "A JavaScript library that completely replaces the need for CSS files", "A way to convert CSS code into JavaScript functions for better performance"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What are 'CSS Custom Properties' (CSS Variables)?",
    "options": ["Properties that are specific to custom-built CSS frameworks only", "Entities defined by CSS authors (using `--` prefix, e.g., `--main-color: blue;`) that hold specific values to be reused throughout a document via the `var()` function (e.g., `color: var(--main-color);`). They are dynamic and can be changed with JavaScript.", "JavaScript variables that can be directly referenced in CSS stylesheets", "CSS properties that can only be applied to custom HTML elements"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is a 'Progressive Web App' (PWA)?",
    "options": ["A web app that shows a progress bar during loading", "A type of application software delivered through the web, built using common web technologies including HTML, CSS, and JavaScript. They are intended to work on any platform that uses a standards-compliant browser, and provide features like offline capability, push notifications, and installability to the home screen, similar to native apps.", "A web app that is developed progressively over time", "A framework for building progressive JPEGs"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is a 'Service Worker' in the context of PWAs?",
    "options": ["A JavaScript file that manages tasks for web servers", "A script that runs in the background, separate from the web page, and acts as a network proxy. It can intercept and handle network requests, manage caching for offline support, enable push notifications, and perform background sync operations.", "A UI component that displays the status of background services", "A worker thread dedicated to providing customer service via a web app"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is a 'Web App Manifest' file used for in PWAs?",
    "options": ["A manifest listing all web apps installed on a user's device", "A JSON file that provides metadata about a web application (e.g., name, icons, start URL, display mode, theme color) to the browser, enabling it to be 'installed' on the user's home screen or desktop and to control its appearance when launched.", "A manifest for declaring JavaScript module dependencies for a web app", "A security manifest defining permissions for a web application"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'Server-Side Rendering' (SSR) and why is it often used for SPAs?",
    "options": ["Rendering 3D graphics on the server for web display", "A technique where the initial HTML content for a single-page application is generated on the server in response to a browser request. This fully-rendered page is sent to the client, improving perceived initial load time and SEO, as search engine crawlers can see the content without needing to execute client-side JavaScript.", "Rendering only server status information in the HTML", "A way to render web pages using server-side programming languages exclusively"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'Static Site Generation' (SSG)?",
    "options": ["Generating websites that have only static IP addresses assigned to them", "The process of building an entire website as a collection of pre-rendered static HTML, CSS, and JavaScript files at build time. These files can then be served very quickly from a CDN, offering excellent performance and security. Dynamic content is often handled via client-side JavaScript and APIs (JAMstack).", "Generating static images and placeholder content for a website", "A way to make dynamic websites appear static to search engines only"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is a 'headless CMS'?",
    "options": ["A CMS that runs without a server (head)", "A content management system where the content repository (the 'body') is decoupled from the presentation layer (the 'head'). It provides content via an API (e.g., REST or GraphQL), allowing it to be consumed by various frontends (websites, mobile apps, IoT devices, etc.).", "A CMS that has no graphical user interface for content editors", "A very simple, feature-limited CMS"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'JAMstack' architecture?",
    "options": ["A stack of technologies involving Java, Angular, and MySQL", "A modern web development architecture based on client-side JavaScript, reusable APIs (for dynamic functionality), and prebuilt Markup (HTML, often generated via SSG). It emphasizes performance, security, and scalability by serving static files from CDNs and using serverless functions or microservices for backend tasks.", "A specific JavaScript framework for building stacks of components", "A stack for managing Jams, APIs, and Markup language versions"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'hydration' in the context of SSR/SSG with JavaScript frameworks like React or Vue?",
    "options": ["Adding water-themed animations to a website", "The process where client-side JavaScript 'takes over' a server-rendered or statically generated HTML page. It attaches event listeners, initializes component state, and makes the page fully interactive, effectively 'breathing life' into the static markup without re-rendering the entire DOM from scratch.", "Encrypting static HTML content with watermarks for security", "A technique to keep server-rendered pages from becoming stale or 'dry'"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 3
  },
  {
    "question": "What is 'BEM' (Block, Element, Modifier) in CSS naming conventions?",
    "options": ["A CSS framework: Bootstrap, Element UI, Materialize", "A methodology for naming CSS classes to create more understandable, maintainable, and scalable stylesheets by defining clear relationships: Blocks (standalone UI components), Elements (parts of a block), and Modifiers (variations of a block or element). E.g., `.card__title--large`.", "A way to make CSS Blocks, Elements, and Modifiers Bold, Emphasized, and Modified", "A JavaScript library that generates BEM-compliant CSS"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'critical CSS'?",
    "options": ["CSS that is essential for the website's security features", "The minimal set of CSS styles required to render the above-the-fold content of a web page correctly. Inlining this critical CSS in the `<head>` of the HTML document can significantly improve perceived load performance by allowing the initial view to render faster, before all other (non-critical) CSS is loaded.", "CSS rules that are marked with `!important` and are therefore critical", "A CSS framework specifically designed for critical, high-availability applications"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the `IntersectionObserver` API used for?",
    "options": ["Observing intersections in road traffic via a web app", "A browser API that provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with the top-level document's viewport. It's efficient for implementing features like lazy-loading images, infinite scrolling, and ad visibility tracking.", "Detecting collisions between geometric shapes drawn on a `<canvas>`", "Observing and managing intersections between different JavaScript modules"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the `ResizeObserver` API used for?",
    "options": ["Observing when the user resizes the browser window (use `window.onresize` for that)", "A browser API that provides a way to observe changes to an element's content rectangle (its size). It allows reacting to changes in an element's dimensions, which can be useful for responsive components or layout adjustments independent of window resize.", "An API for programmatically resizing DOM elements", "A tool for automatically resizing images to fit their containers"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the `OffscreenCanvas` API primarily useful for?",
    "options": ["Creating canvas elements that are always hidden from the user", "An API that allows canvas rendering operations to be performed in a Web Worker, off the main browser thread. This can improve performance by moving computationally intensive graphics tasks away from the UI thread, preventing jank and keeping the main page responsive.", "A canvas that is displayed on a secondary, off-screen monitor", "A way to create very large canvas elements that don't fit on the screen"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 3
  },
  {
    "question": "What is 'Shadow DOM' and what problem does it solve?",
    "options": ["A DOM that is always in dark mode for better visibility", "A web platform feature that allows encapsulation of an element's DOM structure and CSS styling, keeping it separate and isolated from the main document's DOM and styles. This prevents style conflicts and enables the creation of reusable, self-contained Web Components.", "A hidden copy of the main DOM used for performance optimization by browsers", "A DOM structure that is only visible to screen readers for accessibility"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What are 'Custom Elements' (part of Web Components)?",
    "options": ["HTML elements that can only be styled with custom CSS properties", "A web platform feature that allows developers to define their own fully-featured HTML elements with custom tags (e.g., `<my-custom-element>`), behavior (defined with JavaScript classes), and encapsulated DOM (often using Shadow DOM). This promotes reusability and modularity.", "Elements that are specific to a custom-built browser or rendering engine", "Predefined HTML elements that have been extended with custom attributes by the developer"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is `WebRTC` (Web Real-Time Communication)?",
    "options": ["A protocol for real-time clock synchronization for web applications", "An open-source project and API standard that enables real-time communication (RTC) capabilities in web browsers and mobile applications, including peer-to-peer audio, video, and generic data sharing, without needing plugins or external software.", "A framework for building real-time collaborative text editors", "A way to record and transmit user interactions with a website in real-time for analytics"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the `will-change` CSS property used as a hint for?",
    "options": ["Predicting which CSS properties will be deprecated in future specifications", "It provides a hint to the browser about which properties of an element are expected to change frequently or imminently (e.g., during an animation or transition). This allows the browser to set up optimizations (like promoting the element to its own compositing layer) in advance, potentially improving the performance of those changes. It should be used sparingly.", "Marking a CSS property that will be dynamically changed by JavaScript code", "Defining CSS variables whose values are expected to change based on user interaction"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 3
  },
  {
    "question": "What is the 'CSS Containment' (`contain` property) feature useful for?",
    "options": ["Containing text content within a specific rectangular boundary on the page", "Allowing an author to indicate that an element and its contents are, as much as possible, independent of the rest of the document tree. This enables the browser to optimize rendering by isolating a subtree (e.g., for layout, paint, size calculations), which can improve performance for complex UIs or components.", "Creating container queries for responsive design based on container size", "A way to contain CSS styles within a specific Shadow DOM or module scope"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 3
  },
  {
    "question": "What is the difference between `localStorage` and `sessionStorage` regarding data persistence?",
    "options": ["`localStorage` is for smaller data, `sessionStorage` for larger data.", "`localStorage` data persists until explicitly deleted by code or the user clears browser data; it remains available across browser sessions (closing and reopening the browser). `sessionStorage` data persists only for the duration of the browser session (until the tab or window is closed).", "`sessionStorage` is more secure than `localStorage`.", "They are functionally identical but have different names for clarity."],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 1
  },
  {
    "question": "What is 'Content Security Policy' (CSP) primarily designed to prevent?",
    "options": ["Unauthorized access to server-side content", "Certain types of attacks, including Cross-Site Scripting (XSS) and data injection attacks, by allowing web administrators to specify which sources of content (scripts, styles, images, fonts, etc.) are trusted and can be loaded by the browser for a given page.", "SQL Injection vulnerabilities on the frontend", "Denial-of-Service attacks against the content server"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is the `X-Frame-Options` HTTP header used to mitigate?",
    "options": ["Cross-Site Scripting (XSS)", "Clickjacking attacks, by controlling whether a browser should be allowed to render a page in a `<frame>`, `<iframe>`, `<embed>`, or `<object>`.", "SQL Injection", "Cross-Site Request Forgery (CSRF)"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What does HTTP Strict Transport Security (HSTS) enforce?",
    "options": ["Strict validation of HTML structure over HTTP", "It's a web security policy mechanism that tells browsers to interact with a website using only HTTPS connections, even if the user attempts to access it via HTTP. This helps prevent protocol downgrade attacks and man-in-the-middle attacks like SSL stripping.", "Strict adherence to HTTP request method semantics (e.g., GET should not have side effects)", "Secure transport of only specific, pre-approved data types"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "What is 'memoization' in the context of optimizing JavaScript functions or React components?",
    "options": ["Writing detailed memos (documentation) for functions and components", "An optimization technique where the results of expensive function calls (or component renders with specific props) are cached. If the function (or component) is called again with the same input arguments (or props), the cached result is returned instead of re-computing or re-rendering, saving processing time.", "A way to store frequently used functions or components in memory for faster access", "Automatically generating reminder memos for code refactoring"],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 2
  },
  {
    "question": "Explain the detailed mechanics of the browser's critical rendering path, including DOM construction, CSSOM construction, render tree formation, layout, and paint. How can a frontend developer optimize each stage?",
    "options": [
      "DOM/CSSOM are built, then painted, then layout occurs; optimize by reducing JavaScript.",
      "1. DOM: HTML parsed into tree. Opt: minimize nodes, valid HTML, stream HTML. 2. CSSOM: CSS parsed into tree. Opt: efficient selectors, avoid render-blocking CSS (inline critical, async load non-critical). 3. Render Tree: Combines DOM & CSSOM for visible elements. Opt: `display: none` for hidden elements to not enter render tree. 4. Layout (Reflow): Calculates geometry (size/position) of each node. Opt: avoid forced synchronous layouts, use CSS `contain`, prefer transforms over properties causing layout. 5. Paint (Rasterize): Fills in pixels for each visual part of nodes. Opt: promote elements to own layers for complex animations (using `transform: translateZ(0)` or `will-change`), simplify paint complexity, avoid large/complex box-shadows or gradients on frequently changing elements.",
      "Render tree is built first, then DOM/CSSOM; optimize by using a CDN for all assets.",
      "Layout and Paint are interchangeable stages; optimize by compressing all images heavily."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "Describe how JavaScript's event loop, callback queue (task queue/macrotask queue), and microtask queue interact to handle asynchronous operations. What is the precise order of execution and the implications for rendering updates?",
    "options": [
      "Microtasks and macrotasks are processed in strict FIFO order together from a single queue.",
      "Event loop: If call stack is empty, processes ALL tasks in microtask queue (e.g., Promise.then/catch/finally, queueMicrotask, MutationObserver). After microtask queue is empty, it MAY perform UI rendering updates. Then, it processes ONE macrotask from macrotask queue (e.g., setTimeout, setInterval, I/O, UI events like click). This cycle repeats. Implications: Microtasks run before next macrotask and before next render, allowing for quick updates based on promise resolutions. Long-running microtasks can starve rendering.",
      "Macrotasks always run before microtasks to ensure UI responsiveness.",
      "The event loop directly executes asynchronous code; queues are only for error handling."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "Explain the concept of 'closures' in JavaScript in-depth, including how they are created, how they maintain access to their lexical scope (scope chain), and common use cases (e.g., emulating private variables, currying, event handlers with context). What are potential memory leak scenarios involving closures and DOM elements?",
    "options": [
      "Closures are objects that only close over global variables; primarily used for simple callbacks without memory issues.",
      "A closure is formed when a function is defined within another function, allowing the inner function to access the outer function's variables and parameters (its lexical environment) even after the outer function has finished executing. This 'closed-over' scope is part of the closure. Use cases: data privacy (e.g., IIFE with private vars), currying/partial application, maintaining state in event handlers or asynchronous callbacks. Memory leaks: If a closure (e.g., an event handler) references a DOM element, and that DOM element also (directly or indirectly) references the closure, a circular reference can prevent both from being garbage collected, especially if the DOM element is removed without detaching the listener.",
      "Closures are only created by `let` and `const` declarations within functions; they automatically prevent memory leaks.",
      "Closures are a specific type of Promise object designed for managing variable scope across asynchronous calls."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "What is 'prototypal inheritance' in JavaScript? Explain the roles of the `prototype` property on constructor functions, the internal `[[Prototype]]` link (accessible via `__proto__` or `Object.getPrototypeOf()`) on instances, and the prototype chain. How do ES6 classes relate to this underlying model?",
    "options": [
      "ES6 classes completely replaced prototypal inheritance with a new classical inheritance model.",
      "JavaScript objects inherit properties and methods from other objects. Constructor functions have a `prototype` property, an object whose properties are inherited by all instances created with `new Constructor()`. Instances have an internal `[[Prototype]]` link (historically `__proto__`, standardly `Object.getPrototypeOf()`) pointing to their constructor's `prototype` object. If a property is not found on an instance, the JS engine looks up the prototype chain. ES6 classes provide syntactic sugar over this prototypal mechanism; `class B extends A {}` sets up `B.prototype.[[Prototype]] = A.prototype` and `B.[[Prototype]] = A` (for static inheritance).",
      "`__proto__` is a property of constructor functions, and `prototype` is a property of instance objects.",
      "Prototypal inheritance means objects create a deep copy of all properties from their prototype object upon instantiation."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "Discuss advanced CSS layout techniques like CSS Grid and Flexbox. When would you choose one over the other, and how can they be combined effectively? Explain concepts like `fr` units, `grid-template-areas`, `flex-grow`, `flex-shrink`, and `flex-basis`.",
    "options": [
      "Flexbox is for 2D layouts, Grid for 1D; `fr` units are for Flexbox, `flex-grow` for Grid.",
      "Flexbox: 1D layout (row or column). `flex-grow` (how much item grows if space), `flex-shrink` (how much shrinks if no space), `flex-basis` (initial size). Grid: 2D layout (rows and columns). `fr` unit (fraction of available space in grid container). `grid-template-areas` (define named grid areas for item placement). Choose Grid for overall page layout/major sections, Flexbox for aligning items within a component/single dimension. Can be combined (e.g., Grid cell becomes a Flex container).",
      "Grid is older and less flexible than Flexbox; they cannot be combined.",
      "`flex-basis` defines the maximum size of a flex item, `grid-template-areas` are for HTML attributes."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "Explain the concept of 'CSS Stacking Contexts'. How are they formed (e.g., by `position`, `z-index`, `opacity`, `transform`), and how do they affect the rendering order and the behavior of the `z-index` property within and between them?",
    "options": [
      "Stacking contexts are formed by all block-level elements automatically; `z-index` values are always global across the entire document.",
      "A stacking context is a 3D conceptualization where HTML elements are layered along an imaginary z-axis. Elements forming a new stacking context include: root element, positioned elements (`relative`, `absolute`, `fixed`, `sticky`) with `z-index` other than `auto`, elements with `opacity < 1`, `transform`, `filter`, `perspective`, `contain: paint` (or stricter). Within a stacking context, `z-index` determines stacking order of its children. The entire stacking context itself is then ordered as a single unit within its parent stacking context. `z-index` of a child is only meaningful within its own stacking context.",
      "Only elements with `position: absolute` and a `z-index` value form new stacking contexts. `opacity` and `transform` do not.",
      "All positioned elements share a single global stacking context, and `z-index` values are compared directly across all of them."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "Describe different strategies for managing CSS at scale in large frontend applications (e.g., BEM, CSS Modules, CSS-in-JS libraries like Styled Components or Emotion, Utility-first CSS like Tailwind CSS). Discuss the pros, cons, and typical build tool integration for each.",
    "options": [
      "BEM is a CSS preprocessor; CSS Modules are a feature built into JavaScript for styling without CSS files.",
      "BEM: Naming convention (`Block__Element--Modifier`). Pros: clear, avoids specificity wars, good for teams. Cons: verbose class names, manual. CSS Modules: CSS files where class names are locally scoped (hashed by build tool). Pros: true isolation, no global conflicts. Cons: requires build setup, can make debugging class names harder. CSS-in-JS: Write CSS in JS components. Pros: dynamic styles, colocation, JS ecosystem benefits. Cons: runtime overhead, potential for larger JS bundles, learning curve. Utility-first: Compose UIs with many small, single-purpose utility classes. Pros: rapid prototyping, consistency, small final CSS. Cons: verbose HTML, can be harder to grasp complex component styles, design constraints.",
      "CSS-in-JS always results in better runtime performance than traditional CSS due to JavaScript optimization.",
      "Utility-first CSS means writing all application CSS in a single global utility.css file without any build process."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "What are Service Workers? Detail their lifecycle (parsing/registration, install, activate, idle, terminate, fetch/message events) and common offline caching strategies (e.g., cache-first, network-first, stale-while-revalidate, cache-only, network-only).",
    "options": [
      "Service Workers are UI threads specifically for background tasks; cache-first strategy always serves from cache and never updates.",
      "Service Workers: JS scripts running in a background thread, separate from web pages, acting as network proxies. Lifecycle: 1. Register. 2. Parse & Install (typically cache static assets using Cache API). 3. Activate (manage old caches, take control of clients). 4. Idle (active, can handle fetch/message). 5. Terminate (if idle too long). Fetch event: intercepts network requests. Caching: Cache-first (serve from cache, if miss -> network & cache), Network-first (network, if fail -> cache), Stale-while-revalidate (serve from cache, update cache from network in background), Cache-only, Network-only.",
      "The 'install' event of a Service Worker happens after 'activate'; 'fetch' event is only for caching new assets not yet in cache.",
      "Stale-while-revalidate serves from the network first and then updates the cache in the background if the network content is stale."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "Explain how 'Content Security Policy' (CSP) headers work at a detailed level to mitigate various types of injection attacks, including XSS. Provide examples of complex CSP directives and discuss the use of nonces and hashes.",
    "options": [
      "CSP primarily encrypts all website content; directives are predefined JavaScript functions that block malware.",
      "CSP is an HTTP response header that allows web administrators to control resources the user agent is allowed to load for a given page, creating a whitelist. This helps prevent XSS, clickjacking, etc. Directives: `default-src`, `script-src`, `style-src`, `img-src`, `connect-src`, `frame-ancestors`, `report-uri`/`report-to`. Nonces: unique random string for inline scripts/styles; `script-src 'nonce-random123'`. Hashes: SHA hash of inline script/style content; `script-src 'sha256-hashValue'`. These allow specific inline code while maintaining a stricter policy otherwise.",
      "CSP only blocks inline scripts and styles; it has no effect on external resources or `eval()`.",
      "`default-src *` with `script-src 'unsafe-inline' 'unsafe-eval'` is the most secure and recommended CSP configuration for modern web apps."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "What is 'Memoization' in React components (e.g., `React.memo`, `useMemo`, `useCallback`)? Explain the concepts of referential equality vs. value equality in JavaScript and how they impact memoization effectiveness. Discuss potential pitfalls like stale closures with `useCallback`.",
    "options": [
      "`React.memo` memoizes function return values, while `useMemo` and `useCallback` memoize entire components for rendering.",
      "Memoization caches results. `React.memo`: HOC for functional components, re-renders if props change (shallow compare by default). `useMemo`: memoizes a computed value. `useCallback`: memoizes a callback function instance. Referential equality (JS default for objects/arrays/functions): `a === b` if they are the same instance in memory. Value equality: contents are the same. Shallow compare (React.memo default) uses referential equality for props. Pitfalls: Stale closures with `useCallback` if dependencies array is incorrect (callback closes over old state/props). Over-memoization can add overhead.",
      "Memoization in React always guarantees improved performance regardless of component complexity or prop types.",
      "`useCallback` is used for memoizing complex computed values, and `useMemo` is for memoizing callback functions to prevent re-creation."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "Describe React's reconciliation algorithm (heuristic diffing) in detail. How does it determine what to update in the DOM, what are its key assumptions, and how do 'keys' in lists play a crucial role in optimizing list updates and preserving component state?",
    "options": [
      "React re-renders the entire DOM tree from scratch on every state change; keys are only for styling list items.",
      "React uses a Virtual DOM. On state/prop change, a new VDOM tree is created. The diffing algorithm compares this new tree with the previous one. Assumptions: 1. Two elements of different types will produce different subtrees (old tree destroyed, new built). 2. Keys for lists: When diffing lists of elements, keys give elements a stable identity. This allows React to efficiently identify items that have moved, been added, or removed, minimizing DOM mutations and preserving the internal state of components within the list. Without keys, React might unnecessarily re-render or lose state for list items.",
      "Reconciliation directly compares the real browser DOM with the new virtual DOM to find differences.",
      "Keys in React lists are primarily for improving accessibility and SEO for list items, not for performance or state preservation."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "Discuss different state management patterns for large-scale JavaScript applications beyond simple component state (e.g., Redux/Flux architecture, Recoil, Zustand, Jotai, XState). Explain their core principles, data flow, and trade-offs in terms of boilerplate, performance, and developer experience.",
    "options": [
      "React's built-in Context API is always superior to external libraries like Redux for all global state management needs.",
      "Redux/Flux: Unidirectional data flow (Action -> Dispatcher -> Store -> View). Pros: predictable state, powerful devtools, large ecosystem. Cons: boilerplate, learning curve. Recoil/Jotai (Atom-based): Granular state atoms/derived state. Pros: less boilerplate than Redux for some cases, better for code splitting state. Cons: newer, ecosystem smaller. Zustand: Minimalist, hook-based, uses a store similar to Redux but simpler. Pros: very little boilerplate, good performance. Cons: less opinionated. XState: State machines/charts. Pros: excellent for complex state logic, robust. Cons: different paradigm, learning curve.",
      "Redux enforces a bidirectional data flow model for easier debugging and state updates.",
      "Zustand and Jotai are older, more complex state management patterns that have been largely superseded by the simplicity of the Context API."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "What are WebAssembly (Wasm) and WASI (WebAssembly System Interface)? How can Wasm modules be integrated with frontend JavaScript, what are common use cases for performance-critical tasks, and what are the limitations or challenges?",
    "options": [
      "Wasm is a JavaScript framework for building high-performance web applications; WASI is its server-side component for Node.js.",
      "Wasm: binary instruction format for a stack-based VM, allowing code from C++/Rust/Go etc. to run in browsers with near-native speed. JS integration: Wasm modules compiled to `.wasm` files, loaded and instantiated via JS (e.g., `WebAssembly.instantiateStreaming()`). JS calls exported Wasm functions, Wasm can call imported JS functions. Use cases: CPU-intensive tasks (game engines, image/video editing, cryptography, scientific computing). Limitations/Challenges: DOM access is indirect (via JS interop), debugging can be harder, larger initial download if module is big, JS interop overhead for frequent small calls.",
      "WebAssembly completely replaces the need for JavaScript in modern frontend development for all tasks.",
      "WASI allows WebAssembly modules to directly manipulate the browser DOM and access all browser APIs without any JavaScript glue code."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "Discuss advanced techniques for optimizing web font loading and rendering to minimize FOIT (Flash Of Invisible Text) and FOUT (Flash Of Unstyled Text), and improve perceived performance. Consider `font-display`, preloading, font subsetting, variable fonts, and self-hosting vs. CDN strategies.",
    "options": [
      "Using `font-display: block;` is always the best strategy for optimal font performance as it blocks rendering until the font is ready.",
      "`font-display` (`swap`, `fallback`, `optional`): Manages display during load. Preloading (`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin>`) fetches fonts early with high priority. Font Subsetting: Reduces file size by including only needed glyphs. Variable Fonts: Single file for multiple weights/styles, potentially smaller total size than many individual files. Self-hosting vs. CDN: Self-hosting gives full control over caching/headers. CDN offers geo-distribution, potential browser cache hits if font is popular. Combine strategies: e.g., preload critical WOFF2 subset with `font-display: swap`.",
      "Self-hosting fonts always results in significantly slower load times and worse caching compared to using a popular font CDN.",
      "Preloading all website fonts with the highest priority blocks the critical rendering path until every font is fully downloaded and parsed."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "Explain the concept of 'Isomorphic' or 'Universal' JavaScript applications. Detail the typical architecture, benefits (SEO, perceived performance), challenges (code complexity, environment differences, state hydration), and common frameworks or tools used (e.g., Next.js, Nuxt.js).",
    "options": [
      "Isomorphic JavaScript refers to JavaScript code that has an identical, bit-for-bit structure when run on the frontend and backend.",
      "Isomorphic/Universal JS: Same JS codebase runs on server (e.g., Node.js for Server-Side Rendering - SSR) and client (browser). Architecture: Shared components/logic, server renders initial HTML, client 'hydrates' it to become interactive SPA. Benefits: Improved SEO (crawlers get content), faster perceived initial load (FCP). Challenges: Managing environment differences (e.g., `window` object), state hydration complexity, build tooling, code that needs to be server/client only. Frameworks: Next.js (React), Nuxt.js (Vue), SvelteKit.",
      "It means using JavaScript exclusively for frontend development and a completely different language (like Java or Python) for the backend, with an 'isomorphic' API contract between them.",
      "Universal JavaScript applications do not require any backend server infrastructure as all logic is universally shared and executed on the client."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "Compare and contrast 'Render Props' and 'Higher-Order Components' (HOCs) as patterns for logic and UI sharing in React. How do React Hooks (especially custom hooks) offer an alternative, and what are their advantages in terms of composition and avoiding 'wrapper hell'?",
    "options": [
      "Render Props are functions that pass rendering logic upwards in the component tree, while HOCs pass rendering logic downwards. Hooks are primarily for styling components.",
      "Render Prop: A component takes a function prop (e.g., `render` or `children` as a function) that it calls with its internal state/logic, allowing the parent to control what gets rendered using that state/logic. HOC: A function that takes a component and returns a new, enhanced component (often wrapping the original to inject props or behavior). Both share reusable logic. Hooks (especially custom hooks): Allow extracting stateful logic into reusable functions that can be used in any functional component without altering component hierarchy. Advantages of Hooks: Simpler composition, avoid 'wrapper hell' (deeply nested components from multiple HOCs), easier to follow logic flow.",
      "Higher-Order Components are generally simpler to implement and understand than Render Props but are less powerful for complex logic sharing. Hooks have entirely replaced both patterns.",
      "Render Props are specifically for rendering HTML elements, HOCs are for wrapping entire React components to add lifecycle methods, and Hooks are for managing local component state only."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "Describe common and advanced security vulnerabilities specific to frontend applications (e.g., various types of XSS, CSRF from a frontend perspective, insecure direct object references if client makes decisions, clickjacking, open redirects, DOM clobbering). How can they be mitigated effectively?",
    "options": [
      "CSRF is exclusively a backend vulnerability; XSS is entirely mitigated by using HTTPS and a modern frontend framework.",
      "XSS (Stored, Reflected, DOM-based): Injecting malicious scripts. Mitigate: Context-aware output encoding/escaping, Content Security Policy (CSP), trusted types, input validation. CSRF: Tricking authenticated user's browser. Mitigate: Anti-CSRF tokens, SameSite cookies, checking Origin/Referer headers. IDOR (if client determines object IDs): Mitigate by robust backend authorization for every resource access. Clickjacking: Mitigate with `X-Frame-Options` or CSP `frame-ancestors`. Open Redirects: Validate redirect URLs. DOM Clobbering: Be cautious with element IDs/names that might overwrite global JS variables. Sanitize HTML.",
      "Using a popular frontend framework like React or Vue automatically prevents all common frontend security vulnerabilities including XSS and CSRF.",
      "Frontend applications only need to worry about DOM-based XSS; the server is responsible for mitigating all other types of XSS and CSRF."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "What is 'Tree Shaking' in JavaScript module bundlers like Webpack or Rollup? Explain how it works with ES6 modules (static analysis of `import`/`export`) and its limitations (e.g., with side effects or dynamic imports).",
    "options": [
      "A process to physically shake out unused code files from the project's dependency tree before bundling.",
      "Tree shaking is a dead code elimination technique. For ES6 modules, bundlers can statically analyze `import` and `export` statements at build time to determine which code is actually used. Unused exports and their unreferenced dependencies are then excluded from the final bundle. Limitations: Side effects in modules (e.g., global assignments, CSS imports in JS) can prevent code from being shaken out if not marked correctly (e.g., `sideEffects: false` in `package.json`). Dynamic imports (`import()`) are harder to analyze statically for tree shaking specific paths.",
      "Tree shaking reorders `import` statements within modules to optimize loading performance and reduce bundle size.",
      "Tree shaking only works for JavaScript code written in CommonJS module format, not ES6 modules."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "Explain the workings and benefits of different image formats for the web (JPEG, PNG, GIF, WebP, AVIF), covering aspects like lossy/lossless compression, transparency, animation, color depth, and typical use cases. How does `<picture>` element help in serving optimal images?",
    "options": [
      "JPEG is the best format for all types of web images due to its universally small file size; PNG is primarily used for animated images.",
      "JPEG: Lossy, good for photos, no transparency/animation, 24-bit color. PNG: Lossless, supports alpha transparency, good for graphics/logos/icons, larger than JPEG for photos, no animation (APNG exists but less common), up to 48-bit color. GIF: Lossless (max 256 colors/palette), supports simple animation, 1-bit transparency. WebP: By Google, lossy/lossless, alpha, animation, generally better compression than JPEG/PNG. AVIF: Newer, AV1-based, often even better compression, HDR, wide color gamut. `<picture>` element allows serving different image sources based on media conditions (e.g., viewport size, pixel density) or browser support for formats (e.g., serve AVIF if supported, fallback to WebP, then JPEG).",
      "WebP and AVIF are older, legacy image formats, while JPEG and PNG are the modern standards offering superior compression and features.",
      "The `<picture>` element is used for creating responsive image galleries and slideshows, not for format selection."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "What are CSS Container Queries (e.g., `@container (min-width: ...)`), and how do they enable more modular and context-aware responsive components compared to traditional Media Queries?",
    "options": [
      "Container Queries are used to style the main browser window (the container) itself, while Media Queries style the content within it.",
      "Media Queries apply styles based on global viewport characteristics (e.g., screen width, orientation). CSS Container Queries (a newer feature) allow applying styles to an element based on the size or other characteristics of its *containing element* (an ancestor that establishes a query container, e.g., via `container-type` property) rather than the viewport. This enables creation of more modular and truly responsive components that can adapt their layout and appearance to their specific context within a page, independent of the overall page viewport size.",
      "Media Queries are specifically for querying width-based conditions, while Container Queries are for height-based conditions only.",
      "Container Queries are a JavaScript API for dynamically querying container dimensions, not a CSS feature."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "Describe the key differences between common browser rendering engines (e.g., Blink - Chrome/Edge, Gecko - Firefox, WebKit - Safari). How do these differences impact web compatibility, standards implementation, and frontend development workflows?",
    "options": [
      "All modern web browsers now use a single, standardized rendering engine (Chromium's Blink) to ensure perfect web compatibility.",
      "Rendering engines (Blink, Gecko, WebKit) are complex software that interpret HTML, CSS, JS to display web pages. While they all aim to follow web standards, differences in implementation details, bug fixing pace, and support for newer/experimental features can lead to cross-browser compatibility issues (pages looking/behaving differently). Developers often need to test on multiple engines, use vendor prefixes (less common now), or rely on tools like Babel/PostCSS for transpiling/polyfilling. Engine development also drives web standards evolution through vendor proposals and implementations.",
      "Blink is primarily used for mobile browsers, Gecko for desktop browsers, and WebKit is exclusive to Apple devices and cannot be used by other browsers.",
      "Rendering engines are only responsible for rendering HTML and CSS; JavaScript execution is handled by a completely separate and standardized engine across all browsers."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "What is the purpose of `requestAnimationFrame()` in JavaScript for creating smooth animations? How is it superior to `setTimeout()` or `setInterval()` for this use case, and how does it interact with the browser's refresh cycle and inactive tabs?",
    "options": [
      "`requestAnimationFrame` is a high-priority version of `setTimeout` specifically for network requests, not animations.",
      "`requestAnimationFrame(callback)` tells the browser you wish to perform an animation and requests that the browser schedule a repaint and call the specified `callback` function right before the next repaint (typically synced with the display's refresh rate, e.g., 60fps). Superior to `setTimeout/setInterval` for animations because: 1. Synchronization with refresh rate leads to smoother animations and avoids tearing. 2. Pauses automatically when the tab/window is inactive or page is not visible, saving CPU, GPU, and battery. 3. Browser can optimize multiple `rAF` calls into a single reflow/repaint cycle.",
      "`setTimeout(fn, 0)` or `setInterval(fn, 16)` provides consistently higher frame rates and smoother animations than `requestAnimationFrame`.",
      "`requestAnimationFrame` can only be called once per page load and is primarily for initializing animations, not for continuous animation loops."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "Explain the concept of 'compositing layers' in browser rendering. How can promoting an element to its own layer (e.g., via `transform: translateZ(0)`, `will-change: transform`, or other layer-triggering properties) impact animation performance (both positively and negatively)?",
    "options": [
      "Compositing layers are a CSS feature for combining multiple background images into a single composited image for an element.",
      "Browsers can render parts of a web page onto separate 'compositing layers'. These layers are then composited together by the GPU to produce the final image on screen. Animations or transformations (like `transform`, `opacity`) on elements that are on their own compositing layer can often be handled entirely by the GPU, making them very smooth and offloading work from the CPU. Promoting an element can create a new layer. Benefits: smoother animations, less jank. Drawbacks: can increase memory usage (each layer is a texture), too many layers can lead to 'layer thrashing' and actually degrade performance, and can sometimes affect text rendering quality.",
      "Promoting an element to its own compositing layer always decreases memory usage and simplifies rendering for the browser.",
      "Compositing layers are only relevant for 3D CSS transforms and have no impact on 2D transforms or opacity animations."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "What are the Core Web Vitals (LCP, FID/INP, CLS)? Explain each metric in detail, what it measures, why it's important for user experience, and common causes for poor scores.",
    "options": [
      "Core Web Vitals are metrics that primarily measure server uptime, API response time from backend, and database query speed for a web application.",
      "Core Web Vitals are user-centric metrics by Google: LCP (Largest Contentful Paint): Measures loading performance – when the largest content element (image/text block) in the viewport becomes visible. Poor LCP: slow server response, render-blocking resources, large unoptimized resources. FID (First Input Delay) / INP (Interaction to Next Paint): Measures interactivity/responsiveness – FID is delay to first input; INP measures latency of all interactions. Poor FID/INP: long JavaScript tasks blocking main thread. CLS (Cumulative Layout Shift): Measures visual stability – quantifies unexpected layout shifts during page life. Poor CLS: images/ads without dimensions, dynamically injected content, web fonts causing FOIT/FOUT.",
      "LCP measures the total time until the entire page is fully loaded and interactive; FID measures the delay in JavaScript execution start; CLS measures the stability of CSS animations.",
      "These are metrics primarily for SEO ranking and do not directly reflect or impact the actual user experience on a website."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "Discuss advanced internationalization (i18n) and localization (l10n) challenges and best practices in complex frontend applications. Consider aspects like handling pluralization rules across languages, gender agreement, complex date/time/number/currency formatting, right-to-left (RTL) layout mirroring, and managing translations effectively.",
    "options": [
      "Internationalization (i18n) in frontend primarily involves translating all text strings into English; localization (l10n) then handles specific date formats.",
      "Challenges: Pluralization (e.g., 0, 1, few, many forms vary by language - ICU MessageFormat helps). Gender agreement in text. Complex date/time/calendar systems/number formats (separators, symbols - `Intl` object, libraries like Moment.js/date-fns, CLDR data). RTL layouts: requires mirroring UI structure (CSS `dir`, logical properties like `margin-inline-start`), text direction, and sometimes even icons. Managing translations: using i18n libraries (i18next, react-i18next), translation management systems (TMS), JSON/XLIFF formats, context for translators.",
      "Right-to-left (RTL) layouts in CSS are fully handled by simply setting `direction: rtl;` on the `<body>` element, and all child elements automatically mirror correctly without further adjustments.",
      "Pluralization and gender agreement can always be handled by using simple conditional statements (if-else) in JavaScript without needing specialized libraries or formats."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "What is the 'Shadow DOM' specification, and how does it enable true style and DOM encapsulation for creating reusable Web Components? Explain the concepts of shadow host, shadow root, shadow boundary, and slotted content.",
    "options": [
      "Shadow DOM is a hidden, secondary version of the main document DOM used by browsers for A/B testing different UI variations.",
      "Shadow DOM allows hidden DOM trees to be attached to elements in the regular DOM tree (the 'shadow host'). The root of this hidden tree is the 'shadow root'. The 'shadow boundary' separates the shadow DOM from the main document DOM. Styles defined inside a shadow DOM are scoped to it and don't affect the main document, and main document styles don't affect the shadow DOM (unless CSS Custom Properties or `::part` are used). This provides strong encapsulation. `<slot>` elements within the shadow DOM allow content from the light DOM (children of the shadow host) to be projected (rendered) into specific places within the shadow tree.",
      "Shadow DOM only encapsulates CSS styles; the DOM structure within a shadow tree is still globally accessible and affected by main document JavaScript.",
      "It's a way to create a dark theme for specific DOM elements by placing them in a 'shadow' environment that inverts colors."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "Explain different client-side routing strategies for Single-Page Applications (SPAs), such as hash-based routing vs. HTML5 History API routing. Discuss the pros, cons, server-side configuration requirements, and implications for SEO and user experience.",
    "options": [
      "Hash-based routing (`/#/path`) is newer and universally preferred for SEO and user experience over HTML5 History API routing.",
      "Hash-based (`/#/path`): Uses URL fragment identifier. Pros: works without server config (server always serves `index.html`), good older browser support. Cons: less clean URLs (presence of `#`), sometimes considered less SEO-friendly (though crawlers have improved). History API (`/path`): Uses `pushState`, `replaceState`, `popstate` events for cleaner URLs. Pros: aesthetically better URLs, potentially better for SEO and user perception. Cons: requires server-side configuration to handle direct navigation/refresh to any SPA route by serving the main `index.html` file, otherwise a 404 error occurs.",
      "HTML5 History API routing does not require any special server-side configuration; the browser handles all routing logic transparently.",
      "Hash-based routing always causes a full page reload when the hash changes, while History API routing does not."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "What are 'Micro Frontends'? Describe the concept, common implementation patterns (e.g., iframes, web components, module federation), potential benefits (team autonomy, independent deployments, technology diversity), and challenges (operational complexity, bundle size, shared dependencies, consistent UX, routing).",
    "options": [
      "Micro Frontends refer to very small, individual frontend applications, each typically consisting of only a few UI components, that fit on a microchip for IoT devices.",
      "Micro Frontends: An architectural style where a web application is a composition of independently developed, deployable, and manageable frontend applications (micro frontends). Each is responsible for a specific feature or part of the UI. Patterns: iframes (isolation, but UX/communication issues), Web Components (encapsulation, standard-based), Module Federation (Webpack 5+, share code between separately compiled bundles at runtime). Benefits: team autonomy, independent deployments/scaling, technology diversity. Challenges: operational complexity, overall bundle size/performance, managing shared dependencies/state, consistent UX/styling, routing/inter-app communication.",
      "Micro Frontends primarily means using micro-interactions and animations extensively in user interface design to enhance engagement.",
      "It's a frontend framework specifically designed for building micro-sized UIs that are embedded within larger monolithic applications."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "Discuss the implications of 'Long Tasks' (JavaScript execution > 50ms) on the main browser thread for user experience and key performance metrics like Total Blocking Time (TBT) and Interaction to Next Paint (INP). What strategies can be used to mitigate them (e.g., code splitting, web workers, `requestIdleCallback`)?",
    "options": [
      "Long tasks only affect the initial JavaScript execution speed during page load but have no impact on UI responsiveness or subsequent user interactions.",
      "Long tasks block the main thread, preventing it from handling user input, running animations smoothly, or rendering updates. This leads to janky animations, unresponsive UI, and poor user experience. They contribute significantly to TBT (sum of blocking portions of long tasks between FCP and TTI) and INP (measures latency of all interactions until next paint). Mitigation: Code splitting (load less JS upfront), Web Workers (offload JS to background threads), `requestIdleCallback` (schedule non-critical work during browser idle periods), breaking up long synchronous JS into smaller chunks with `setTimeout` or `async/await` yielding.",
      "Tasks longer than 1 second are generally considered 'long tasks'; 50ms is a negligible duration and has no impact on performance metrics.",
      "Long tasks are beneficial as they ensure that JavaScript code completes its execution fully and correctly before any user interface updates are rendered."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "Explain 'Module Federation' (e.g., as implemented in Webpack 5). How does it enable sharing of code and components between independently deployed frontend applications at runtime, and what are its advantages and complexities compared to other micro frontend approaches?",
    "options": [
      "Module Federation is a way to federate (combine) multiple JavaScript modules into a single, monolithic bundle for deployment.",
      "Module Federation allows a JavaScript application to dynamically load code from another separately compiled and deployed application (a 'remote') at runtime, while also allowing the host application to share its own dependencies or expose modules to remotes. Advantages: True runtime integration of independently deployed micro frontends, shared dependencies can be loaded once, more flexible than build-time integration. Complexities: build configuration, versioning and managing shared dependencies, runtime error handling if a remote is unavailable, potential for larger initial loads if not managed carefully.",
      "It is a server-side technology for federating backend microservices, not directly applicable to frontend applications.",
      "Module Federation relies on iframes to achieve isolation and code sharing between different frontend applications."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "What is 'Portals' in React? Describe their use case and how they allow rendering children into a different DOM subtree, outside the parent component's DOM hierarchy.",
    "options": [
      "Portals are a way to create inter-dimensional gateways within a React application for navigating between different universes of components.",
      "React Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. Common use cases include modals, dialogs, tooltips, or any UI element that needs to visually 'escape' its container or be appended to a specific DOM node like `document.body`. Event bubbling still works through the React component tree, even though the DOM placement is different.",
      "Portals are a feature for creating secure, isolated iframes within a React application to embed third-party content.",
      "They are a performance optimization technique that teleports component updates directly to the DOM, bypassing the virtual DOM diffing."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "Discuss the concept of 'Time Slicing' and 'Concurrent Mode' (now 'Concurrent Features') in React. How do they aim to improve perceived performance and UI responsiveness, especially for CPU-bound updates?",
    "options": [
      "Time Slicing allows React components to travel through time to predict user interactions and pre-render UI updates.",
      "Concurrent Features in React allow rendering work to be interruptible and resumed later. React can break up long rendering tasks into smaller chunks (time slicing) and yield to the browser's main thread periodically. This prevents rendering from blocking user input or other high-priority tasks (like animations), improving perceived performance and responsiveness. It enables features like `startTransition` to mark updates as non-urgent.",
      "Concurrent Mode is a special mode in React that makes all JavaScript execution run on multiple CPU cores simultaneously.",
      "Time Slicing is a CSS technique for animating elements by slicing them into time-based segments."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  },
  {
    "question": "What is the 'Paint Holding' mechanism in browsers, and how does it relate to improving the user experience during navigations, especially for SPAs?",
    "options": [
      "A browser feature that holds onto paint cans to prevent them from spilling during page rendering.",
      "Paint holding is a browser optimization where, during a same-origin navigation (e.g., in an SPA), the browser may briefly 'hold' onto the pixels of the previous page's content while the new page is loading and rendering. This can reduce the perception of a blank screen or 'flash of white' between views, making navigations feel smoother and faster. It's an automatic browser behavior.",
      "A CSS property (`paint-holding`) that developers can use to control how long paint events are held.",
      "A JavaScript API for explicitly holding and releasing paint operations for custom rendering control."
    ],
    "answer": 1,
    "category": "Frontend",
    "difficulty": 4
  }
]
