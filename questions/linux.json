[
  {
    "question": "Who is considered the creator of the Linux kernel?",
    "options": ["Richard Stallman", "Bill Gates", "Steve Jobs", "Linus Torvalds"],
    "answer": 3,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Linux is a clone of which operating system?",
    "options": ["Windows", "macOS", "UNIX", "DOS"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is the core component of the Linux operating system called?",
    "options": ["Shell", "Kernel", "GUI", "System Utilities"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is used to list files and directories in Linux?",
    "options": ["dir", "list", "show", "ls"],
    "answer": 3,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is used to change the current directory in Linux?",
    "options": ["change", "chgdir", "cd", "goto"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is used to create a new directory in Linux?",
    "options": ["newdir", "crdir", "mkdir", "makedir"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is used to remove (delete) a file in Linux?",
    "options": ["del", "erase", "remove", "rm"],
    "answer": 3,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is used to remove (delete) an empty directory in Linux?",
    "options": ["rmdir", "deldir", "removedir", "rd"],
    "answer": 0,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is used to copy files or directories in Linux?",
    "options": ["copy", "xcopy", "cp", "duplicate"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is used to move or rename files or directories in Linux?",
    "options": ["move", "rename", "mv", "transfer"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is used to display the content of a text file on the terminal?",
    "options": ["show", "display", "type", "cat"],
    "answer": 3,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is used to display the content of a file page by page (or screen by screen)?",
    "options": ["more (or less)", "page", "view", "scroll"],
    "answer": 0,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is the command to find out your current working directory?",
    "options": ["cwd", "whereami", "pwd", "showpath"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is used to change file permissions in Linux?",
    "options": ["chown", "chgrp", "chmod", "perm"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "In `chmod 755 myfile`, what does the '7' represent for the owner's permissions?",
    "options": ["Read only", "Read and write", "Read, write, and execute", "Execute only"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is used to change the owner of a file or directory?",
    "options": ["chmod", "chown", "chgrp", "owner"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is used to change the group ownership of a file or directory?",
    "options": ["chown", "chmod", "chgrp", "group"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is the superuser (administrator) account name in Linux typically called?",
    "options": ["admin", "supervisor", "root", "sysop"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is often used to execute a command with superuser privileges?",
    "options": ["runas", "admin", "su", "sudo"],
    "answer": 3,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is used to display running processes on a Linux system?",
    "options": ["proc", "listproc", "ps", "showtasks"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is used to terminate a running process, often using its Process ID (PID)?",
    "options": ["stop", "end", "terminate", "kill"],
    "answer": 3,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is the purpose of the `grep` command?",
    "options": ["To format text files", "To search for patterns (e.g., text strings, regular expressions) in files or input streams", "To compress files", "To edit text files"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is the `find` command used for?",
    "options": ["To find text within a file", "To search for files and directories in a directory hierarchy based on various criteria (e.g., name, type, size, modification time)", "To find user accounts", "To locate network devices"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which symbol is used for redirecting the standard output of a command to a file, overwriting the file if it exists?",
    "options": [">>", "<", "|", ">"],
    "answer": 3,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which symbol is used for redirecting the standard output of a command to a file, appending to the file if it exists?",
    "options": [">", "<", ">>", "|"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What does the pipe symbol `|` do in a Linux command line?",
    "options": ["Redirects output to a file", "Takes the standard output of the command on its left and uses it as the standard input for the command on its right", "Executes commands in parallel", "Separates multiple commands to be run sequentially"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is used to display the manual page (documentation) for another command (e.g., `man ls`)?",
    "options": ["help", "doc", "info", "man"],
    "answer": 3,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is a 'shell' in Linux?",
    "options": ["The outer casing of the computer", "A command-line interpreter or program that provides a user interface for accessing the services of the operating system kernel (e.g., Bash, Zsh, Fish)", "A type of kernel module", "A graphical user interface"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Bash (Bourne Again SHell) is a popular:",
    "options": ["Linux kernel version", "Text editor", "Command-line shell and scripting language", "Desktop environment"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is used to archive files, often used with compression (e.g., `tar -czvf archive.tar.gz files`)?",
    "options": ["zip", "pack", "archive", "tar"],
    "answer": 3,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `gzip` command is used for:",
    "options": ["Creating ZIP archives", "Compressing files (often used with `tar`) using Lempel-Ziv coding (LZ77)", "Extracting RAR archives", "Viewing image files"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `gunzip` command is used for:",
    "options": ["Unzipping `.zip` files", "Decompressing files compressed with `gzip` (often `.gz` extension)", "Viewing gzipped files without decompressing", "Encrypting files"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is used to display disk space usage for file systems?",
    "options": ["du", "free", "df", "space"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is used to display disk usage of files and directories?",
    "options": ["df", "usage", "du", "filesize"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command displays the amount of free and used memory in the system?",
    "options": ["meminfo", "top", "vmstat", "free"],
    "answer": 3,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `top` command provides a dynamic real-time view of:",
    "options": ["Disk I/O statistics", "Network traffic", "Running processes, CPU usage, memory usage, and other system information", "The top-level directory structure"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is used to create a symbolic link (soft link) in Linux?",
    "options": ["link -s", "mklink", "ln -s", "symlink"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is a symbolic link (soft link)?",
    "options": ["A copy of a file", "A special type of file that contains a reference (path) to another file or directory. It acts as a pointer or shortcut.", "A link between two running processes", "A hardware link between devices"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is a hard link?",
    "options": ["A link that is physically hard to break", "A directory entry that associates a name with a file on a file system. Multiple hard links can point to the same underlying file data (inode). Deleting one hard link does not delete the file data until all hard links are removed. They usually cannot span file systems.", "A very secure link", "A link to a hardware device"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `ifconfig` command (older, `ip addr` is newer) is used to:",
    "options": ["Configure if-then statements in scripts", "Configure and display network interface parameters (e.g., IP address, netmask, MAC address)", "Check file configurations", "Control firewall settings"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `ping` command is used to:",
    "options": ["Send a message to another user", "Test network connectivity to a host by sending ICMP echo request packets and waiting for echo replies", "Measure network bandwidth", "Ping the system administrator"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `netstat` command is used to display:",
    "options": ["The current network status of your internet provider", "Network connections (both incoming and outgoing), routing tables, interface statistics, masquerade connections, multicast memberships, etc.", "Statistics about .NET applications", "The status of all network devices"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is used to download files from the internet via HTTP, HTTPS, or FTP from the command line (common utility)?",
    "options": ["download", "getfile", "ftp", "wget (or curl)"],
    "answer": 3,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `curl` command is a versatile tool for:",
    "options": ["Curling text on the screen", "Transferring data to or from a server, using various protocols like HTTP, HTTPS, FTP, SCP, etc. It can be used for API testing, downloading files, and more.", "Managing user curls (hairstyles)", "Encrypting network data"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is SSH (Secure Shell) used for?",
    "options": ["Securing HTML web pages", "A cryptographic network protocol for operating network services securely over an unsecured network, commonly used for remote login and command execution.", "A type of secure hardware shell", "Encrypting shell scripts"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The command `ssh user@hostname` is used to:",
    "options": ["Send a secure message to 'user'", "Establish a Secure Shell connection to the machine 'hostname' as 'user'", "Check the SSH status of 'hostname'", "Set the SSH key for 'user'"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is the purpose of the `/etc/passwd` file?",
    "options": ["To store encrypted user passwords (older systems, now often in /etc/shadow)", "To store user account information (e.g., username, user ID, group ID, home directory, default shell)", "A list of all files a user has passed through", "A log of password change attempts"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is the purpose of the `/etc/shadow` file?",
    "options": ["To store user profile pictures (shadows)", "To securely store encrypted user passwords and password aging information. It is typically readable only by root.", "A list of shadow IT applications", "A backup copy of the `/etc/passwd` file"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is the purpose of the `/etc/group` file?",
    "options": ["To group files by type", "To define user groups and their members", "A list of all groups of processes", "A configuration file for groupware applications"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `PATH` environment variable in Linux specifies:",
    "options": ["The full path to the current directory", "A list of directories that the shell searches for executable files when a command is entered without an explicit path", "The path to the user's home directory", "The path to system log files"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is used to display or set environment variables?",
    "options": ["setvar", "env (displays all) / export (sets and exports for child processes)", "var", "config"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is a 'daemon' process in Linux?",
    "options": ["A malicious process", "A background process that is not under the direct control of an interactive user, often started at boot time and performing system tasks (e.g., web server, cron daemon, sshd)", "A process that has been terminated", "A user interface process"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Systemd is a widely used:",
    "options": ["Linux distribution", "Desktop environment", "System and service manager for Linux, responsible for bootstrapping the user space and managing system processes after boot", "File system type"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `journalctl` command is often used with systemd to:",
    "options": ["Manage user journals", "Query and display messages from the systemd journal (system logs)", "Create new journal entries", "Configure journal settings"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is commonly used to install, update, and remove software packages on Debian-based Linux distributions (like Ubuntu)?",
    "options": ["yum", "pacman", "zypper", "apt (or apt-get)"],
    "answer": 3,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which command is commonly used to install, update, and remove software packages on Red Hat-based Linux distributions (like Fedora, CentOS)?",
    "options": ["apt", "pacman", "yum (older) / dnf (newer)", "emerge"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is a 'package manager' in Linux?",
    "options": ["A manager for physical software packages", "A collection of software tools that automates the process of installing, upgrading, configuring, and removing computer programs for a computer's operating system in a consistent manner. It often handles dependencies.", "A person who manages software distribution", "A system for tracking mail packages"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `/bin` directory typically contains:",
    "options": ["User home directories", "Essential user command binaries needed for system operation, often available in single-user mode", "System configuration files", "Temporary files"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `/sbin` directory typically contains:",
    "options": ["Shared libraries", "Essential system binaries, primarily for system administration tasks, often needed before other file systems are mounted (e.g., `init`, `fdisk`, `ifconfig`)", "Source code for binaries", "Sample binary files"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `/usr/bin` directory typically contains:",
    "options": ["User-specific binaries only", "The majority of user-level command binaries that are not essential for system booting or repair", "Binaries for the 'usr' user account", "Universal serial bus (USB) binaries"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `/etc` directory primarily contains:",
    "options": ["Executable files", "User home directories", "System-wide configuration files and scripts", "Temporary files"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `/var` directory primarily contains:",
    "options": ["Static system files", "Variable data files, such as logs, spool files (e.g., for mail and printing), and temporary files that are expected to change in size", "User binaries", "Virtual file systems"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `/home` directory typically contains:",
    "options": ["System configuration files", "User home directories, where users store their personal files and settings", "The operating system kernel", "Temporary files for all users"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `/tmp` directory is used for:",
    "options": ["Permanent storage of important files", "Temporary files that can be deleted without notice (e.g., often cleared on reboot)", "System templates", "User profile pictures"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `/dev` directory contains:",
    "options": ["Development tools and libraries", "Special files or device files that represent hardware devices (e.g., hard drives, terminals, printers)", "User documents", "Network configuration files"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `/proc` directory is a virtual file system that provides:",
    "options": ["Processor microcode", "Information about currently running processes and system hardware (kernel parameters, status)", "Program source code", "User profiles"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is a 'file system' in Linux?",
    "options": ["A system for managing physical files in an office", "A method and data structure that an operating system uses to control how data is stored and retrieved on a storage device (e.g., hard drive, SSD). It organizes files into a hierarchy of directories.", "A collection of all files on the system", "A security system for files"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Ext4, XFS, and Btrfs are examples of:",
    "options": ["Linux distributions", "Desktop environments", "Linux file systems", "Shell types"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "An 'inode' in a Unix-like file system stores:",
    "options": ["The file's content directly", "Metadata about a file (e.g., permissions, owner, size, timestamps, and pointers to the data blocks) but not the filename or the data itself", "A node in a network", "Input/output device information"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `mount` command is used to:",
    "options": ["Mount a physical device onto a server rack", "Attach a file system (e.g., on a hard drive partition, USB drive, or network share) to a specific directory (mount point) in the main file system hierarchy, making its contents accessible.", "Unmount a file system", "Display mounted file systems"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `umount` command is used to:",
    "options": ["Count the number of mounts", "Detach a mounted file system from its mount point", "Mount a universal file system", "Check for unmounted devices"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `/etc/fstab` file contains:",
    "options": ["A list of failed system startups", "Information about file systems and how they should be mounted, typically at boot time (e.g., device, mount point, file system type, mount options)", "A table of frequently accessed files", "Firewall status and configuration"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is 'swap space' in Linux?",
    "options": ["Space for swapping user accounts", "A portion of a hard disk (or a file) that is used as virtual memory when the system runs out of physical RAM. Inactive pages from RAM can be moved to swap space.", "A temporary space for swapping files between users", "A shared buffer for inter-process communication"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `mkswap` command is used to:",
    "options": ["Make a swap with another user", "Set up a Linux swap area on a device or in a file", "Activate swap space", "Display swap usage"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `swapon` command is used to:",
    "options": ["Turn on a swap meet", "Enable a device or file for swapping", "Deactivate swap space", "Format a swap partition"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is 'cron' in Linux?",
    "options": ["A type of corn grown by Linux users", "A time-based job scheduler daemon that runs commands or scripts at specified intervals or times, as defined in crontab files.", "A cryptographic anachronism", "A tool for managing user chronicles"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `crontab -e` command is used to:",
    "options": ["Erase all cron jobs", "Edit the current user's crontab file (which contains their scheduled cron jobs)", "Execute a cron job immediately", "Email cron job status"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "A typical crontab entry has five fields for time/date specification, representing (in order):",
    "options": ["Second, Minute, Hour, Day of Month, Month", "Minute, Hour, Day of Month, Month, Day of Week", "Hour, Day of Month, Month, Day of Week, Year", "Day of Week, Day of Month, Month, Hour, Minute"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is `iptables` (or its successor `nftables`) used for?",
    "options": ["Creating tables in a database", "A user-space utility program that allows a system administrator to configure the IP packet filter rules of the Linux kernel firewall (Netfilter module).", "Displaying IP routing tables", "Managing tables of IP addresses"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The 'kernel' is often described as the _______ of the operating system.",
    "options": ["User interface", "Core or nucleus", "Application layer", "Shell"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is a 'loadable kernel module' (LKM) in Linux?",
    "options": ["A module for loading heavy files into the kernel", "An object file that contains code to extend the functionality of the running kernel. LKMs can be loaded and unloaded at runtime, allowing for dynamic addition of features like device drivers or file systems.", "A kernel module that is always loaded at boot", "A user-space program that interacts with the kernel"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `lsmod` command displays:",
    "options": ["A list of all shell modules", "The status of modules currently loaded in the Linux kernel", "A list of modified files", "The last modified date of kernel modules"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `insmod` command is used to:",
    "options": ["Inspect kernel modules", "Insert (load) a kernel module into the running kernel", "Install software modules", "Instrument kernel modules for debugging"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `rmmod` command is used to:",
    "options": ["Remove all modules", "Remove (unload) a currently loaded kernel module", "Rename a kernel module", "Repair a damaged kernel module"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is `dmesg` command used for?",
    "options": ["To send a direct message to another user", "To print or control the kernel ring buffer, which contains messages from the kernel, often related to hardware detection, device drivers, and system startup.", "To measure network message latency", "To manage user desktop messages"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `uname -a` command typically displays:",
    "options": ["Only the username", "All available system information, including kernel name, hostname, kernel release, kernel version, machine hardware name, and operating system.", "The user's A-level qualifications", "Available disk space"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is 'GNU' (GNU's Not Unix)?",
    "options": ["A type of African antelope often found near Linux servers", "A large collection of free software, including an operating system kernel (GNU Hurd, though Linux kernel is more common), system utilities, libraries, and applications, developed by the GNU Project founded by Richard Stallman. The Linux operating system often refers to the combination of the Linux kernel with GNU software.", "A new version of Unix", "A graphical user interface for Unix"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The GNU General Public License (GPL) is a widely used:",
    "options": ["Proprietary software license", "Free software license that guarantees end users the freedom to run, study, share, and modify the software. It is a copyleft license, meaning derivative works must also be distributed under the same or compatible GPL terms.", "A license for general public use of hardware", "A specific type of commercial software license"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is a 'Linux distribution' (e.g., Ubuntu, Fedora, Debian, Arch Linux)?",
    "options": ["The physical distribution of Linux CDs/DVDs", "An operating system made from a software collection that is based upon the Linux kernel and, often, a package management system. It typically includes the Linux kernel, GNU tools and libraries, additional software, documentation, a window system (like X11 or Wayland), and a desktop environment.", "A way to distribute tasks across multiple Linux servers", "A specific version of the Linux kernel"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is X11 (or X Window System)?",
    "options": ["The 11th version of the X operating system", "A windowing system for bitmap displays, common on Unix-like operating systems. It provides the basic framework for a GUI environment: drawing and moving windows on the screen and interacting with a mouse and keyboard. It uses a client-server model.", "A specific desktop environment", "A command-line interface for X-rated content"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "GNOME and KDE Plasma are popular examples of:",
    "options": ["Linux kernels", "Command-line shells", "Desktop environments for Linux and other Unix-like systems, providing a graphical user interface with windows, icons, menus, panels, etc.", "Package managers"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is a 'runlevel' in older SysVinit systems (systemd uses targets)?",
    "options": ["The level of fitness required to run Linux", "A mode of operation in Unix-like operating systems, defining which system services are started. Common runlevels include single-user mode, multi-user mode without networking, multi-user mode with networking, and system shutdown/reboot.", "The current execution level of a program", "A security level for user access"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `shutdown` command is used to:",
    "options": ["Shut down a specific application", "Bring the system down in a secure way, either halting, rebooting, or powering off. It typically notifies users and stops services gracefully.", "Shut down the user's display only", "Force close all network connections"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `reboot` command typically does what?",
    "options": ["Reboots only the kernel", "Restarts the computer system", "Reboots the network interface", "Reloads the user's shell configuration"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `history` command in Bash displays:",
    "options": ["The history of Linux development", "A list of previously executed commands in the current shell session", "The browsing history of the user", "The modification history of a file"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `alias` command in Bash is used to:",
    "options": ["Create an alias (alternative name) for a user account", "Create a shortcut or an alternative name for a command or a sequence of commands", "Manage network aliases", "Define aliases for file types"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is a 'shebang' (e.g., `#!/bin/bash`) at the beginning of a script file?",
    "options": ["A command to make the script explode (bang)", "An interpreter directive that specifies the path to the interpreter (e.g., Bash, Python) that should be used to execute the script when the script file itself is run as an executable.", "A type of shell variable", "A comment indicating the script's author"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "File permissions in Linux are typically represented by three sets of read (r), write (w), and execute (x) permissions for:",
    "options": ["User, System, Network", "Owner (user), Group, Others", "Admin, User, Guest", "Read, Write, Execute (these are the permissions, not who they apply to)"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The octal permission `777` for a file or directory means:",
    "options": ["Only the owner has read, write, execute permissions", "Everyone (owner, group, others) has read, write, and execute permissions", "No one has any permissions", "The file is lucky"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The octal permission `644` for a file typically means:",
    "options": ["Owner: read/write; Group: read-only; Others: read-only", "Owner: read-only; Group: read/write; Others: read-only", "Owner: read/write/execute; Group: execute-only; Others: execute-only", "Everyone has read-only access"],
    "answer": 0,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is the `umask` command or setting used for?",
    "options": ["To unmask a user's identity", "To set the default file permission mask for newly created files and directories. The umask subtracts permissions from the default (e.g., 666 for files, 777 for directories).", "To remove all masks from network interfaces", "A tool for creating user interface masks"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `chroot` command is used to:",
    "options": ["Change the root password", "Change the root directory of the current running process and its children. This creates a confined environment where the process sees the specified directory as its root ('/'). Often used for security or testing.", "List all files in the root directory", "Check the health of the root file system"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "What is `SELinux` (Security-Enhanced Linux)?",
    "options": ["A Linux distribution focused on security", "A Linux kernel security module that provides a mechanism for supporting access control security policies, including mandatory access controls (MAC).", "A secure version of the Linux shell", "A tool for scanning Linux systems for security vulnerabilities"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is `AppArmor`?",
    "options": ["A suit of armor for Linux developers", "A Linux kernel security module that allows the system administrator to restrict programs' capabilities with per-program profiles. It supplements traditional Unix discretionary access control (DAC) by providing mandatory access control (MAC).", "A tool for hardening application code", "A firewall for protecting Linux applications"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `whoami` command displays:",
    "options": ["A list of all logged-in users", "The username of the current effective user", "Information about the 'ami' user", "The system's hostname"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `id` command displays:",
    "options": ["The system's unique hardware ID", "The real and effective user and group IDs for the current user or a specified user", "The process ID of the current shell", "A list of all available user IDs"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is a 'TTY' (Teletypewriter) in a Unix-like context?",
    "options": ["A specific brand of typewriter", "Historically a teletypewriter device, now generally refers to any terminal device that allows text-based interaction with the system, including physical consoles, serial ports, and pseudo-terminals (e.g., for SSH sessions or terminal emulators in a GUI).", "A type of printer", "A telecommunication protocol"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `>` redirection operator creates a file if it doesn't exist, and overwrites it if it does. True or False?",
    "options": ["True", "False, it only appends", "False, it creates but doesn't overwrite", "False, it requires an explicit overwrite flag"],
    "answer": 0,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `>>` redirection operator creates a file if it doesn't exist, and appends to it if it does. True or False?",
    "options": ["True", "False, it only overwrites", "False, it creates but doesn't append", "False, it requires an explicit append flag"],
    "answer": 0,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Standard input (stdin) usually comes from:",
    "options": ["The screen", "The keyboard (in an interactive shell) or can be redirected from a file or the output of another command", "A file by default", "The network"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Standard output (stdout) usually goes to:",
    "options": ["A log file", "The screen (in an interactive shell) or can be redirected to a file or the input of another command", "The printer", "A network socket"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Standard error (stderr) is typically used for:",
    "options": ["Storing standard error codes", "Outputting error messages and diagnostic information from programs, usually displayed on the screen by default but can be redirected separately from stdout.", "Sending errors to a remote server", "Logging all program output, including non-errors"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "How can you redirect both stdout and stderr of a command `cmd` to a file `output.log` in Bash?",
    "options": ["`cmd > output.log`", "`cmd &> output.log` (or `cmd > output.log 2>&1`)", "`cmd >> output.log stderr`", "`cmd | output.log`"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What does `2>&1` mean in a Bash command?",
    "options": ["Redirect stdout (1) to stderr (2)", "Redirect stderr (file descriptor 2) to the same location as stdout (file descriptor 1)", "Multiply file descriptor 2 by file descriptor 1", "A mathematical expression"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `head` command displays:",
    "options": ["The header section of a file", "The first few lines of a file (10 by default)", "The beginning of a command's output", "The most important files in a directory"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `tail` command displays:",
    "options": ["The footer section of a file", "The last few lines of a file (10 by default). Often used with `-f` to follow new lines appended to a file (e.g., logs).", "The end of a command's output", "The least important files in a directory"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `wc` command (word count) can display:",
    "options": ["Only the number of words in a file", "The number of newlines, words, and bytes in a file or input stream", "The weather conditions (WC)", "The working C compiler version"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `sort` command is used to:",
    "options": ["Sort files by type", "Sort lines of text files alphabetically or numerically", "Organize directories", "Sort processes by CPU usage"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `uniq` command is used to:",
    "options": ["Make all lines in a file unique by encrypting them", "Filter adjacent matching lines from sorted input, typically outputting only unique lines (or counting occurrences with options)", "Find unique user IDs", "Create unique file identifiers"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `diff` command is used to:",
    "options": ["Calculate the difference between two numbers", "Compare two files line by line and display the differences between them", "Find files with different permissions", "Show the difference in disk space usage"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `patch` command is often used with the output of `diff` to:",
    "options": ["Apply a software patch to the kernel", "Apply changes described in a diff file (a patch) to an original file, updating it to a new version", "Patch holes in network security", "Create a patch of cloth for a Linux mascot"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is a 'regular expression' (regex)?",
    "options": ["An expression that is always regular and predictable", "A sequence of characters that defines a search pattern, used for string matching and manipulation. Tools like `grep`, `sed`, `awk`, and many programming languages support regex.", "A mathematical expression used in regular calculus", "An expression that follows strict grammatical rules"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `sed` command (stream editor) is primarily used for:",
    "options": ["Securely editing encrypted files", "Performing basic text transformations (e.g., search and replace, deletion, insertion) on an input stream or files, line by line, non-interactively.", "Setting editor preferences", "A simple text editor like `ed`"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `awk` command is a powerful:",
    "options": ["Tool for managing awkward situations", "Pattern scanning and processing language, often used for text manipulation, data extraction, and reporting from structured text files or command output. It processes input line by line, splitting lines into fields.", "A compiler for the AWK programming language", "A tool for creating artwork with text"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is 'job control' in a shell like Bash?",
    "options": ["Controlling job offers for developers", "The ability to manage multiple processes (jobs) within a single shell session, including running them in the background (`&`), bringing them to the foreground (`fg`), suspending them (`Ctrl+Z`), and listing them (`jobs`).", "A system for controlling access to specific jobs/tasks", "A way to schedule jobs like `cron`"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `fg` command in Bash is used to:",
    "options": ["Find a global variable", "Bring a background or suspended job to the foreground, making it the active process in the terminal.", "Format a file globally", "Fetch a group ID"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `bg` command in Bash is used to:",
    "options": ["Set the background color of the terminal", "Resume a suspended job and run it in the background.", "Backup a global file", "Browse for graphics"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Pressing `Ctrl+C` in a terminal usually:",
    "options": ["Copies the selected text", "Sends an interrupt signal (SIGINT) to the foreground process, often causing it to terminate.", "Pastes copied text", "Clears the screen"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Pressing `Ctrl+Z` in a terminal usually:",
    "options": ["Undoes the last command", "Sends a suspend signal (SIGTSTP) to the foreground process, pausing its execution. It can often be resumed with `fg` or `bg`.", "Zips the current directory", "Closes the terminal window"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `nohup` command is used to:",
    "options": ["Prevent a command from being logged in history", "Run a command immune to hangups (SIGHUP signal), allowing it to continue running even if the user logs out or the terminal is closed. Output is often redirected to `nohup.out`.", "Disable all signals for a command", "A command that does nothing ('no op')"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is a 'signal' in Unix-like systems?",
    "options": ["A traffic signal for processes", "A limited form of inter-process communication used to notify a process of an event (e.g., SIGINT for interrupt, SIGTERM for termination request, SIGKILL for forceful termination, SIGHUP for hangup).", "A radio signal used by the kernel", "A visual signal on the user's screen"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "Which signal is typically used to request a graceful termination of a process (allowing it to clean up)?",
    "options": ["SIGKILL (9)", "SIGSTOP (19)", "SIGTERM (15)", "SIGHUP (1)"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "Which signal is used to forcefully terminate a process immediately, without allowing it to clean up?",
    "options": ["SIGTERM (15)", "SIGINT (2)", "SIGKILL (9)", "SIGQUIT (3)"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `/etc/hosts` file is used for:",
    "options": ["Listing all hosts on the local network", "Statically mapping hostnames to IP addresses locally, which is consulted before DNS in many configurations.", "Configuring firewall rules for specific hosts", "Storing information about virtual hosts on a web server"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `/etc/resolv.conf` file typically contains:",
    "options": ["A list of resolved hostnames", "Configuration information for the DNS resolver, such as the IP addresses of DNS name servers to be queried.", "The resolution of the display screen", "Rules for resolving software dependencies"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is NFS (Network File System)?",
    "options": ["A new file system format for servers", "A distributed file system protocol allowing a user on a client computer to access files over a computer network much like local storage is accessed.", "A system for managing non-file system data over a network", "A secure version of FTP"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is Samba in a Linux environment often used for?",
    "options": ["A Brazilian dance program for Linux", "To provide file and print services that are compatible with Microsoft Windows clients, by implementing the SMB/CIFS networking protocol.", "A secure messaging application", "A database server for Samba music"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `df -h` command displays disk space usage in what format?",
    "options": ["Hexadecimal", "Human-readable format (e.g., KB, MB, GB)", "Detailed block-level information", "Only the percentage used"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `du -sh directory_name` command typically shows:",
    "options": ["A detailed list of all files in the directory", "The total disk space usage of the specified directory in a human-readable summary format.", "The shared users of the directory", "The security hash of the directory"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is a 'makefile' used with the `make` utility?",
    "options": ["A file that makes new files automatically", "A file containing a set of directives (rules) used by the `make` build automation tool to determine how to compile and link a program, by specifying dependencies and build commands.", "A list of all files that make up a project", "A file for managing user make-up preferences"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is `gcc`?",
    "options": ["General Console Commander", "The GNU Compiler Collection, a compiler system supporting various programming languages, most notably C and C++.", "Global Code Checker", "Graphical Configuration Center"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is `gdb`?",
    "options": ["General Database Browser", "The GNU Debugger, a portable debugger that runs on many Unix-like systems and works for many programming languages, including C, C++, Go, etc.", "Graphics Display Buffer", "Global Domain Broker"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `ldd` command is used to:",
    "options": ["List disabled devices", "Print the shared object (library) dependencies of an executable file or shared object.", "Load device drivers", "Log disk drive activity"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is a 'shared library' (.so file in Linux)?",
    "options": ["A library of files shared among users", "A file containing compiled code (functions, data) that can be shared and used by multiple programs simultaneously at runtime. This reduces disk space and memory usage, and allows for easier updates.", "A library that can only be accessed by shared processes", "A library that is part of the kernel's shared memory"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is a 'static library' (.a file in Linux)?",
    "options": ["A library that never changes", "A collection of object files that are linked directly into a program at compile time. The library code becomes part of the executable file.", "A library for storing static images", "A library that can only be used by static methods"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `LD_LIBRARY_PATH` environment variable is used to:",
    "options": ["Specify the path to the linker program", "Specify a list of directories where the dynamic linker should search for shared libraries at runtime, in addition to standard locations.", "Set the path for static libraries only", "Define the library used for path manipulation"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is a 'shebang' line (e.g., `#!/usr/bin/env python`) at the start of a script for?",
    "options": ["It's a comment indicating the script's purpose", "It specifies the interpreter that should be used to execute the script when the script file itself is run as an executable program.", "It sets environment variables for the script", "It's a magic sequence for network communication"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is the `xargs` command often used for?",
    "options": ["To define extra arguments for X11 applications", "To build and execute command lines from standard input. It takes output from one command (often a list of file names) and passes it as arguments to another command.", "To manage XML arguments", "A tool for arguing with other users (X-arguments)"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What does `Ctrl+Alt+Delete` typically do on a Linux system with a graphical desktop (if configured)?",
    "options": ["Immediately reboots the system without warning", "Often opens a system dialog for shutdown, reboot, logout, or task manager, depending on the desktop environment configuration. It does not usually cause an immediate hard reset like in some older OSes.", "Deletes all open files", "Closes all applications and logs out"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is a 'filesystem hierarchy standard' (FHS) for Linux?",
    "options": ["A standard for organizing hierarchical data in files", "A standard that defines the main directories and their contents in Linux and other Unix-like operating systems, aiming for consistency across distributions (e.g., `/bin`, `/etc`, `/usr`, `/var`).", "A hierarchy of different file system types", "A standard for user access permissions in a file hierarchy"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is 'Wayland' in the context of Linux graphics?",
    "options": ["A new Linux distribution", "A display server protocol intended as a simpler replacement for X11, aiming to provide a more modern, secure, and efficient graphics stack for Linux and other Unix-like systems.", "A 3D graphics rendering engine", "A window manager for X11"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is 'PulseAudio' or 'PipeWire' often used for in Linux?",
    "options": ["Managing CPU pulse width modulation", "Sound server systems that provide audio mixing, routing, and management capabilities for applications on Linux desktops.", "Generating audio pulses for timing", "A pipeline for processing audio wiretaps"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is 'GRUB' (GRand Unified Bootloader)?",
    "options": ["A tool for finding grubs (larvae) in your system", "A popular bootloader program that allows users to select which operating system to boot from a multi-boot system, or to load a specific kernel configuration for Linux.", "A graphical user interface for booting Linux", "A grub-themed desktop environment"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `fdisk` or `parted` commands are used for:",
    "options": ["Fixing disk errors", "Creating, deleting, and modifying partitions on hard disk drives.", "Formatting disk partitions", "Displaying disk usage statistics"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `mkfs` command (e.g., `mkfs.ext4`) is used to:",
    "options": ["Make a file system secure", "Create a new file system (format) on a disk partition.", "Mount a file system", "Check a file system for errors"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is 'journaling' in a file system (e.g., ext4, XFS)?",
    "options": ["Keeping a personal journal about file system activity", "A technique where changes to the file system metadata (and sometimes data) are first written to a log (the journal) before being applied to the main file system. This helps maintain file system consistency and speeds up recovery after a crash.", "Writing all file content to a journal file for backup", "A file system designed for storing diaries and journals"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `rsync` command is a utility for:",
    "options": ["Synchronizing system clocks", "Efficiently transferring and synchronizing files and directories between two locations (local or remote). It can copy only the differences between source and destination, minimizing data transfer.", "Resynchronizing audio and video streams", "A tool for real-time spell checking"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is `LVM` (Logical Volume Manager) in Linux?",
    "options": ["Large Video Manager", "A system for managing logical volumes (partitions) that provides more flexibility than traditional disk partitioning. It allows for creating, resizing, and managing logical volumes that can span multiple physical disks, and supports features like snapshots.", "Low Voltage Mode for CPUs", "Linux Virtual Machine manager"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is `OpenSSH`?",
    "options": ["An open standard for HTML shell elements", "A suite of open-source network connectivity tools based on the Secure Shell (SSH) protocol, providing encrypted remote login, command execution, and file transfer capabilities (e.g., `ssh`, `scp`, `sftp`).", "A project for opening all SSH ports by default", "An open-source shell for operating systems"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `~` (tilde) character in a Linux shell path usually expands to:",
    "options": ["The root directory (`/`)", "The current user's home directory", "The previous working directory", "A temporary directory"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `.` (dot) character in a Linux shell path represents:",
    "options": ["The parent directory", "The root directory", "The current working directory", "The user's home directory"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `..` (dot-dot) characters in a Linux shell path represent:",
    "options": ["The current working directory", "The user's home directory", "The root directory", "The parent directory of the current working directory"],
    "answer": 3,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is 'globbing' in a Linux shell?",
    "options": ["A way to make files glow on the screen", "The process by which the shell expands wildcard characters (e.g., `*`, `?`, `[]`) in a command line into a list of matching file or directory names before the command is executed.", "A tool for globally searching for text patterns", "Encrypting file names with a glob pattern"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The wildcard `*` in a shell command typically matches:",
    "options": ["Exactly one character", "Any sequence of zero or more characters", "Only files starting with '*' an asterisk", "A specific character '*'"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The wildcard `?` in a shell command typically matches:",
    "options": ["Any sequence of zero or more characters", "Exactly one character", "A question mark character literally", "An optional character"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is a 'shebang' line (e.g., `#!/bin/bash`) for?",
    "options": ["A comment describing the script's purpose", "An interpreter directive that specifies the program (e.g., shell, Python interpreter) to be used to execute the script when the script file itself is run as an executable.", "To set shell options for the script", "A magic number for identifying script files"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is the `chmod +x script.sh` command used for?",
    "options": ["To encrypt `script.sh`", "To make the file `script.sh` executable for the owner, group, and others (depending on umask and existing permissions).", "To change the owner of `script.sh` to 'x'", "To extract files from `script.sh`"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `source` command (or `.`) in Bash is used to:",
    "options": ["Display the source code of a command", "Execute commands from a file in the current shell environment, so that changes to environment variables or shell functions made by the script persist in the current shell.", "Compile a source file", "Find the source of a network connection"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is a 'sticky bit' permission on a directory?",
    "options": ["Makes files in the directory sticky and hard to delete", "When set on a directory, it restricts file deletion or renaming within that directory to only the file's owner, the directory's owner, or the root user, even if other users have write permission to the directory (e.g., `/tmp`).", "Makes the directory always stay in memory", "A bit that indicates the directory is part of a sticky session"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "What is the `setuid` (Set User ID) permission bit on an executable file?",
    "options": ["Allows any user to change the user ID of the file's owner", "When set on an executable file, it allows a user running that program to execute it with the permissions of the file's owner, rather than their own. This is used for programs that need elevated privileges for specific tasks (e.g., `passwd`).", "Sets the user ID for all files in a directory", "A bit that indicates the file can only be executed by its owner"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "What is the `setgid` (Set Group ID) permission bit on an executable file or directory?",
    "options": ["Allows any user to change the group ID of the file's owner", "On an executable file, it allows the program to run with the permissions of the file's group. On a directory, new files and subdirectories created within it inherit the group ID of the directory, rather than the primary group ID of the user who created them.", "Sets the group ID for all files globally", "A bit that indicates the file/directory can only be accessed by its group"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "The `nice` command is used to:",
    "options": ["Make the command output look nicer", "Influence the scheduling priority of a process. A higher nice value means lower priority (less CPU time).", "Set a process to be 'nice' to other processes by yielding CPU frequently", "Check if a process is behaving nicely"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `renice` command is used to:",
    "options": ["Rename a nice process", "Change the scheduling priority (nice value) of an already running process.", "Make a process nicer again after it was rude", "Restore the default priority of a process"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is a 'zombie process' in Linux?",
    "options": ["A process that has come back from the dead", "A process that has completed execution (terminated) but still has an entry in the process table because its parent process has not yet read its exit status (e.g., via `wait()`). It consumes minimal resources but can indicate a problem with the parent.", "A very slow, unresponsive process", "A malicious process that infects other processes"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is an 'orphan process' in Linux?",
    "options": ["A process that has no parent directory", "A running process whose original parent process has terminated. Orphan processes are typically 'adopted' by the `init` process (PID 1) or a subreaper process.", "A process that has lost its user association", "A process that is not part of any process group"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `strace` command is a debugging utility that:",
    "options": ["Traces string manipulations in a program", "Intercepts and records the system calls made by a process and the signals received by it. Useful for debugging and understanding program behavior at the system call level.", "Traces the call stack of a running process", "Provides a summary trace of network activity"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "The `lsof` command (List Open Files) displays:",
    "options": ["A list of all files that are soft links", "Information about files opened by processes on the system, including regular files, directories, block special files, character special files, network sockets, pipes, etc.", "A list of files that have been recently modified ('left open')", "Software licenses that are currently open (in use)"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is the `syslog` daemon (e.g., `rsyslogd`, `syslog-ng`) typically responsible for?",
    "options": ["Logging system startup and shutdown events only", "Collecting, processing, and forwarding system log messages from various sources (kernel, applications, daemons) to local files (e.g., `/var/log/syslog`, `/var/log/messages`) or remote log servers.", "Managing user login sessions and logging them", "A daemon for synchronizing system clocks and logging discrepancies"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `logrotate` utility is used to:",
    "options": ["Rotate display screens for better log viewing", "Automate the management of log files, including rotating (archiving old logs and starting new ones), compressing, and removing log files to prevent them from consuming excessive disk space.", "Rotate log entries within a single log file", "Encrypt log files by rotating a key"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is a 'core dump'?",
    "options": ["A dump of the CPU's core temperature readings", "A file containing the recorded state of the working memory (and often CPU registers) of a computer program at a specific time, generally when the program has terminated abnormally (crashed). Used for post-mortem debugging.", "A dump of the kernel's core data structures", "A backup of the core system files"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is 'RAID 0' (striping)?",
    "options": ["A RAID level that provides data mirroring for redundancy", "A RAID level that splits data evenly across two or more disks without parity information, redundancy, or fault tolerance. Its purpose is to improve performance (throughput for large files) by allowing parallel access.", "A RAID level that uses a dedicated parity disk", "A RAID level that has zero fault tolerance and zero performance improvement"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is 'RAID 1' (mirroring)?",
    "options": ["A RAID level that stripes data across multiple disks for performance", "A RAID level that replicates (mirrors) data identically on two or more disks. It provides data redundancy and fault tolerance (if one disk fails, data is still available on the other(s)) and can improve read performance.", "A RAID level that uses distributed parity", "A RAID level with only one disk"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is 'RAID 5' (striping with distributed parity)?",
    "options": ["A RAID level that uses two dedicated parity disks", "A RAID level that stripes data and parity information across three or more disks. It provides data redundancy (can withstand failure of one disk) and good read performance. Write performance can be slower due to parity calculations.", "A RAID level that only provides data striping without parity", "A RAID level that mirrors data across five disks"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is 'RAID 6' (striping with dual distributed parity)?",
    "options": ["A RAID level that uses six disks by default", "A RAID level similar to RAID 5, but it uses two independent parity blocks distributed across the disks. This allows it to withstand the failure of up to two disks simultaneously, providing higher fault tolerance than RAID 5.", "A RAID level that mirrors data six times", "A RAID level that provides six times the performance of a single disk"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is 'RAID 10' (or RAID 1+0)?",
    "options": ["A RAID level that combines ten disks into one logical volume", "A nested RAID level that combines mirroring (RAID 1) and striping (RAID 0). It creates mirrored sets of disks, and then stripes data across these mirrored sets. It provides both redundancy and performance.", "A RAID level that uses ten parity bits per block", "A specific type of RAID controller with 10 ports"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `ssh-keygen` command is used to:",
    "options": ["Generate a new SSH server configuration", "Generate, manage, and convert authentication keys for SSH (e.g., creating public/private key pairs for passwordless login).", "Encrypt files using SSH keys", "Check the version of the SSH key format"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `~/.ssh/authorized_keys` file on a server contains:",
    "options": ["The server's private SSH key", "A list of public SSH keys that are authorized to log into the user's account on that server without a password.", "A list of users authorized to use SSH on the server", "Encrypted SSH keys for all users"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `scp` (Secure Copy) command uses which protocol for file transfer?",
    "options": ["FTP", "HTTP", "SSH (Secure Shell) to provide encrypted file transfer between hosts on a network.", "TFTP"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `sftp` (SSH File Transfer Protocol) command provides:",
    "options": ["A faster version of FTP without security", "A secure file transfer program that runs over an SSH connection, offering an interactive interface similar to FTP but with encryption and authentication provided by SSH.", "A protocol for transferring very small files only", "A way to synchronize FTP servers securely"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is a 'tty' or 'pty' in Linux?",
    "options": ["A type of tea popular among Linux users", "TTY (Teletypewriter) historically refers to a physical terminal. PTY (Pseudo-Terminal) is a pair of virtual character devices that provide a bidirectional communication channel, emulating a terminal. Used for terminal emulators, SSH sessions, etc.", "Aty-pical process", "Apretty-tasty-yaml file"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `screen` or `tmux` utilities are often used for:",
    "options": ["Screen recording", "Managing multiple persistent terminal sessions within a single terminal window, allowing users to detach from sessions and reattach later, even after disconnecting and reconnecting.", "Adjusting screen resolution", "Sharing screens with other users"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is 'shell scripting'?",
    "options": ["Writing scripts for seashell analysis", "Writing programs using a shell language (like Bash) to automate tasks, manage files, run other programs, and control system operations.", "A way to encrypt shell commands", "A graphical interface for scripting"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What does `$?` typically contain in a Bash script after a command executes?",
    "options": ["The process ID of the command", "The exit status of the last executed command (0 usually means success, non-zero usually means an error).", "The output of the command", "The current time"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What does `$#` represent in a Bash script?",
    "options": ["The script's filename", "The number of command-line arguments passed to the script.", "The process ID of the script", "A special character for comments"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What does `$@` (or `$*` with some differences in quoting) represent in a Bash script?",
    "options": ["The at symbol '@'", "All command-line arguments passed to the script, as a list of strings.", "The current user's email address", "A placeholder for standard output"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What does `$0` represent in a Bash script?",
    "options": ["The first command-line argument", "The name of the script itself (as it was invoked).", "A variable that is always zero", "The exit status if no command was run"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `if [ condition ]; then ... fi` structure in Bash is used for:",
    "options": ["Defining a function", "Looping based on a condition", "Conditional execution of commands based on whether `condition` evaluates to true.", "Importing files conditionally"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `test` command (or `[` `]`) in Bash is often used for:",
    "options": ["Running unit tests for scripts", "Evaluating conditional expressions, such as comparing strings, checking file types, or comparing numbers.", "Testing network connectivity", "A placeholder for test code"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is the purpose of `set -e` in a Bash script?",
    "options": ["To enable extended globbing", "To cause the script to exit immediately if any command fails (returns a non-zero exit status), unless the command is part of a conditional test or a list where failure is explicitly handled.", "To set environment variables", "To edit the script while it's running"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is the purpose of `set -u` (or `set -o nounset`) in a Bash script?",
    "options": ["To make all variables uppercase", "To treat unset variables and parameters (other than special parameters like `@` or `*`) as an error when performing parameter expansion, causing the script to exit. Helps catch typos or use of uninitialized variables.", "To update all packages used by the script", "To undefine all shell functions"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is the purpose of `set -o pipefail` in a Bash script?",
    "options": ["To make pipes fail more easily for testing", "To cause a pipeline (e.g., `cmd1 | cmd2 | cmd3`) to return a non-zero exit status if any command in the pipeline fails, rather than just returning the exit status of the last command in the pipeline (which is the default behavior).", "To redirect pipe output to a file named 'pipefail'", "To set options for inter-process communication pipes"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is a 'here document' (e.g., `cat << EOF ... EOF`) in shell scripting?",
    "options": ["A document that is stored here, in the current directory", "A way to feed multiple lines of input to a command as if they were typed directly, by redirecting input from lines within the script itself, delimited by a specified marker (e.g., `EOF`).", "A document explaining the `here` command", "A link to a document located here (on this server)"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is 'command substitution' in Bash (e.g., `output=$(command)` or `` `command` ``)?",
    "options": ["Substituting one command for another if the first one fails", "A mechanism that allows the output of a command to replace the command itself in a command line. The shell executes the command in parentheses or backticks and substitutes its standard output.", "A way to define substitute commands (aliases)", "Substituting user input into a command template"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is `inotify` in Linux?",
    "options": ["A tool for notifying users about important system events", "A Linux kernel subsystem that provides a mechanism for monitoring file system events (e.g., file creation, deletion, modification, access) and notifying applications when these events occur.", "A way to identify non-standard file types", "An 'I-node' notification system for file system integrity"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "What are 'cgroups' (control groups) in Linux?",
    "options": ["Groups of C programmers", "A Linux kernel feature that allows organizing processes into hierarchical groups and allocating, limiting, prioritizing, and accounting for their resource usage (e.g., CPU, memory, disk I/O, network bandwidth). It's a key technology behind containerization.", "Control groups for user interface elements", "Groups that control access to specific hardware devices"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "What are 'namespaces' in the Linux kernel (e.g., PID namespace, network namespace)?",
    "options": ["Namespaces for C++ code running on Linux", "A feature that partitions kernel resources such that one set of processes sees one set of resources, while another set of processes sees a different set. This provides isolation between groups of processes, for example, each container can have its own PID space, network stack, mount points, etc.", "A way to define named memory regions", "Namespaces for user accounts to prevent conflicts"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "Docker and other containerization technologies heavily rely on which two Linux kernel features for isolation and resource management?",
    "options": ["Systemd and Cron", "Namespaces and Cgroups", "SELinux and AppArmor", "LVM and RAID"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is 'overlay filesystem' (e.g., OverlayFS) often used for in containerization?",
    "options": ["A filesystem that overlays images on top of each other for display", "A union mount filesystem that allows multiple existing filesystems (layers) to be superimposed, forming a single, coherent filesystem view. Changes are typically written to an upper, writable layer, leaving lower, read-only layers untouched. This is efficient for container images where multiple containers can share base layers.", "A filesystem for managing screen overlays", "A filesystem that is overlaid with security permissions"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "The `systemctl` command is the primary tool for managing services and system state when using which init system?",
    "options": ["SysVinit", "Upstart", "OpenRC", "systemd"],
    "answer": 3,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which `systemctl` subcommand is used to start a service (e.g., `sshd`)?",
    "options": ["`systemctl enable sshd`", "`systemctl begin sshd`", "`systemctl run sshd`", "`systemctl start sshd`"],
    "answer": 3,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which `systemctl` subcommand is used to enable a service to start automatically at boot?",
    "options": ["`systemctl start sshd --boot`", "`systemctl auto-start sshd`", "`systemctl onboot sshd`", "`systemctl enable sshd`"],
    "answer": 3,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "Which `systemctl` subcommand is used to check the status of a service?",
    "options": ["`systemctl check sshd`", "`systemctl query sshd`", "`systemctl status sshd`", "`systemctl info sshd`"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `journalctl -u service_name` command is used to:",
    "options": ["Update the specified service", "View logs specifically for the systemd unit (service) named `service_name`.", "Unmount the specified service", "Uninstall the specified service"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is `udev` in Linux?",
    "options": ["A user development environment", "A device manager for the Linux kernel. It manages device nodes in `/dev`, handles device events (e.g., connection/disconnection of USB devices), and can run scripts or programs in response to these events.", "A universal video driver", "A tool for undefining variables"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is `DBus`?",
    "options": ["A database bus for high-speed data transfer", "An inter-process communication (IPC) and remote procedure call (RPC) mechanism that allows applications to communicate with each other on the same machine. Widely used on Linux desktops for system services and application integration.", "A direct bus connection to the CPU", "A debugging bus for hardware"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "What is 'Wayland' as a display server protocol intended to replace?",
    "options": ["PulseAudio", "systemd", "X11 (X Window System)", "GNOME Shell"],
    "answer": 2,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is 'PipeWire' gaining traction for in modern Linux desktops?",
    "options": ["Managing network pipes", "A server and API for handling audio and video streams and hardware on Linux, aiming to unify and replace older systems like PulseAudio and JACK, and provide better support for containers and Wayland.", "A tool for laying physical pipes for fiber optic cables", "A framework for building data processing pipelines"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "What is 'Flatpak' or 'Snap'?",
    "options": ["Types of file compression formats", "Software deployment and package management systems for Linux that allow applications to be sandboxed and run in isolation from the rest of the system, with their dependencies bundled. They aim to simplify application distribution across different Linux distributions.", "New Linux file systems", "User interface themes for Flat or Snap designs"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is the 'XDG Base Directory Specification'?",
    "options": ["A specification for X11 display geometry", "A standard that defines where user-specific data files, configuration files, and cache files should be stored in a user's home directory (e.g., `$XDG_CONFIG_HOME`, `$XDG_DATA_HOME`, `$XDG_CACHE_HOME`), aiming for a cleaner home directory structure.", "A specification for XML document grammar", "A standard for external device drivers"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "The `ss` command is a utility that can replace which older, commonly used networking tool for displaying socket statistics?",
    "options": ["`ping`", "`traceroute`", "`ifconfig`", "`netstat`"],
    "answer": 3,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `ip` command (from `iproute2` package) is a modern utility intended to replace older tools like:",
    "options": ["`ping`, `traceroute`, `netstat`", "`ifconfig`, `route`, `arp`, `netstat` (for some functions)", "`ls`, `cp`, `mv`", "`grep`, `sed`, `awk`"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is `nftables` in Linux networking?",
    "options": ["A database for storing NFT metadata", "A newer framework in the Linux kernel for packet filtering and classification, intended to replace the older `iptables`, `ip6tables`, `arptables`, and `ebtables` infrastructure with a more unified and efficient system.", "A table of network file types", "A tool for managing non-fungible tokens on Linux"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "What is 'eBPF' (extended Berkeley Packet Filter)?",
    "options": ["An extended version of the BPF coffee filter", "A technology that allows safe, efficient, and JIT-compiled programs (written in a restricted C-like language) to be executed directly in the Linux kernel space in response to various events (e.g., network packet arrival, system calls, tracepoints). Used for networking, observability, security, and tracing.", "A packet filter for email attachments", "An electronic Berkeley physics forum"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "What is 'copy-on-write' (CoW) in file systems or memory management?",
    "options": ["Copying data only when a write operation is explicitly requested by the user", "An optimization strategy where, if multiple callers request resources which are initially indistinguishable, they can all be given pointers to the same resource. This resource is only duplicated (copied) when one of the callers attempts to modify it; the modification is performed on the copy. This is used in `fork()` system calls, some file systems (e.g., Btrfs snapshots), and data structures.", "A copyright mechanism for written works", "A way to ensure all writes are copied to a backup"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "The `fork()` system call in Unix-like systems creates a new process by:",
    "options": ["Loading a new program from disk", "Duplicating the calling process (the parent process), creating a nearly identical child process that has its own address space but initially shares resources like open file descriptors. The child process often then uses `exec()` to run a new program.", "Forking the execution path into multiple threads within the same process", "Creating a symbolic link to the parent process"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `exec()` family of system calls (e.g., `execl`, `execvp`) in Unix-like systems is used to:",
    "options": ["Execute a function within the current process", "Replace the current process image (code, data, stack) with a new program loaded from an executable file. If successful, `exec()` does not return to the calling process.", "Execute a script in a separate shell", "Terminate the current process and execute a new one"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is a 'pipe' (`|`) in the context of inter-process communication (IPC) on Unix-like systems?",
    "options": ["A physical pipe for transferring data between computers", "A unidirectional data channel that can be used for IPC. One process writes to the pipe, and another process reads from it. Shell pipelines use anonymous pipes.", "A pipe for smoking while using Linux", "A tool for debugging IPC"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What are 'named pipes' (FIFOs - First-In, First-Out) in Unix-like systems?",
    "options": ["Pipes that are given user-friendly names", "A type of pipe that has a name in the file system, allowing unrelated processes to communicate by opening the named pipe for reading or writing, even if they don't share a common parent.", "Pipes that can only transfer named data structures", "Pipes that are managed by the `named` (DNS) daemon"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is 'shared memory' as an IPC mechanism?",
    "options": ["Memory that is shared publicly on the internet", "A technique where multiple processes can access the same region of physical memory, allowing for very fast communication by directly reading and writing to this shared area. Synchronization mechanisms (like semaphores or mutexes) are usually needed to coordinate access.", "A memory region that is only shared between threads of the same process", "A way to share memory sticks between different computers"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What are 'message queues' as an IPC mechanism (e.g., POSIX message queues)?",
    "options": ["Queues for storing user interface messages", "A form of IPC where processes can send and receive messages via a queue maintained by the kernel. Messages are typically stored until a process retrieves them. This allows for asynchronous, decoupled communication.", "A queue for error messages from the kernel", "A physical queue of network packets waiting for IPC"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is a 'socket pair' used for in Unix domain sockets (AF_UNIX)?",
    "options": ["A pair of physical network sockets", "A pair of connected, unnamed sockets created by the `socketpair()` system call, providing a bidirectional communication channel between two related processes (often parent-child after a `fork()`).", "A way to pair Bluetooth sockets", "A tool for managing pairs of TCP/IP sockets"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "What is the 'System V IPC' (Inter-Process Communication) mechanisms?",
    "options": ["IPC mechanisms specific to the fifth version of systemd", "A set of older IPC mechanisms found in Unix-like systems, including message queues (`msgget`, `msgsnd`, `msgrcv`), semaphores (`semget`, `semop`), and shared memory (`shmget`, `shmat`, `shmdt`). POSIX IPC is often preferred now.", "IPC used only by system V (five) processes", "A way to communicate between five different operating systems"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "The `nmap` command is a popular open-source tool used for:",
    "options": ["Creating network maps and diagrams", "Network discovery and security auditing. It can discover hosts and services on a computer network by sending packets and analyzing the responses, identify operating systems, open ports, running services, and potential vulnerabilities.", "Mapping local file systems to network shares", "Navigating maps in a GPS application"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `tcpdump` command is a common command-line packet analyzer that allows users to:",
    "options": ["Dump the contents of TCP memory buffers", "Capture and display TCP/IP and other packets being transmitted or received over a network to which the computer is attached. It's used for network troubleshooting, analysis, and security monitoring.", "Create a dump file of all active TCP connections", "Automatically dump (disconnect) suspicious TCP connections"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "Wireshark is a widely-used, open-source:",
    "options": ["Wireless network security tool only", "Network protocol analyzer that lets you capture and interactively browse the traffic running on a computer network. It has a graphical user interface and powerful filtering capabilities, similar in function to `tcpdump` but with a GUI.", "A tool for drawing shark-fin diagrams for networks", "A secure web browser with built-in packet sniffing"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is the 'loop device' in Linux (`/dev/loopN`)?",
    "options": ["A device for creating infinite loops in programs", "A pseudo-device that makes a file accessible as a block device. This allows mounting a file that contains a whole filesystem (e.g., an ISO image, a disk image) as if it were a physical disk partition.", "A device for testing network loopback functionality", "A hardware device for creating audio loops"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "What is `dm-crypt` (Device Mapper Crypt) in Linux?",
    "options": ["A tool for encrypting direct messages", "A transparent disk encryption subsystem in the Linux kernel. It can be used to encrypt entire disks, partitions, or create encrypted container files, often using LUKS (Linux Unified Key Setup) as a standard format for managing encrypted volumes and keys.", "A cryptographic library for device drivers", "A way to decrypt messages from the /dev/mapper directory"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "LUKS (Linux Unified Key Setup) is a standard for:",
    "options": ["Setting up user accounts with unified keys", "Disk encryption, providing a platform-independent standard on how to set up, manage, and access encrypted volumes. It stores all necessary setup information in the partition header, enabling easy portability.", "Unifying SSH keys across multiple Linux systems", "A secure key exchange protocol for Linux"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "The `/etc/sudoers` file defines:",
    "options": ["A list of all users who have used `sudo`", "The rules that govern which users or groups can run which commands as root or as other users via the `sudo` command, and whether they need to enter a password.", "The default editor for `sudo visudo`", "A log of all `sudo` commands executed"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `visudo` command is the recommended way to edit the `/etc/sudoers` file because:",
    "options": ["It provides a visual, graphical interface for editing", "It locks the sudoers file against simultaneous edits and performs syntax checking before saving changes, helping to prevent errors that could lock users out or break `sudo` functionality.", "It automatically backs up the sudoers file", "It allows editing the file as a non-root user"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is a 'kernel panic'?",
    "options": ["When the kernel gets scared", "A fatal error condition detected by the operating system kernel from which it cannot safely recover. The kernel typically stops all processing and displays an error message. It's an unrecoverable system crash.", "A user panicking because the kernel is not responding", "A security alert triggered by the kernel"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is a 'filesystem check' (e.g., using `fsck`) typically performed for?",
    "options": ["To check for free space on the filesystem", "To verify the consistency of a file system and optionally correct any detected errors or inconsistencies, often run automatically at boot time if the filesystem was not unmounted cleanly.", "To check the version of the filesystem driver", "To encrypt the filesystem for security checking"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is 'OpenSSL'?",
    "options": ["An open standard for SSL browser plugins", "A robust, commercial-grade, and full-featured toolkit for the Transport Layer Security (TLS) and Secure Sockets Layer (SSL) protocols. It is also a general-purpose cryptography library, providing implementations of various ciphers, hashes, and public key algorithms.", "A secure version of the OpenOffice suite", "An open-source operating system focused on security"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "The `openssl` command-line tool can be used for:",
    "options": ["Only encrypting and decrypting files", "A wide range of cryptographic tasks, including generating private keys, creating CSRs (Certificate Signing Requests), managing digital certificates, encrypting/decrypting data, calculating hashes, and testing SSL/TLS connections.", "Opening secure shell connections", "Scanning for open SSL ports"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is a 'Certificate Signing Request' (CSR)?",
    "options": ["A request to sign out of a certificate system", "A message sent from an applicant to a certificate authority (CA) in order to apply for a digital identity certificate. It typically contains information like the applicant's public key, distinguished name (DN), and other attributes.", "A request for a CA to sign a document with a digital signature", "A log of all certificate signing activities"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is `gpg` (GNU Privacy Guard or GnuPG)?",
    "options": ["A general-purpose graphics program", "A free software replacement for Symantec's PGP cryptographic software suite, compliant with the OpenPGP standard. It allows users to encrypt and sign data and communications, features a versatile key management system, and access modules for all kinds of public key directories.", "A tool for managing user group policies", "Global Password Generator"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `chage` command in Linux is used to:",
    "options": ["Change the system's character encoding", "Change user password expiry information, such as the maximum number of days between password changes, warning period, or account inactivity period.", "Charge system batteries", "Change the current user's group"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is a 'Man-in-the-Browser' (MitB) attack?",
    "options": ["An attack where a man physically looks at your browser", "A type of man-in-the-middle attack where malware infects a user's web browser, allowing an attacker to intercept and modify communications between the user and a website (e.g., online banking) in real-time, often without the user's knowledge.", "A browser extension that acts as a middleman for requests", "An attack targeting the browser's cache"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "What is 'Clickjacking' (UI redressing)?",
    "options": ["An attack that involves repeatedly clicking on UI elements", "A malicious technique where an attacker tricks a user into clicking on something different from what the user perceives, by overlaying an invisible or disguised UI element (e.g., a button from a vulnerable site) on top of a seemingly innocuous page. This can lead to unintended actions.", "A tool for measuring click-through rates on UI elements", "A way to hijack mouse click events for logging"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `X-Frame-Options` HTTP header helps prevent which type of attack?",
    "options": ["Cross-Site Scripting (XSS)", "SQL Injection", "Cross-Site Request Forgery (CSRF)", "Clickjacking (by controlling whether a page can be embedded in a frame/iframe)"],
    "answer": 3,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is 'Content Security Policy' (CSP)?",
    "options": ["A policy for managing user-generated content", "An added layer of security that helps to detect and mitigate certain types of attacks, including Cross-Site Scripting (XSS) and data injection attacks. It's a set of directives (sent via HTTP header) that tell the browser which sources of content (scripts, styles, images, etc.) are trusted and allowed to be loaded.", "A way to encrypt all website content by default", "A policy for securing physical content in data centers"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What are 'HTTP Strict Transport Security' (HSTS) headers used for?",
    "options": ["To enforce strict HTML validation over HTTP", "To instruct web browsers to only interact with a website using secure HTTPS connections, even if the user types `http://` or clicks an HTTP link. This helps prevent protocol downgrade attacks and man-in-the-middle attacks like SSL stripping.", "To define strict rules for HTTP request methods", "To secure data transport only within the server's internal network"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `/var/log/auth.log` (or `/var/log/secure` on some systems) typically contains:",
    "options": ["Logs related to web server authentication", "System authorization information, including user logins, authentication attempts (successful and failed), and `sudo` command usage.", "Logs from authorized applications only", "A list of all authentication methods supported by the system"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is a 'shellshock' vulnerability (CVE-2014-6271)?",
    "options": ["A vulnerability in seashell-based encryption", "A family of security bugs in the Bash shell that allowed attackers to execute arbitrary commands by crafting environment variables in a specific way, particularly affecting web servers using CGI scripts that interact with Bash.", "A physical shock hazard related to server shells", "A vulnerability that causes the shell to crash unexpectedly"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "What is a 'fork bomb' (`:(){ :|:& };:`)?",
    "options": ["A bomb that forks into multiple pieces", "A type of denial-of-service attack where a process continually replicates itself (forks), rapidly consuming system resources (CPU time, process table entries) and potentially crashing the system.", "A way to create many forks for a dining application", "A vulnerability in the `fork()` system call itself"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "The `ulimit` command in Linux is used to:",
    "options": ["Set limits on user interface elements", "Control and display resource limits for processes started by the shell, such as the maximum number of open files, CPU time, memory usage, stack size, etc. These limits can help prevent resource exhaustion.", "Limit the number of users logged into the system", "Define ultimate limits for system performance"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is 'LD_PRELOAD' environment variable sometimes used for (can be for legitimate or malicious purposes)?",
    "options": ["To preload large data files into memory", "It specifies a list of user-defined, ELF shared objects (libraries) to be loaded before all others when a program is executed. This can be used to override functions from standard libraries (e.g., for debugging, profiling, or injecting malicious code - rootkits).", "To set the preload priority for device drivers", "A variable that defines the load balancer's preload settings"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 3
  },
  {
    "question": "What is a 'rootkit'?",
    "options": ["A toolkit for managing root user accounts", "A collection of malicious software tools designed to enable unauthorized access to a computer system or network and often to mask its presence or the presence of other malware. Rootkits can operate at the kernel level or user level.", "The primary toolkit for system administrators", "A kit for repairing the root file system"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is `fail2ban`?",
    "options": ["A tool that bans users who fail login attempts twice", "An intrusion prevention software framework that protects computer servers from brute-force attacks and other malicious activity by monitoring log files (e.g., for SSH, Apache) and automatically updating firewall rules to block IP addresses that show suspicious behavior.", "A way to ban specific file types from being executed", "A game where you try to make other players fail and get banned"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is 'Docker'?",
    "options": ["A brand of work pants for developers", "An open platform for developing, shipping, and running applications inside lightweight, portable containers. Containers package up an application and all its dependencies, ensuring it runs consistently across different environments.", "A tool for docking laptops to external monitors", "A type of database for storing container information"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is a 'Dockerfile'?",
    "options": ["A file containing documentation for Docker", "A text document that contains all the commands a user could call on the command line to assemble a Docker image. `docker build` uses this file to create an image.", "A folder where Docker stores its files", "A license file for Docker software"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is a 'Docker Image'?",
    "options": ["A graphical image of a docker (a type of ship worker)", "A lightweight, standalone, executable package that includes everything needed to run a piece of software, including the code, a runtime, libraries, environment variables, and config files. Images are created from Dockerfiles.", "A screenshot of a Docker container running", "A virtual hard disk image for Docker"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is a 'Docker Container'?",
    "options": ["A physical container for shipping Docker servers", "A runnable instance of a Docker image. Containers are isolated from each other and from the host system, but share the host OS kernel. They run the application packaged in the image.", "A container for storing Docker images", "A user interface for managing Docker"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is 'Kubernetes' (K8s)?",
    "options": ["A specific Linux distribution for containers", "An open-source container orchestration system for automating the deployment, scaling, and management of containerized applications (like those created with Docker).", "A tool for creating Kubernetes container images", "A brand of network hardware for container clusters"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is a 'Pod' in Kubernetes?",
    "options": ["A type of pea grown in Kubernetes clusters", "The smallest and simplest unit in the Kubernetes object model that you create or deploy. A Pod represents a single instance of a running process in your cluster and can contain one or more containers (like Docker containers) that share storage, network resources, and a specification on how to run the containers.", "A physical enclosure for Kubernetes nodes", "A user interface pod for managing Kubernetes"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is a 'Service' in Kubernetes?",
    "options": ["A customer support service for Kubernetes users", "An abstract way to expose an application running on a set of Pods as a network service. Kubernetes Services provide a stable IP address and DNS name for a set of Pods, and can load balance traffic to them, even if the Pods themselves are ephemeral.", "A systemd service running on a Kubernetes node", "A physical network service connected to a Kubernetes cluster"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is 'Ansible'?",
    "options": ["A science fiction novel about androids", "An open-source automation tool that automates software provisioning, configuration management, and application deployment. It uses SSH (by default) to connect to managed nodes and executes 'playbooks' (written in YAML) to define desired states.", "A type of secure communication protocol", "A brand of server hardware"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is 'Puppet'?",
    "options": ["A tool for creating puppet shows", "An open-source configuration management tool that helps automate the provisioning, configuration, and management of servers and applications. It uses a declarative language (Puppet DSL) to define the desired state of resources.", "A type of malware that turns systems into puppets", "A user interface for managing virtual puppets"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is 'Chef'?",
    "options": ["A software for managing kitchen recipes", "An open-source configuration management tool that uses a Ruby-based domain-specific language (DSL) to define system configurations as 'recipes' and 'cookbooks'. It helps automate infrastructure management.", "A culinary-themed Linux distribution", "A tool for cooking up new software builds"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is 'Terraform'?",
    "options": ["A tool for terraforming planets in simulations", "An open-source Infrastructure as Code (IaC) software tool created by HashiCorp. It allows users to define and provision data center infrastructure using a declarative configuration language (HCL - HashiCorp Configuration Language) or JSON. It supports multiple cloud providers and on-premises solutions.", "A way to format terrain data", "A framework for building earth science applications"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
  {
    "question": "What is 'Vagrant'?",
    "options": ["A tool for managing homeless (vagrant) processes", "An open-source software product for building and maintaining portable virtual software development environments. It simplifies the process of creating and configuring virtual machines, often using providers like VirtualBox, VMware, or cloud platforms.", "A type of virtual machine image format", "A way to make software wander aimlessly"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 2
  },
  {
    "question": "What is 'GitLab CI/CD' or 'GitHub Actions'?",
    "options": ["Version control systems for CI/CD pipelines only", "Built-in Continuous Integration/Continuous Delivery (or Deployment) tools provided by GitLab and GitHub respectively, allowing developers to automate building, testing, and deploying their code directly from their repositories based on defined workflows.", "Chat applications for CI/CD teams", "Tools for managing licenses for CI/CD software"],
    "answer": 1,
    "category": "Linux",
    "difficulty": 1
  },
   {
    "question": "Explain the internal mechanism of how `fork()` followed by `execve()` creates a new process image, including the role of copy-on-write (CoW) and how the address space is replaced.",
    "options": [
      "`fork()` duplicates the address space, `execve()` overlays it; CoW is for file systems.",
      "`fork()` creates a lightweight thread, `execve()` loads the new program into that thread.",
      "`fork()` creates a child process by initially sharing the parent's address space using CoW for memory pages. `execve()` then replaces the child's memory image (text, data, stack segments) with the new program loaded from disk, deallocating old pages and mapping new ones.",
      "`fork()` allocates new memory for the child, `execve()` copies the program into it; CoW is irrelevant."
    ],
    "answer": 2,
    "category": "Linux Internals",
    "difficulty": 4
  },
  {
    "question": "Describe the key differences between System V IPC (message queues, semaphores, shared memory) and POSIX IPC mechanisms, and why POSIX IPC is generally preferred in modern Linux development.",
    "options": [
      "System V uses files, POSIX uses network sockets; POSIX is faster.",
      "System V IPC uses kernel-persistent objects identified by keys, often requiring manual cleanup and having system-wide limits. POSIX IPC (e.g., message queues, semaphores, shared memory via mmap) often uses file-descriptor-based or named objects, generally offering better cleanup, more intuitive APIs, and better integration with modern programming practices.",
      "POSIX IPC is only for inter-thread communication, System V for inter-process; System V is more secure.",
      "They are functionally identical, POSIX is just a newer standard."
    ],
    "answer": 1,
    "category": "Linux IPC",
    "difficulty": 4
  },
  {
    "question": "Explain the concept of 'memory overcommit' in Linux and the role of the Out-Of-Memory (OOM) killer. What are some strategies to manage or mitigate OOM events?",
    "options": [
      "Overcommit means allocating more RAM than physically present, OOM killer adds more RAM.",
      "Memory overcommit allows the kernel to allocate more virtual memory to processes than available physical RAM + swap, assuming not all allocated memory will be used. If physical memory runs out, the OOM killer selects and terminates process(es) to free memory. Mitigation: configuring `vm.overcommit_memory`, `oom_score_adj`, using cgroups, adding more swap/RAM.",
      "OOM killer prevents memory overcommit by limiting process memory usage.",
      "Overcommit is a bug, OOM killer fixes it by restarting the kernel."
    ],
    "answer": 1,
    "category": "Linux Memory Management",
    "difficulty": 4
  },
  {
    "question": "Detail the process of a context switch between two user-space processes on a single CPU core in Linux, including what state is saved/restored and the role of the scheduler.",
    "options": [
      "Only the Program Counter is switched.",
      "The kernel saves the current process's CPU registers (PC, stack pointer, general-purpose registers, status flags), updates its Process Control Block (PCB), selects the next process to run via the scheduler, restores the new process's registers from its PCB, updates memory management structures (e.g., CR3 register for page tables), and resumes execution of the new process.",
      "The entire memory space of the old process is swapped to disk.",
      "The scheduler physically moves processes between CPU cores."
    ],
    "answer": 1,
    "category": "Linux Kernel",
    "difficulty": 4
  },
  {
    "question": "What is eBPF (extended Berkeley Packet Filter) and how can it be used for advanced system tracing, networking, and security in Linux without modifying kernel source code?",
    "options": [
      "eBPF is a firewall aplication for filtering Berkeley packets.",
      "eBPF allows running sandboxed programs in an in-kernel virtual machine. These programs can be attached to various hooks (tracepoints, kprobes, network events). They are JIT-compiled for efficiency and verified for safety, enabling powerful, dynamic kernel-level observability, networking manipulation, and security policy enforcement.",
      "eBPF is a user-space library for packet capture only.",
      "eBPF is a new type of CPU architecture."
    ],
    "answer": 1,
    "category": "Linux Kernel",
    "difficulty": 4
  },
  {
    "question": "Explain the slab allocator in the Linux kernel. What problem does it solve and how does it work?",
    "options": [
      "It allocates large slabs of concrete for server foundations.",
      "The slab allocator is a memory management mechanism designed to reduce fragmentation and improve efficiency for allocating and deallocating frequently used kernel objects of the same size. It maintains caches of pre-initialized objects, organized in 'slabs' (contiguous memory chunks), reducing initialization overhead and improving cache locality.",
      "It's an allocator for user-space applications only.",
      "It allocates memory in fixed 4KB slabs for all kernel data."
    ],
    "answer": 1,
    "category": "Linux Memory Management",
    "difficulty": 4
  },
  {
    "question": "Describe the differences between a spinlock and a mutex in the Linux kernel. In what scenarios would each be more appropriate?",
    "options": [
      "Spinlocks spin in a circle, mutexes mute threads; spinlocks for user-space, mutexes for kernel.",
      "A spinlock is a busy-wait lock; a thread trying to acquire it repeatedly checks until it's free. Suited for short critical sections in multiprocessor systems, especially in interrupt context where sleeping is not allowed. A mutex typically causes a thread to sleep (block) if the lock is unavailable, yielding the CPU. Suited for longer critical sections or when sleeping is permissible.",
      "Mutexes are faster than spinlocks in all scenarios.",
      "Spinlocks are for single-processor systems, mutexes for multi-processor."
    ],
    "answer": 1,
    "category": "Linux Kernel",
    "difficulty": 4
  },
  {
    "question": "What are Read-Copy-Update (RCU) synchronization mechanisms in the Linux kernel, and what are their advantages for read-mostly data structures?",
    "options": [
      "RCU copies data before updating, then reads it.",
      "RCU is a synchronization mechanism that allows readers to access a data structure concurrently with updaters, without acquiring locks. Readers see a consistent snapshot. Updaters make changes to a copy, then atomically publish the new version. Old versions are reclaimed after all pre-existing readers complete, managed via grace periods. It offers very low overhead for readers.",
      "RCU updates data by reading it, copying it, then undoing the update.",
      "RCU is a user-space library for version control."
    ],
    "answer": 1,
    "category": "Linux Kernel",
    "difficulty": 4
  },
  {
    "question": "Explain the concept of I/O scheduling in the Linux kernel (e.g., CFQ, Deadline, NOOP schedulers). What are their goals?",
    "options": [
      "Scheduling I/O operations based on file size only.",
      "I/O schedulers manage the order of disk read/write requests to optimize disk throughput, reduce latency, and ensure fairness. CFQ (Completely Fair Queuing) aims for fairness among processes. Deadline tries to meet I/O deadlines. NOOP (No Operation) is a simple FIFO, often used for fast storage like SSDs where reordering offers less benefit or can be detrimental.",
      "They schedule I/O based on network traffic.",
      "NOOP is the most complex scheduler, CFQ is the simplest."
    ],
    "answer": 1,
    "category": "Linux Kernel",
    "difficulty": 4
  },
  {
    "question": "What is `io_uring` and how does it provide a high-performance asynchronous I/O interface in modern Linux kernels?",
    "options": [
      "`io_uring` is a user interface for managing I/O devices.",
      "`io_uring` is a Linux kernel interface for asynchronous I/O that uses shared memory rings (submission queue and completion queue) between user space and the kernel. This minimizes system calls and data copies, allowing for very high I/O operations per second (IOPS) and low latency, suitable for demanding applications.",
      "`io_uring` is a tool for creating ring buffers in user space only.",
      "`io_uring` encrypts I/O operations using ring cryptography."
    ],
    "answer": 1,
    "category": "Linux I/O",
    "difficulty": 4
  },
  {
    "question": "Describe the role of the `initramfs` (initial RAM filesystem) in the Linux boot process.",
    "options": [
      "It's the primary root filesystem for normal operation.",
      "An `initramfs` is a gzipped cpio archive of a minimal root filesystem loaded into RAM early in the boot process by the bootloader. Its primary purpose is to contain drivers and tools (e.g., for disk controllers, LVM, encrypted filesystems) needed to mount the actual root filesystem, before handing over control to the real `init` process.",
      "It stores initial user configuration files.",
      "It's a filesystem used only for kernel debugging."
    ],
    "answer": 1,
    "category": "Linux Boot Process",
    "difficulty": 4
  },
  {
    "question": "Explain the purpose and typical contents of a systemd 'unit file' (e.g., for a service).",
    "options": [
      "A file containing units of measurement for system resources.",
      "A systemd unit file is a plain text configuration file that describes a unit (e.g., service, socket, target, mount point). For a service, it typically includes sections like `[Unit]` (description, dependencies), `[Service]` (command to execute, user, restart policy), and `[Install]` (how it's enabled/started at boot).",
      "A binary file executed by systemd.",
      "A log file for a specific systemd unit."
    ],
    "answer": 1,
    "category": "Linux Systemd",
    "difficulty": 4
  },
  {
    "question": "What are capabilities (POSIX capabilities, e.g., `CAP_NET_ADMIN`, `CAP_SYS_TIME`) in Linux, and how do they offer a more fine-grained privilege model than traditional root/non-root?",
    "options": [
      "Capabilities define a user's ability to use specific software.",
      "Capabilities break down the all-or-nothing power of the root user into a set of distinct privileges. A process can be granted specific capabilities needed to perform its tasks (e.g., binding to a privileged port, changing system time) without needing full root access, thus adhering to the principle of least privilege and improving security.",
      "They are hardware capabilities of the CPU.",
      "Capabilities are user-defined roles similar to groups."
    ],
    "answer": 1,
    "category": "Linux Security",
    "difficulty": 4
  },
  {
    "question": "Explain how namespaces (e.g., PID, network, mount, user) contribute to containerization technologies like Docker.",
    "options": [
      "Namespaces provide a way to name containers.",
      "Namespaces provide isolation by partitioning kernel resources such that a group of processes (a container) sees its own isolated view of those resources. For example, a PID namespace gives a container its own process tree starting from PID 1; a network namespace gives it its own network stack (interfaces, routing tables, ports).",
      "Namespaces are used for inter-container communication only.",
      "Namespaces define the storage backend for containers."
    ],
    "answer": 1,
    "category": "Linux Containers",
    "difficulty": 4
  },
  {
    "question": "What are cgroups (control groups) v1 and v2 in Linux, and what are their primary functions for resource management?",
    "options": [
      "cgroups are groups of C programmers working on the kernel.",
      "cgroups allow organizing processes into hierarchical groups and allocating, limiting, prioritizing, and accounting for their resource usage (CPU, memory, I/O, network). cgroups v2 offers a more unified hierarchy and improved interface compared to v1. They are essential for container resource management and system stability.",
      "cgroups control access to specific hardware devices.",
      "cgroups are primarily for security isolation, not resource management."
    ],
    "answer": 1,
    "category": "Linux Containers",
    "difficulty": 4
  },
  {
    "question": "Describe the concept of 'overlay filesystems' (e.g., OverlayFS, AUFS) and their utility in container image layering.",
    "options": [
      "Filesystems that overlay graphical elements on the screen.",
      "Overlay filesystems allow multiple existing filesystems (layers) to be superimposed, forming a single, coherent filesystem view. Changes are typically written to an upper, writable layer, leaving lower, read-only layers untouched. This is highly efficient for container images, where multiple containers can share common read-only base image layers, saving disk space and speeding up container startup.",
      "Filesystems used for screen overlay applications.",
      "Filesystems that are overlaid with security permissions and encryption."
    ],
    "answer": 1,
    "category": "Linux Containers",
    "difficulty": 4
  },
  {
    "question": "What is the role of `seccomp` (secure computing mode) in enhancing container security or sandboxing applications?",
    "options": [
      "It's a tool for compiling secure C code.",
      "`seccomp` is a Linux kernel facility that allows a process to make a one-way transition into a 'secure' state where it can only make a restricted set of system calls (`exit()`, `sigreturn()`, `read()`, `write()` to already open file descriptors). `seccomp-bpf` extends this to allow filtering system calls using a BPF program, enabling fine-grained syscall whitelisting/blacklisting for sandboxing.",
      "It encrypts all inter-process communication.",
      "It's a secure alternative to the `comp` command."
    ],
    "answer": 1,
    "category": "Linux Security",
    "difficulty": 4
  },
  {
    "question": "Explain the difference between a 'process' and a 'thread' in Linux, including how they share resources.",
    "options": [
      "Processes are for GUI, threads for CLI; they don't share resources.",
      "A process is an instance of a program with its own address space, file descriptors, PID, etc. Threads (kernel-level) exist within a process and share the process's address space, open files, and other resources, but have their own program counter, stack, and registers. This allows for concurrent execution within a single process with lower overhead for context switching between threads than between processes.",
      "Threads are heavier than processes and have separate memory.",
      "Processes and threads are identical concepts in Linux."
    ],
    "answer": 1,
    "category": "Linux Processes & Threads",
    "difficulty": 4
  },
  {
    "question": "What is a 'futex' (Fast Userspace muTex) in the Linux kernel, and how does it help optimize synchronization primitives?",
    "options": [
      "A futuristic mutex that predicts contention.",
      "A futex is a kernel system call that provides a basic building block for fast user-space synchronization primitives like mutexes and condition variables. It allows a thread to wait (sleep) in the kernel only when contention actually occurs. If there's no contention, synchronization can often be achieved entirely in user space using atomic operations, avoiding the overhead of a system call.",
      "A mutex designed for file system operations only.",
      "A user-space library for emulating kernel mutexes."
    ],
    "answer": 1,
    "category": "Linux Kernel",
    "difficulty": 4
  },
  {
    "question": "Describe the challenges and mechanisms involved in implementing Non-Uniform Memory Access (NUMA) awareness in the Linux kernel and applications.",
    "options": [
      "NUMA awareness means all memory access is uniform; no challenges.",
      "Challenges: accurately determining node topology, balancing memory/CPU allocation across nodes, minimizing remote memory access latency. Mechanisms: kernel NUMA scheduler allocating processes/threads to nodes near their memory, `numactl` for policy control, libraries providing NUMA-aware allocation, applications explicitly managing memory placement.",
      "NUMA is handled entirely by hardware, no kernel involvement.",
      "Linux does not support NUMA architectures."
    ],
    "answer": 1,
    "category": "Linux Memory Management",
    "difficulty": 4
  },
  {
    "question": "What are 'huge pages' (e.g., Transparent Huge Pages - THP) in Linux, and what are their performance implications (benefits and drawbacks)?",
    "options": [
      "Pages that are physically very large in size.",
      "Huge pages are larger memory pages (e.g., 2MB or 1GB instead of the standard 4KB). Benefits: reduce TLB misses and page table overhead, potentially improving performance for applications with large memory footprints. Drawbacks: can lead to internal fragmentation, longer page fault times for allocation/swapping, and THP can sometimes cause latency spikes due to defragmentation efforts.",
      "Huge pages are used only for kernel memory.",
      "They are slower but more secure than standard pages."
    ],
    "answer": 1,
    "category": "Linux Memory Management",
    "difficulty": 4
  },
  {
    "question": "Explain the concept of 'copy-on-write' (CoW) as implemented by file systems like Btrfs or ZFS for snapshots or reflinks.",
    "options": [
      "CoW means files are copied every time they are written to.",
      "In CoW filesystems, when data is modified, the changes are written to a new location on disk, and metadata pointers are updated to point to the new data, rather than overwriting the old data in place. This allows for efficient creation of snapshots (which initially share all unmodified blocks with the original) and reflinks (block-level shared copies of files).",
      "CoW is a technique for encrypting files during write operations.",
      "CoW only applies to in-memory data, not file systems."
    ],
    "answer": 1,
    "category": "Linux Filesystems",
    "difficulty": 4
  },
  {
    "question": "What is `nftables` and how does its architecture differ from the older `iptables` framework for Linux firewalling?",
    "options": [
      "`nftables` is a user-space GUI for `iptables`.",
      "`nftables` is a netfilter subsystem providing packet filtering and classification. It offers a more unified and efficient infrastructure than `iptables` (which had separate tools for IPv4, IPv6, ARP, etc.). `nftables` uses a single utility (`nft`) and a more expressive syntax, with tables, chains, and rules processed by an in-kernel virtual machine, allowing for more flexible and performant rule sets.",
      "`nftables` only supports IPv6, `iptables` only IPv4.",
      "`iptables` is more performant due to its simpler architecture."
    ],
    "answer": 1,
    "category": "Linux Networking",
    "difficulty": 4
  },
  {
    "question": "How does `systemd-resolved` handle DNS resolution, and what are some of its features compared to traditional `/etc/resolv.conf` management?",
    "options": [
      "`systemd-resolved` is a DNS server software like BIND.",
      "`systemd-resolved` is a system service that provides network name resolution to local applications. It implements a caching and validating DNS/DNSSEC stub resolver. It can manage `/etc/resolv.conf` dynamically, supports per-link DNS servers, Link-Local Multicast Name Resolution (LLMNR), and Multicast DNS (mDNS).",
      "It only reads `/etc/resolv.conf` and forwards queries.",
      "It's a tool for resolving systemd service dependencies."
    ],
    "answer": 1,
    "category": "Linux Networking",
    "difficulty": 4
  },
  {
    "question": "Explain the purpose and workings of the `LD_PRELOAD` environment variable and its security implications.",
    "options": [
      "`LD_PRELOAD` sets the priority for loading device drivers.",
      "`LD_PRELOAD` lists shared libraries to be loaded by the dynamic linker before all others, including standard system libraries. This allows overriding functions from these libraries. Legitimate uses: debugging, profiling. Security implications: can be abused by malware (rootkits) to hijack function calls and compromise system integrity if a privileged process can be made to load a malicious library.",
      "`LD_PRELOAD` preloads data into CPU cache.",
      "It's an environment variable for configuring the `ld` linker."
    ],
    "answer": 1,
    "category": "Linux Security",
    "difficulty": 4
  },
  {
    "question": "What are Linux 'auditd' and the audit framework used for?",
    "options": [
      "Auditing the financial records of Linux development.",
      "The Linux Audit framework (with `auditd` daemon) provides a system for collecting detailed information about security-relevant events on a system, based on pre-configured rules. It can log system calls, file access, network connections, authentication attempts, etc., creating an audit trail for security analysis, compliance, and forensics.",
      "A tool for auditing source code for style violations.",
      "Auditing user interface accessibility."
    ],
    "answer": 1,
    "category": "Linux Security",
    "difficulty": 4
  },
  {
    "question": "Describe the mechanism of 'stack canaries' (or stack protectors) as a security mitigation technique.",
    "options": [
      "Small birds trained to detect stack overflows.",
      "Stack canaries are a defense against stack buffer overflow attacks. A secret random value (the canary) is placed on the stack just before the return address. Before a function returns, this canary value is checked. If a buffer overflow has overwritten the stack, the canary will likely be changed, and the program can detect this and terminate, preventing the attacker from hijacking control flow via the return address.",
      "Canaries that sing when the stack is full.",
      "A technique to protect canaries from stack data."
    ],
    "answer": 1,
    "category": "Linux Security",
    "difficulty": 4
  },
  {
    "question": "What is Address Space Layout Randomization (ASLR) and how does it enhance security?",
    "options": [
      "Randomizing the layout of user interface elements.",
      "ASLR is a security technique that randomly arranges the address space positions of key data areas of a process, including the base of the executable, stack, heap, and libraries. This makes it much harder for an attacker to predict target addresses for exploits like buffer overflows that rely on knowing the location of specific code or data.",
      "Randomly assigning IP addresses to processes.",
      "A way to randomize the order of function calls."
    ],
    "answer": 1,
    "category": "Linux Security",
    "difficulty": 4
  },
  {
    "question": "Explain the concept of 'kprobes' and 'uprobes' in Linux kernel tracing.",
    "options": [
      "Probes used for testing kernel hardware compatibility.",
      "`kprobes` (kernel probes) allow dynamic instrumentation of almost any kernel instruction, enabling tracing or execution of custom handlers at arbitrary kernel code locations. `uprobes` (user probes) provide similar functionality for user-space applications, allowing tracing of function entry/exit or specific instructions in user programs. They are powerful debugging and tracing tools.",
      "Probes for measuring user input latency.",
      "Physical probes attached to the kernel chip."
    ],
    "answer": 1,
    "category": "Linux Kernel",
    "difficulty": 4
  },
  {
    "question": "What are 'tracepoints' in the Linux kernel, and how do they differ from kprobes?",
    "options": [
      "Points in the code where users can insert trace messages.",
      "Tracepoints are static instrumentation points explicitly placed by kernel developers at logically important locations in the kernel code (e.g., scheduler events, system call entry/exit). They offer a stable API for tracing specific events with lower overhead and less risk of breakage than kprobes, which can instrument arbitrary (and potentially unstable) code locations.",
      "Graphical points used for tracing UI events.",
      "Tracepoints are a user-space only tracing mechanism."
    ],
    "answer": 1,
    "category": "Linux Kernel",
    "difficulty": 4
  },
  {
    "question": "Discuss the role of the `CONFIG_PREEMPT_RT` patch set (real-time Linux) and its impact on kernel preemption and determinism.",
    "options": [
      "It's a patch to make the kernel non-preemptible for stability.",
      "The `PREEMPT_RT` patch set aims to make the Linux kernel fully preemptible, minimizing non-preemptible sections and interrupt/softirq latencies. It replaces spinlocks with preemptible mutexes, makes interrupt handlers threaded, etc., to achieve lower and more predictable latencies, making Linux suitable for hard real-time applications.",
      "It only affects the preemption of user-space processes.",
      "`PREEMPT_RT` increases kernel latency but improves throughput."
    ],
    "answer": 1,
    "category": "Linux Kernel",
    "difficulty": 4
  },
  {
    "question": "What is `perf` (Performance Counters for Linux)? How is it used for system-wide profiling and tracing?",
    "options": [
      "`perf` is a tool for improving the visual performance of GUIs.",
      "`perf` is a powerful command-line profiling tool in Linux that uses hardware performance counters, software counters, tracepoints, kprobes, and uprobes. It can be used for system-wide profiling (CPU usage, cache misses, branch mispredictions), tracing specific kernel/user events, and analyzing application performance at a very detailed level.",
      "`perf` only measures network performance.",
      "`perf` is a library for perfect code generation."
    ],
    "answer": 1,
    "category": "Linux Performance",
    "difficulty": 4
  },
  {
    "question": "Explain the concept of 'dirty pages' in the Linux page cache and how the kernel manages writing them back to disk (e.g., pdflush/flusher threads, `vm.dirty_ratio`).",
    "options": [
      "Dirty pages are pages contaminated with malware.",
      "Dirty pages are memory pages in the page cache whose contents have been modified but not yet written back to the backing storage (disk). The kernel tracks these pages. When the amount of dirty memory exceeds thresholds (e.g., `vm.dirty_background_ratio`, `vm.dirty_ratio`), or periodically, background flusher threads write these dirty pages to disk to free up memory and ensure data persistence.",
      "Dirty pages are pages that are scheduled for deletion.",
      "The kernel cleans dirty pages by wiping their content."
    ],
    "answer": 1,
    "category": "Linux Memory Management",
    "difficulty": 4
  },
  {
    "question": "What is the 'Buddy System Allocator' in the Linux kernel used for, and how does it manage physical memory pages?",
    "options": [
      "An allocator for finding programming buddies.",
      "The Buddy System is a physical memory page allocator in the kernel. It manages free physical pages by grouping them into blocks of power-of-two sizes (e.g., 1, 2, 4, 8 pages). When a request for a block of a certain size comes, it tries to find a free block of that size. If not available, a larger block is split. When blocks are freed, adjacent 'buddy' blocks may be merged to form larger free blocks, reducing fragmentation.",
      "It allocates memory to user-space 'buddy' processes.",
      "It's a system for allocating virtual memory only."
    ],
    "answer": 1,
    "category": "Linux Memory Management",
    "difficulty": 4
  },
  {
    "question": "How does the `O_DIRECT` flag for `open()` system call affect file I/O, and in what scenarios might it be beneficial or detrimental?",
    "options": [
      "`O_DIRECT` makes file I/O go directly to the internet.",
      "`O_DIRECT` attempts to minimize caching effects of file I/O by performing direct transfers between user-space buffers and the storage device, bypassing the kernel's page cache. Beneficial for applications managing their own caching (e.g., databases) to avoid double caching and reduce CPU overhead. Detrimental if application doesn't do its own caching, as it loses page cache benefits. Requires specific buffer alignment and I/O sizes.",
      "`O_DIRECT` directs I/O to a specific CPU core.",
      "`O_DIRECT` is a flag for opening directories only."
    ],
    "answer": 1,
    "category": "Linux I/O",
    "difficulty": 4
  },
  {
    "question": "What is 'Ftrace' in the Linux kernel?",
    "options": [
      "A tool for tracing facial expressions of users.",
      "Ftrace (Function Tracer) is an internal tracing framework in the Linux kernel. It can trace kernel function calls, latencies, events, and create function call graphs, providing detailed insights into kernel behavior. It's used for debugging, performance analysis, and understanding kernel execution paths.",
      "A utility for tracing file access patterns.",
      "A graphical interface for tracing network packets."
    ],
    "answer": 1,
    "category": "Linux Kernel",
    "difficulty": 4
  },
  {
    "question": "Explain the concept of 'System Calls' and the typical mechanism by which a user-space process transitions to kernel mode to execute one.",
    "options": [
      "System calls are calls between different networked systems.",
      "System calls are the interface between user-space processes and the operating system kernel, allowing processes to request services from the kernel (e.g., file I/O, process creation, network communication). Typically, a user process executes a special trap instruction (e.g., `syscall`, `int 0x80`) which causes a hardware interrupt, transitioning the CPU to kernel mode. The kernel then uses the system call number to invoke the appropriate kernel handler.",
      "System calls are user-space library functions that don't enter kernel mode.",
      "Kernel mode transitions to user mode to execute a system call."
    ],
    "answer": 1,
    "category": "Linux Kernel",
    "difficulty": 4
  },
  {
    "question": "What is 'Load Average' in Linux (e.g., as shown by `uptime` or `top`) and what does it represent?",
    "options": [
      "The average electrical load on the system.",
      "A measure of system load, representing the average number of processes in the run queue (running or waiting to run) plus those in uninterruptible sleep state, typically averaged over 1, 5, and 15 minutes. It indicates how busy the system is. A load average consistently higher than the number of CPU cores often suggests the system is overloaded.",
      "The average network load.",
      "The average disk I/O load."
    ],
    "answer": 1,
    "category": "Linux Performance",
    "difficulty": 4
  },
  {
    "question": "Describe the purpose of `AF_PACKET` (or `PF_PACKET`) sockets in Linux networking.",
    "options": [
      "Sockets for sending encrypted packets only.",
      "`AF_PACKET` sockets provide a low-level interface for sending and receiving raw packets directly from a network device, bypassing the kernel's protocol stack (IP, TCP/UDP). This allows applications to construct and parse link-layer (e.g., Ethernet) frames themselves. Used by tools like `tcpdump` and for custom protocol implementations.",
      "Sockets used exclusively by the `packet` command.",
      "Sockets for managing application-level data packets."
    ],
    "answer": 1,
    "category": "Linux Networking",
    "difficulty": 4
  },
  {
    "question": "What is the `inotifywait` command-line utility used for?",
    "options": [
      "Waiting for user input in a non-blocking way.",
      "It's a command-line interface to the `inotify` kernel subsystem. It allows waiting for specific filesystem events (e.g., file creation, deletion, modification) on specified files or directories and can then execute a command or simply report the event. Useful for scripting automated actions based on filesystem changes.",
      "A tool to make the `notify-send` command wait.",
      "Waiting for network notifications."
    ],
    "answer": 1,
    "category": "Linux Utilities",
    "difficulty": 4
  },
  {
    "question": "Explain the concept of 'filesystem journaling' and how it helps maintain consistency after a crash.",
    "options": [
      "Journaling all user activities on the filesystem.",
      "Filesystem journaling involves writing metadata changes (and sometimes data changes, depending on the mode) to a separate log (the journal) before applying them to the main filesystem. If the system crashes, the journal can be replayed upon reboot to bring the filesystem to a consistent state quickly, avoiding lengthy `fsck` checks and reducing the risk of data corruption.",
      "Keeping a journal of all files created and deleted.",
      "A filesystem designed specifically for storing diaries."
    ],
    "answer": 1,
    "category": "Linux Filesystems",
    "difficulty": 4
  },
  {
    "question": "What are 'memory cgroups' and how can they be used to limit and account for memory usage by a group of processes?",
    "options": [
      "Groups of memory chips on the motherboard.",
      "Memory cgroups (`memory.limit_in_bytes`, `memory.usage_in_bytes`, etc.) allow administrators to set limits on the amount of memory (RAM and swap) a cgroup of processes can consume. They also provide accounting for current usage. If a cgroup exceeds its limit, the OOM killer may be invoked within that cgroup, or processes may fail to allocate more memory. Essential for container resource isolation.",
      "A way to group memory allocation requests.",
      "Cgroups that only monitor memory, not limit it."
    ],
    "answer": 1,
    "category": "Linux Containers",
    "difficulty": 4
  },
  {
    "question": "Describe the use of `netfilter` hooks in the Linux kernel's networking stack.",
    "options": [
      "Hooks for fishing out network packets.",
      "Netfilter is a framework within the Linux kernel that allows kernel modules to register callback functions (hooks) at various points in the network packet processing path (e.g., prerouting, input, forward, output, postrouting). These hooks can inspect, modify, drop, or queue packets. `iptables`, `nftables`, and connection tracking use these hooks.",
      "Physical hooks for attaching network cables.",
      "Hooks for user-space network applications only."
    ],
    "answer": 1,
    "category": "Linux Networking",
    "difficulty": 4
  },
  {
    "question": "What is the role of the `systemd-networkd` service?",
    "options": [
      "A DNS server provided by systemd.",
      "`systemd-networkd` is a system daemon that manages network configurations. It can configure network interfaces based on `.network` and `.link` files, handle dynamic IP addressing (DHCP client), static IP configuration, bonding, bridging, VLANs, etc. It's an alternative to older network configuration methods like `ifupdown` or NetworkManager for some server scenarios.",
      "A tool for monitoring network traffic under systemd.",
      "A firewall service integrated with systemd."
    ],
    "answer": 1,
    "category": "Linux Systemd",
    "difficulty": 4
  },
  {
    "question": "Explain the differences and use cases for `clone()`, `fork()`, and `vfork()` system calls in Linux.",
    "options": [
      "`clone()` creates threads, `fork()` copies processes, `vfork()` is for virtual forks.",
      "`fork()` creates a new process by duplicating the parent. `vfork()` is an older, optimized version of `fork()` where the parent is suspended until the child calls `execve()` or `_exit()`, and the child shares the parent's address space (use with extreme care). `clone()` is the underlying system call for both `fork()` and creating threads, allowing fine-grained control over what resources are shared between parent and child (e.g., address space, file descriptors, namespaces).",
      "`vfork()` is the most modern and preferred method.",
      "They are all identical ways to create new processes."
    ],
    "answer": 1,
    "category": "Linux Kernel",
    "difficulty": 4
  },
  {
    "question": "What is the 'tickless kernel' (`CONFIG_NO_HZ`) feature in Linux and its benefits?",
    "options": [
      "A kernel that doesn't use a system clock (tick).",
      "A kernel configuration where the periodic timer interrupt (tick) is disabled for idle CPUs (or CPUs running a single task) to save power and reduce overhead. The tick is only re-enabled when needed (e.g., for scheduling or timers). Benefits include reduced power consumption and fewer interrupts on idle or lightly loaded systems.",
      "A kernel without support for real-time clocks.",
      "A kernel that uses ticks from an external source."
    ],
    "answer": 1,
    "category": "Linux Kernel",
    "difficulty": 4
  },
  {
    "question": "Describe how file permissions (owner, group, others - rwx) interact with the `setuid`, `setgid`, and `sticky bit` permissions for executables and directories.",
    "options": [
      "They are independent and don't interact.",
      "Base rwx permissions control access for owner/group/others. `setuid` on an executable makes it run with owner's EUID. `setgid` on an executable makes it run with group's EGID; on a directory, new files inherit directory's group. `sticky bit` on a directory restricts deletion/renaming within it to file owner, dir owner, or root, regardless of directory write permissions.",
      "`setuid` overrides all other permissions.",
      "Sticky bit makes files executable by owner only."
    ],
    "answer": 1,
    "category": "Linux Security",
    "difficulty": 4
  },
  {
    "question": "What are 'kernel oops' messages, and what do they typically signify?",
    "options": [
      "A friendly greeting from the kernel.",
      "An 'oops' is a Linux kernel message indicating a kernel-level error or bug that is serious but not necessarily fatal enough to cause a full kernel panic. The kernel attempts to kill the offending process and continue running, but the system might be unstable. Oops messages provide debugging information like register dumps and a call trace.",
      "A user making a mistake (oops!) that the kernel logs.",
      "An indication that the kernel has run out of oopsie-daisies."
    ],
    "answer": 1,
    "category": "Linux Kernel",
    "difficulty": 4
  },
  {
    "question": "Explain the role of the `/sys` virtual filesystem (sysfs) in Linux.",
    "options": [
      "It stores system configuration files, replacing `/etc`.",
      "Sysfs is a virtual filesystem that exports information about kernel objects, hardware devices, and drivers from the kernel's internal data structures to user space as a hierarchical file-like interface. It allows viewing and sometimes modifying kernel parameters and device attributes.",
      "It's a backup of the system's source code.",
      "It contains system log files, replacing `/var/log`."
    ],
    "answer": 1,
    "category": "Linux Filesystems",
    "difficulty": 4
  },
  {
    "question": "What is the purpose of the `strtol()` family of functions (e.g., `strtol`, `strtoul`, `strtod`) in C/Linux programming compared to `atoi()` or `sscanf()`?",
    "options": [
      "They are simpler versions of `atoi()` for string-to-long conversion.",
      "The `strtol()` family provides more robust string-to-number conversion by offering better error detection (e.g., distinguishing between a valid '0' and a conversion error via `errno` and an end pointer), handling of different number bases (radix), and parsing of leading/trailing characters. `atoi()` has limited error reporting.",
      "They are specifically for converting very long strings.",
      "`atoi()` is for integers, `strtol()` for longs, `sscanf()` for floats."
    ],
    "answer": 1,
    "category": "Linux Programming",
    "difficulty": 4
  }
]